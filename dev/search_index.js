var documenterSearchIndex = {"docs":
[{"location":"refs/","page":"References","title":"References","text":"The data and approximations used in Korg come from these papers:","category":"page"},{"location":"refs/","page":"References","title":"References","text":"Partition functions: Barklem & Collet 2016\nVoigt function approximation: Hunger 1965 via New Series in Astrophysics,Landolt-Bornstein (same as MOOG)\nionization energies: Haynes, W.M. 2010, CRC Handbook of Chemistry and Physics, 91st edn. (CRC Press, Taylor and Francis Group) via Barklem & Collet 2016\nHydrogenic bound-free and free-free opacities and H₂⁺ continuum opacities: Kurucz 1970\nH⁻ bound-free opacity: Wishart 1979 via a polynomial-fit provided in Gray 2005\nH⁻ free-free opacity: Bell & Berrington 1987 via a polynomial-fit provided in Gray 2005\nHe⁻ free-free opacity: John 1994 via a polynomial fit provided in Gray 2005","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"If you are having trouble getting Korg to work, please get in touch by  opening a GitHub issue (preferred), or sending Adam an email.","category":"page"},{"location":"install/#.-Install-Julia","page":"Install","title":"1. Install Julia","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"Install Julia by downloading a binary from the website.   See also the platform specific instructions, especially if you would like to use Julia from the command line.  ","category":"page"},{"location":"install/#.-Install-Korg","page":"Install","title":"2. Install Korg","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"Lauch a julia session (either by launching the app, or typing julia on the command line if you  have that set up).  Type ] to enter Pkg mode, then type add Korg.  That's it!","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"Alternatively, you can run","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"julia> using Pkg\njulia> Pkg.add(\"Korg\")","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"tip: Tip\nIf you are coming from Python, we also recommend installing  IJulia (for using Julia from Jupyter/IPython  notebooks), and PyPlot (for calling matplotlib from  Julia.","category":"page"},{"location":"install/#.-(Optional)-setup-PyJulia.","page":"Install","title":"3. (Optional) setup PyJulia.","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"If you would like to use Korg from Python, you can use  PyJulia.  Their documentation has detailed  installation notes, but here's the  short version: ","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"$ python3 -m pip install --user julia.\n$ python\n>>> import julia\n>>> julia.install()","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"See the python example notebook for a demonstration of how to use Korg from Python.","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"TODO","category":"page"},{"location":"devdocs/#Units","page":"Developer Documentation","title":"Units","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"We try to be explicit about units throughout the code.  CGS is used is most places, but we also use  eV-based units ocasionally.","category":"page"},{"location":"devdocs/#Complete-API","page":"Developer Documentation","title":"Complete API","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Modules = [Korg, Korg.ContinuumOpacity]","category":"page"},{"location":"devdocs/#Korg.Line-Union{Tuple{F}, Tuple{F, F, String, F}} where F<:Real","page":"Developer Documentation","title":"Korg.Line","text":"Line(wl, log_gf, species, E_lower)\n\nConstruct a Line without explicit broadening parameters.  They will be set automatically.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.air_to_vacuum-Tuple{Any}","page":"Developer Documentation","title":"Korg.air_to_vacuum","text":"air_to_vacuum(λ)\n\nconvert λ from an air wavelength to a vacuum wavelength\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.approximate_gammas-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.approximate_gammas","text":"A simplified form of the Unsoeld (1995) approximation for van der Waals and Stark broadening at  10,000 K.  The stark broadening  Returns log10(γ_vdW).\n\nIn the calculation of n², uses the approximation that \\overbar{r^2} = 5/2 {n^}^4 / Z^2 which neglects the dependence on the angular momentum quantum number, l, in the the form given by Warner 1967.\n\nUsed for atomic lines with no vdW and stark broadening info in the linelist.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.approximate_radiative_gamma-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.approximate_radiative_gamma","text":"approximate_radiative_gamma(wl, log_gf)\n\nApproximate radiate broadening parameter.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.blackbody-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.blackbody","text":"blackbody(T, λ)\n\nThe value of the Planck blackbody function for temperature T at wavelength λ.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.constant_R_LSF-Union{Tuple{F}, Tuple{AbstractVector{F}, Any, Any}} where F<:Real","page":"Developer Documentation","title":"Korg.constant_R_LSF","text":"constant_R_LSF(flux, wls, R)\n\nApplies a gaussian line spread function the the spectrum with flux vector flux and wavelength vector wls with constant spectral resolution, R = λ/Δλ.\n\nThis will have weird behavior if your wavelength grid is not locally linearly-spaced. It is intended to be run on a fine wavelength grid (Deltalambda lesssim 005 AA), then downsampled to the observational (or otherwise desired) grid.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.exponential_integral_2-Tuple{Any}","page":"Developer Documentation","title":"Korg.exponential_integral_2","text":"exponential_integral_2(x)\n\nApproximate second order exponential integral, E_2(x).  This stiches together several series  expansions to get an approximation which is accurate within 1% for all x.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_absolute_abundances-Tuple{Any, Any, Dict}","page":"Developer Documentation","title":"Korg.get_absolute_abundances","text":"get_absolute_abundances(elements, metallicity, A_X)\n\nCalculate NX/Ntotal for each X in elements given some specified abundances, A(X).  Use the  metallicity [X/H] to calculate those remaining from the solar values (except He).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_atoms-Tuple{Any}","page":"Developer Documentation","title":"Korg.get_atoms","text":"get_atoms(molecule)\n\nGet the atoms that make up a diatomic molecule\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_mass-Tuple{Any}","page":"Developer Documentation","title":"Korg.get_mass","text":"get_mass(atom_or_molecule)\n\nReturns the mass of atom_or_molecule in g.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ismolecule-Tuple{Any}","page":"Developer Documentation","title":"Korg.ismolecule","text":"ismolecule(species)\n\ntrue if the string passed represents a molecule (with or without its ionization state)\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.line_absorption-Tuple{Any, Any, Any, Any, Dict, Dict, Any}","page":"Developer Documentation","title":"Korg.line_absorption","text":"line_absorption(linelist, λs, temp, nₑ, n_densities, partition_fns, ξ\n               ; α_cntm=nothing, cutoff_threshold=1e-3, window_size=20.0*1e-8)\n\nCalculate the opacity coefficient, α, in units of cm^-1 from all lines in linelist, at wavelengths λs. \n\nother arguments:\n\ntemp the temerature in K\nn_densities, a Dict mapping species to absolute number density [cm^-3].\npartition_fns, a Dict containing the partition function of each species\nξ is the microturbulent velocity in cm/s (n.b. NOT km/s)\n\nThe three keyword arguments specify how the size of the window over which each line is calculated  is chosen.  \n\nIf α_cntm is passed as a callable returning the continuum opacity as a function of \n\nwavelength, the line window will extend to 4 doppler widths or the wavelength at which the Lorentz wings of the line are at cutoff_threshold * α_cntm[line.wl], whichever is greater.   cutoff_threshold defaults to 1e-3.  \n\nif α_cntm is not passed, defaults to window_size, which is 2e-7 (in cm, i.e. 20 Å) unless\n\notherwise specified\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.line_profile-NTuple{5, Real}","page":"Developer Documentation","title":"Korg.line_profile","text":"line_profile(λ₀, invΔλ_D, Δλ_L, line_amplitude, λ)\n\nA normalized voigt profile centered on λ₀ with doppler width invΔλ_D = 1/ΔλD and lorentz width  `ΔλLevaluated atλ` (cm).  Note that this returns values in units of cm^-1.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.molecular_equilibrium-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.molecular_equilibrium","text":"molecular_equilibrium(MEQS, T, nₜ, nₑ; x0)\n\nIteratively solve for the number density of each species. Returns a Dict mapping species to number  densities.\n\narguments:\n\nthe system of molecular equilibrium equations MEQs (the thing returned by \n\nmolecular_equilibrium_equations)\n\nthe temperature T, \nthe number density of non-electron particles nₜ\nthe electron number density nₑ\noptionally, x0, a starting point for the solver\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.molecular_equilibrium_equations-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.molecular_equilibrium_equations","text":"molecular_equilibrium_equations(absolute_abundances, ironization_energies, partiation_fns, equilibrium_constants)\n\nReturns a NamedTuple representing the system of equations specifying molecular equilibrium.\n\narguments:\n\nA Dict of absolute_abundances, NX/Ntotal\na Dict of ionization energies, ionization_energies.  The keys of act as a list of all atoms.\na Dict of partition functions, partition_fns\na Dict of log molecular equilibrium constants, equilibrium_constants, in partial pressure form.  The keys of equilibrium_constants act as a list of all molecules.\n\nThe system of equations is specified with the number densities of the neutral atoms as free  parameters.  Each equation specifies the conservation of a particular species, e.g. (simplified)\n\nn(O) = n(CO) + n(OH) + n(O I) + n(O II) + n(O III).\n\nIn this equation:\n\nn(O), the number density of oxygen atoms in any form comes absolute_abundances and the total\n\nnumber density (supplied later)\n\nn(O I) is a free parameter.  The numerical solver is varying this to satisfy the system of  equations.\nn(O II), and n(O III) come from the Saha (ionization) equation given n(O I)\nn(CO) and n(OH) come from the molecular equilibrium constants K, which are precomputed  over a range of temperatures. \n\nK is defined in terms of partial pressures, so e.g. K(OH)  ==  (p(O) p(H)) / p(OH)  ==  (n(O) + n(H)) / n(OH) kT Alternatively, this could be computed via a Saha equation involving the molecular partition function and dissolution energy.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.new_line_imputing_zeros-NTuple{7, Any}","page":"Developer Documentation","title":"Korg.new_line_imputing_zeros","text":"new_line_imputing_zeros(wl, log_gf, species, E_lower, gamma_rad, gamma_stark, vdW)\n\nConstruct a new line treating broadening params equal to 0 as missing (how VALD represents missing values).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.parse_fwf-Tuple{String, Any}","page":"Developer Documentation","title":"Korg.parse_fwf","text":"parse_fwf(source, rowspec; datarow, lastrow)\n\nParse fixed-width files, returning a vector of NamedTuples. source can be either an AbstractVector of Strings or a filename. rowspec should be a vector of tuples each containing, in order\n\na range object corresponding to the column postion\nthe type.  Strings will be pulled directly & other types will be parsed with parse.\nthe column name, a Symbol.\noptionally, a function to apply to the parsed value.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.parse_species_code-Tuple{AbstractString}","page":"Developer Documentation","title":"Korg.parse_species_code","text":"parse_species_code(code)\n\nParse the \"species code\" as it is often specified in linelists and return a the \"astronomy\"  notation. 01.00 → \"HI\", 02.01 → \"HeII\", 02.1000 → \"HeII\", 0608 → \"COI\", etc.  \n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_linelist-Tuple{String}","page":"Developer Documentation","title":"Korg.read_linelist","text":"read_linelist(fname; format=\"kurucz\")\n\nParse the provided linelist. in \"Kurucz\" format. Pass format=\"kurucz\" for a Kurucz linelist, format=\"vald\" for a Vald linelist, and format=\"moog\" for a MOOG linelist.\n\nNote that dissociation energies in a MOOG linelist will be ignored.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_model_atmosphere-Tuple{AbstractString}","page":"Developer Documentation","title":"Korg.read_model_atmosphere","text":"read_model_atmosphere(filename)\n\nParse the provided model atmosphere file in  \"Kurucz\" format.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_partition_funcs-Tuple{Any}","page":"Developer Documentation","title":"Korg.read_partition_funcs","text":"functon setup_atomic_partition_funcs()\n\nConstructs a Dict holding functions for various atomic species that computes the partition function at an input temperature.\n\nIn more detail, the partition function is linearly interpolated from values tabulated from Barklem  & Collet (2016). The partition functions can only be evaluated at temperatures between 1e-5 K and  1e4 K. The tabulated values were NOT computed with a cutoff principle quantum number. This can lead to a couple percent error for some neutral species in solar type stars (I think the problem becomes worse in hotter stars). See the paper for more details.\n\nNote that the paper seems to suggest that we could actually use cubic interpolation. That should be revisited in the future.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.rectify-Union{Tuple{F}, Tuple{AbstractVector{F}, Any}} where F<:Real","page":"Developer Documentation","title":"Korg.rectify","text":"Rectify the spectrum with flux vector flux and wavelengths wls by dividing out a moving q-quantile with bandwidth.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.saha_ion_weights-Tuple{Any, Any, String, Dict, Dict}","page":"Developer Documentation","title":"Korg.saha_ion_weights","text":"saha_ion_weights(T, nₑ, atom, ionization_energies, partition_functions)\n\nReturns (wII, wIII), where wII is the ratio of singly ionized to neutral atoms of a given  element, and wIII is the ration of doubly ionized to neutral atoms.\n\narguments:\n\ntemperature T [K]\nelectron number density nₑ [cm^-3]\natom, the atomic symbol of the element \nionization_energies is a Dict mapping elements to their first three ionization energies\npartition_funcs is a Dict mapping species to their partition functions\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.saha_ion_weights-Tuple{Any, Any, Vector{var\"#s5\"} where var\"#s5\"<:Real, Vector{Function}}","page":"Developer Documentation","title":"Korg.saha_ion_weights","text":"convieience method for easier testing\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.scaled_stark-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.scaled_stark","text":"the stark broadening gamma scaled acording to its temperature dependence\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.scaled_vdW","page":"Developer Documentation","title":"Korg.scaled_vdW","text":"the vdW broadening gamma scaled acording to its temperature dependence, using either simple scaling  or ABO\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.setup_equilibrium_constants-Tuple{}","page":"Developer Documentation","title":"Korg.setup_equilibrium_constants","text":"setup_equilibrium_constants()\n\nReturns a Dict holding the default (Barklem & Collet 2016) log equilibrium constants.\n\nThere are two things of note about about equation 7 in this paper.  The first is that it defines K  as the reciprocal of what is actually supplied in the data table.  The second is that in order for  it to be correct, m must be interpreted as a reduced mass, m₁m₂/(m₁ + m₂).  This can be verified by  re-deriving the equilibrium constants from the partition functions and dissolution constants  provided by the paper.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.setup_ionization_energies","page":"Developer Documentation","title":"Korg.setup_ionization_energies","text":"setup_ionization_energies([filename])\n\nParses the table of ionization energies and returns it as a dictionary mapping elements to their ionization energies, [χ₁, χ₂, χ₃] in eV.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.setup_partition_funcs","page":"Developer Documentation","title":"Korg.setup_partition_funcs","text":"setup_partition_funcs()\n\nReturns a Dict holding the default (Barklem & Collet 2016) partition functions.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.sigma_line-Tuple{Real}","page":"Developer Documentation","title":"Korg.sigma_line","text":"sigma_line(wl)\n\nThe cross-section (divided by gf) at wavelength wl in Ångstroms of a transition for which the product of the degeneracy and oscillator strength is 10^log_gf.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.strip_ionization-Tuple{AbstractString}","page":"Developer Documentation","title":"Korg.strip_ionization","text":"strip_ionization(code)\n\nget the chemical symbol for the element of the species\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.synthesize-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.synthesize","text":"synthesize(atm, linelist, λs, [metallicity, [alpha]]; abundances=Dict())\n\nSolve the transfer equation in the model atmosphere atm with the transitions in linelist at the  wavelengths λs [Å] to get the resultant astrophysical flux at each wavelength.\n\noptional arguments:\n\nmetallicity, i.e. [metals/H] is log_10 solar relative\nvmic (default: 0) is the microturbulent velocity, ξ, in km/s.\nabundances are A(X) format, i.e. A(x) = log10(nX/nH), where nX is the number density of X.\nline_buffer (default: 10): the farthest (in Å) any line can be from the provide wavelenth range   before it is discarded.  If the edge of your window is near a strong line, you may have to turn   this up.\ncntm_step: the wavelength resolution with which continuum opacities are calculated.\nionization_energies, a Dict containing the first three ionization energies of each element,   defaults to Korg.ionization_energies.\npartition_funcs, a Dict mapping species to partition functions. Defaults to data from   Barklem & Collet 2016, Korg.partition_funcs.\nequilibrium_constants, a Dict mapping diatomic molecules to their molecular equilbrium constants in partial pressure form.  Defaults to data from Barklem and Collet 2016,  Korg.equilibrium_constants.\n\nUses solar abundances scaled by metallicity and for those not provided.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.total_continuum_opacity-Union{Tuple{F}, Tuple{Vector{F}, F, F, F, Dict, Dict}} where F<:Real","page":"Developer Documentation","title":"Korg.total_continuum_opacity","text":"total_continuum_opacity(νs, T, nₑ, ρ, number_densities, partition_funcs)\n\nThe total continuum opacity, κ, at many frequencies, ν.\n\nνs are frequencies in Hz\nT is temperature in K\nnₑ is the electron number density in cm^-3\nρ is the density in g cm^-3 \nnumber_densities is a Dict mapping each species to its number density\npartition_funcs is a `Dict mapping each species to its partition function\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.translational_U-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.translational_U","text":"translational_U(m, T)\n\nThe contribution to the partition function from the free movement of a particle. Used in the Saha equation.\n\narguments\n\nm is the particle mass\nT is the temperature in K\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.trapezoid_rule-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.trapezoid_rule","text":"trapezoid_rule(xs, fs)\n\nApproximate the integral from x₁ to x₂ of f(x) with the trapezoid rule given x-values xs and f(x) values fs.\n\nThis should be good enough to numerically solve the transport equation, since model atmospheres usually have carefully chosen knots.  We probably want to add higher-order aproximations later.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.vacuum_to_air-Tuple{Any}","page":"Developer Documentation","title":"Korg.vacuum_to_air","text":"vacuum_to_air(λ)\n\nconvert λ from a vacuum wavelength to an air wavelength\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.voigt-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.voigt","text":"voigt(α, v)\n\nThe voigt function, H.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumOpacity.H2plus_bf_and_ff-NTuple{5, Real}","page":"Developer Documentation","title":"Korg.ContinuumOpacity.H2plus_bf_and_ff","text":"H2plus_bf_and_ff(nH_I_div_partition, n_HII, ν, ρ, T)\n\nCompute the combined H₂⁺ bound-free and free-free opacity κ.\n\nThis uses polynomial fits from Gray (2005) that were derived from data tabulated in Bates (1952).\n\nArguments\n\nnH_I_div_partition: the total number density of H I divided by its partition   function.\nnH_II: the number density of H II (not of H₂⁺).\nν: frequency in Hz\nρ: mass density in g/cm³\nT: temperature in K\n\nWhile the formal type signature requires that these be Real, Float32s (or Float32-derived  types) may introduce numerical instability.\n\nNotes\n\nThis follows equation 8.15 of Gray (2005), which involves 2 polynomials that were fit to data provided in Bates (1952).\n\nThe combined H₂⁺ bound-free and free-free opacity opacity calculation can be cast as:     κ = const * σ₁ * exp(-U₁ / (kboltzT)) * n(H I, n=1) * n(H II) * (1 - exp(-hν/(kboltzT))) / ρ where σ₁ and U₁ are just functions of ν. Note that Bates (1952) and Gray (2005) both use the number density of all energy states of H I instead of n(H I, n=1). However, Kurucz (1970) makes a note in section 5.2 about how the photodisociation of H₂⁺ produces a ground state H atom and that we should therefore use n(H I, n=1) instead. This difference will only cause Bates/Gray to be wrong by a fraction of a percent (at most) for T ≤ 1.2e4 K. In this function we use n(H I, n=1).\n\nIn this function, we use polynomial approximations that Gray (2005) fit for σ₁ and U₁ using data from Table 1 of Bates (1952). Gray (2005) notes that the approximations match Bates' (1952) tabulated absorption data for 3800 Å ≤ λ ≤ 25000 Å at an accuracy of 0.3%. After reviewing the data in Bates (1952) I've concluded that Gray (2005) actually rounded down the lower end of the wavelength from 10⁵/26 Å or ∼3847 Å. (In other words, the approximation is good for 3847 Å ≤ λ ≤ 25000.0 Å).\n\nWhile this may fit to σ₁ and U₁ to better than 0.3%, comparisons against values from table 2 of Bates (1952) indicate that the function reproduces the full absorption coeffient at better than 1.5%. Gray (2005) did not provide a temperature range, but Bates (1952) only computed the absorption coefficient for 2500 K ≤ T ≤ 12000 K. In the text they have a comment that the proton's De Broglie wavelength is large at 2500 K and their semi-classical treatment may start to break down. However, as long as use n(H I, n=1), there doesn't seem to be any reason for us to enforce an upper Temperature limit.\n\nBates (1952) states that his classical treatment of the interaction is probably most accurate at higher temperatures and longer wavelengths (note that the longest λ considered in the paper is 8 times larger than the max λ the polynomials are fit against). He suggests that treatment is probably correct \"to well within one part in ten even at the lower temperatures and [lower wavelengths].\"\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumOpacity.Heminus_ff-NTuple{5, Real}","page":"Developer Documentation","title":"Korg.ContinuumOpacity.Heminus_ff","text":"Heminus_ff(nHe_I_div_partition, ne, ν, ρ, T)\n\nCompute the He⁻ free-free opacity κ.\n\nThe naming scheme for free-free absorption is counter-inutitive. This actually refers to the reaction:  photon + e⁻ + He I -> e⁻ + He I.\n\nArguments\n\nnHe_I_div_partition::Flt: the total number density of H I divided by its partition function.\nne::Flt: the number density of free electrons.\nν::Flt: frequency in Hz\nρ::Flt: mass density in g/cm³\nT::Flt: temperature in K\n\nNotes\n\nThis follows equation 8.16 of Grey (2005) which provides a polynomial fit absorption to data tabulated in John 1994. According to that equation the \"continuous absorption coefficient per Hydrogen\" is given by:     α(He⁻_ff)PₑA(He) / (1 + Φ(He)/Pₑ) in which\n\nlog10(α(He⁻ff)) is the polynomial term.\nA(He) is the number abundance of Helium particles relative to Hydrogen particles. For reference, A(He) = [n(He I) + n(He II) + n(He III)] / [n(H I) + n(H II)]\nPₑ is the partial pressure contributed by electrons. For reference, Pₑ = nₑ*kb * T.\n1/(1 + Φ(He)/Pₑ) comes from the Saha equation and expresses n(He I) / [n(He I) + n(He II)].\n\nIn the above expression, α(He⁻_ff)*Pₑ specifies the free-free atomic absorption coefficient per ground state He I atom. The expression seems to implicitly assume that\n\napproximately all He I is in the ground state\nn(He I) / [n(He I) + n(He II)] is roughly n(He I) / [n(He I) + n(He II) + n(HeIII)]\n\n(at least for the range of temperatures where α can be accurately computed).\n\nTo convert the expression to opacity, they divided it by the product of the mean molecular weight and the Hydrogen mass. With that in mind, we can write an the equation for opacity (removing the apparent assumptions) as κν = α(He⁻ff)Pₑn(He I, n=1)/ρ.\n\nFor 5063 Å ≤ λ ≤ 151878 Å and 2520 K ≤ T ≤ 10080 K, Gray (2005) claims that the polynomial fit the tabulated data at a precision of 1% or better. In practice, we found that it only fits the data to better than 3.1% (it's possible that for smaller λ the fit may be better). For reference, the tabulated data in these ranges of values consist of an irregularly spaced rectangular grid with 15 λ values and 9 Temperature values. According to John (1994), improved calculations are unlikely to alter the tabulated data for λ > 1e4Å, \"by more than about 2%.\" The errors introduced by the approximations for 5.06e3 Å ≤ λ ≤ 1e4 Å \"are expected to be well below 10%.\"\n\nAn alternative approach using a fit to older data is provided in section 5.7 of Kurucz (1970).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumOpacity.Hminus_bf","page":"Developer Documentation","title":"Korg.ContinuumOpacity.Hminus_bf","text":"Hminus_bf(nH_I_div_partition, ne, ν, ρ, T, [ion_energy_H⁻])\n\nCompute the H⁻ bound-free opacity κ\n\nArguments\n\nnH_I_div_partition::Flt: the total number density of H I divided by its partition function.\nne the electron number density\nν::Flt: frequency in Hz\nρ::Flt: mass density in g/cm³\nT::Flt: temperature in K\nion_energy_H⁻::Flt: Specifies the ionization energy of the single state of H⁻ in eV. This is  roughly 0.7552 eV.\n\nNotes\n\nThis function assumes that n(H⁻) ≪ n(H I) + n(H II). The number density of n(H⁻) should not be pre-computed (instead it's computed internally by this function).\n\nThis function is adapted from equation 8.12 from Grey (2005). This equation gives the absorption coefficient per H I atom (uncorrected by stimulated emission) is given by:\n\n``8.316e-10 \\alpha_{bf}(H^-) P_e \\theta^{2.5} * 10^{{\rm ion_energy_H}^- \\theta} U(H⁻,T)/ U(H I,T)``\n\nwhere:\n\nalpha_bf(H^-) is the photo dissociation cross-section. We estimate this by linearly interpolating data from Wishart (1979).\nθ = log10(e)/(k*T) or θ = 5040/T in units of eV⁻¹\nU(H⁻,T) is the partition function of H⁻ at temperature T. This is always 1\nU(H I,T) is the partition function of H I at temperature T. This is 2 at low to intermediate T.\n\nEqn 8.12 of Grey (2005) implicitly assumes that (U(H⁻,T)/ U(H I,T)) is always equal to 0.5.\n\nThis expression is simplicitly a rewritten form of: αff_H⁻ * n(H⁻)/n(H I) where n(H⁻)/n(H I) has been replaced with the expanded form of the saha equation, in which n₀ = n(H⁻) and n₁ = n(H I).\n\nCombining 8.18, and 8.19 of Gray (2005), indicate that the opacity contribution of H⁻ bound-free absorption (with stimulated emission correction) is given by:\n\nkappa_nu = alpha_bf(H^-) fracn(H^-)n(H I) (1 - exp left( frac-hnuk Tright) fracn(H I)n(H I) + n(H II) fracn(H I) + n(H II)rho\n\nThis can be rewritten as: kappa_nu = alpha_bf(H^-) n(H) (1 - exp left( frac-hnuk Tright)   rho\n\nWishart (1979) expects the tabulated data to have better than 1% percent accuracy. Mathisen (1984) suggests that this data has better than 3% accuracy.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumOpacity.Hminus_ff-NTuple{5, Real}","page":"Developer Documentation","title":"Korg.ContinuumOpacity.Hminus_ff","text":"Hminus_ff(nH_I_div_partition, ne, ν, ρ, T)\n\nCompute the H⁻ free-free opacity κ\n\nThe naming scheme for free-free absorption is counter-inutitive. This actually refers to the  reaction:  photon + e⁻ + H I -> e⁻ + H I.\n\nArguments\n\nnH_I_div_partition::Flt: the total number density of H I divided by its partition function.\nne::Flt: the number density of free electrons.\nν::Flt: frequency in Hz\nρ::Flt: mass density in g/cm³\nT::Flt: temperature in K\n\nNotes\n\nThis is taken from equation 8.13 of Gray (2005). This uses a polynomial to Bell & Berrington (1987) tabulated values for αff(H⁻), which implicitly includes the correction for stimulated emission. The polynomial fits αff(H⁻) in the range 2520 K ≤ T ≤ 10080 K and 2604 Å ≤ λ ≤ 113918 Å. According to the book, the polynomial fit to the tabulated data typically has 1% precision. We find that at worst, the discrepancy never exceeds 2.25%.\n\nFrom equations 8.13, 8.18, and 8.19 of Gray (2005), the free-free opacity from H⁻ is given by:                               n(H I)          n(H I) + n(H II)    κν = αff(H⁻) * Pₑ * ––––––––– * ––––––––-                           n(H I) + n(H II)            ρ This can be rewritten as: κν = αff(H⁻) * Pₑ * n(H I) / ρ\n\nBased on Section 5.3 from Kurucz (1970), I'm fairly confident that the \"more correct\" version of the opacity equation should actually read  κν = αff(H⁻) * Pₑ * n(H I, n = 1) / ρ, and that the form provided by Gray (2005) implicitly assumes that n(H I, n = 1) ~ n(H I). This seems to be a  prettygood assumption given the tabulated values of the partition function in Table D.2 of Gray  (2005). From the boltzmann equation:      n(H I, n = 1) = n(H I)gₙ₌₁/u(T)exp(-Eₙ₌₁/(kT)) = n(H I) * 2/u(T)exp(0) = n(H I) * 2/u(T). According to Table D.2 of Grey, this approximation only introduces a ≤0.5% overestimate in  n(H I, n = 1) over the temperature range where the polynomial is valid.\n\nWe also considered the polynomial fit in Section 5.3 from Kurucz (1970). Unfortunately, it seems wrong (it gives lots of negative numbers).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumOpacity._Hminus_bf_cross_section-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.ContinuumOpacity._Hminus_bf_cross_section","text":"_Hminus_bf_cross_section(λ, ion_energy_H⁻)\n\nCompute the H⁻ bound-free cross-section at a given wavelength (specified in Å). The cross-section  has units of megabarns per H⁻ particle and does NOT include a correction for stimulated emission.\n\nThis function linearly interpolates the table provided in Wishart (1979).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumOpacity._hydrogenic_bf_high_n_opacity-Tuple{Integer, Integer, Real, Real, Real, Real, Real}","page":"Developer Documentation","title":"Korg.ContinuumOpacity._hydrogenic_bf_high_n_opacity","text":"_hydrogenic_bf_high_n_opacity(Z, nmin, nsdens_div_partition, ν, T, ion_energy)\n\nApproximates the sum of opacity contributions by all bound-free transitions in which the electron originates in an energy level of nmin or larger using an integral.\n\nIn full detail, the calculated quantity is described as     ∑{n'=nmin}^∞ ndens(n=n') * αν(n=n') * (1 - exp(-hν/k/T))/ρ, where α(n=n') is the absorption coefficient for the bound-free atomic absorption coefficient (uncorrected for stimulated emission). This function approximates this sum with an integral.\n\nArguments\n\nZ::Integer: Z is the atomic number of the ion (1 for HI)\nnmin::Integer: The lowest energy level (principle quantum number) included in the calculation\nnsdens_div_partition is the number density of the current species divided by the  partition function.\nν: frequency in Hz\nρ: mass density in g/cm³\nT: temperature in K\nion_energy: the ionization energy from the ground state (in eV).\n\nNotes\n\nThis implements equation (5.6) from Kurucz (1970). I think ρ was simply omitted from that equation.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumOpacity._ndens_Hminus","page":"Developer Documentation","title":"Korg.ContinuumOpacity._ndens_Hminus","text":"_ndens_Hminus(nH_I_div_partition, ne, T, ion_energy = _H⁻_ion_energy)\n\nCompute the number density of H⁻ (implements eqn 5.10 of Kurucz 1970). This is an application of the saha equation where the \"ground state\" is H⁻ and the \"first ionization state\" is H I. The partition function of H⁻ is 1 at all temperatures.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumOpacity.electron_scattering-Union{Tuple{F}, Tuple{F, F}} where F<:Real","page":"Developer Documentation","title":"Korg.ContinuumOpacity.electron_scattering","text":"electron_scattering(nₑ, ρ)\n\nCompute the opacity from scattering off of free electrons. This has no wavelength dependence. It assumes isotropic scattering\n\nArguments\n\nnₑ::F: number density of free electrons (in cgs)\nρ::F: the mass density\n\nNotes\n\nI adopted the formula described in section 5.12 of Kurucz (1970) and the equation in the electron scattering subsection of Gray (2005); the actual coefficient value comes from the latter. It turns out that the coefficient in Kurucz (1970) has a typo (it's a factor of 10 too large).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumOpacity.gaunt_ff_kurucz-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.ContinuumOpacity.gaunt_ff_kurucz","text":"gaunt_ff_kurucz(log_u, log_γ2)\n\ncomputes the thermally averaged free-free gaunt factor by interpolating the table provided in section 5.1 of Kurucz (1970). The table was derived from a figure in Karsas and Latter (1961).\n\nArguments\n\nlog_u: Equal to log₁₀(u) = log₁₀(hν/(kT))\nlog_γ2: Equal to log₁₀(γ²) = log₁₀(RydbergHZ²/(kT))\n\nNote\n\nThere is some ambiguity over whether we should replace RydbergH*Z² in the definition of γ² with the ionization energy, but it's probably a negligible difference (given the log scale).\n\nIn the future, we may want to the interpolate the table reported in van Hoof, Ferland, Williams, Volk, Chatzikos, Lykins, & Porter (2013) because it's more accurate and applies over a larger range of values.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumOpacity.hydrogenic_bf_opacity","page":"Developer Documentation","title":"Korg.ContinuumOpacity.hydrogenic_bf_opacity","text":"hydrogenic_bf_opacity(Z, nmax_explicit_sum, nsdens_div_partition, ν, ρ, T,\n                      ion_energy, [integrate_high_n])\n\nCompute the bound-free opacity contributed by all energy states of a Hydrogenic species\n\nThe calculation is broken into 2 parts: (i) the contributions of the lowest energy states are  explicitly summed and (ii) the contributions of the higher energy states are estimated with an  integral.\n\nArguments\n\nZ::Integer: Z is the atomic number of the species (e.g. 1 for H I or 2 for He II)\nnsdens_div_partition is the total number density of the species divided by the species's  partition function.\nν: frequency in Hz\nρ: mass density in g/cm³\nT: temperature in K\nion_energy: the ionization energy from the ground state (in eV). This can be   estimated as Z²*RydbergH (RydbergH is the ionization energy of Hydrogen)\nnmax_explicit_sum::Integer: The highest energy level whose opacity contribution is included in  the explicit sum. The contributions from higher levels are included in the integral.\nintegrate_high_n::bool: When this is false, bf opacity from higher energy states are not  estimated at all. Default is true.\n\nNotes\n\nThis follows the approach described in section 5.1 of Kurucz (1970).\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumOpacity.hydrogenic_ff_opacity-Tuple{Integer, Real, Real, Real, Real, Real}","page":"Developer Documentation","title":"Korg.ContinuumOpacity.hydrogenic_ff_opacity","text":"hydrogenic_ff_opacity(Z, ni, ne, ν, ρ, T)\n\ncomputes the free-free opacity for a hydrogenic species\n\nThe naming convention for free-free absorption is counter-intuitive. A free-free interaction is named as though the species interacting with the free electron had one more bound electron (in  other words it's named as though the free-electron and ion were bound together). In practice, this means that ni should refer to:\n\nthe number density of H II if computing the H I free-free opacity\nthe number density of He III if computing the He II free-free opacity\nthe number density of Li IV if computing the Li III free-free opacity\n\nArguments\n\nZ::Integer: the charge of the ion. For example, this is 1 for ionized H.\nni: the number density of the ion species in cm⁻³.\nne: the number density of free electrons.\nν: frequency in Hz\nρ: mass density in g/cm³\nT: temperature in K\n\nNote\n\nThis approach was adopted from equation 5.8 from section 5.1 of Kurucz (1970). Comparison against equation 5.18b of Rybicki & Lightman (2004), reveals that the equation in Kurucz (1970) omits the dependence on ρ. According to Rybicki & Lightman (2004) the free-free opacity (corrected for stimulated emission) is:     coef * Z² ne * ni * (1 - exp(-hplanckν/(kboltz*T))) * gff / (sqrt(T) * ν³ * ρ) Note that the gff is the free-free gaunt factor and coef is ∼3.7e8 (a more exact coefficient can be computed from eqn 5.18a).\n\nWith this in mind, equation 5.8 of Kurucz (1970) should actually read     ne * n(H II) * Fν(T) * (1 - exp(-hplanckν/(kboltzT))) / ρ where Fν(T) = coef * Z² * g_ff / (sqrt(T) * ν³).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumOpacity.ndens_state_hydrogenic-Tuple{Integer, Real, Real, Real}","page":"Developer Documentation","title":"Korg.ContinuumOpacity.ndens_state_hydrogenic","text":"ndens_state_hydrogenic(n, nsdens_div_partition, ion_energy, T)\n\nCalculates the LTE number density (in cm^-3) of a hydrogenic species at a given energy level.\n\nArguments\n\nn::Integer: The quantum number of the state\nnsdens_div_partition: The total (including all states) number density of the current \n\nionization species (in cm^-3) divided by the species's partition function.\n\nion_energy: The minimum energy (in eV) required to ionize the species (from the ground \n\nstate). This can be estimated as Z²ion_energy of hydrogen or Z²Rydberg_H.\n\nT: Temperature\n\nNote\n\nThis assumes that all hydrogenic species have a statistical weight of gₙ = 2*n².\n\nThis was taken from equation (5.4) of Kurucz (1970) (although this comes directly from the  boltzmann equation).\n\n\n\n\n\n","category":"method"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"This page docuements the Korg API for users of the package. Low-level functions that only people  digging into the guts of Korg will be interested in can be found on the  developer documentation.","category":"page"},{"location":"API/#top-level-functions","page":"Function Reference","title":"top-level functions","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"If you are synthesize a spectrum Korg, these are the functions you will call.   These functions are exported, so if you do using Korg, you can call them unquallified (i.e. synthesize instead of Korg.synthesize).  ","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"synthesize\nconstant_R_LSF\nread_line_list\nread_model_atmosphere","category":"page"},{"location":"API/#Korg.synthesize","page":"Function Reference","title":"Korg.synthesize","text":"synthesize(atm, linelist, λs, [metallicity, [alpha]]; abundances=Dict())\n\nSolve the transfer equation in the model atmosphere atm with the transitions in linelist at the  wavelengths λs [Å] to get the resultant astrophysical flux at each wavelength.\n\noptional arguments:\n\nmetallicity, i.e. [metals/H] is log_10 solar relative\nvmic (default: 0) is the microturbulent velocity, ξ, in km/s.\nabundances are A(X) format, i.e. A(x) = log10(nX/nH), where nX is the number density of X.\nline_buffer (default: 10): the farthest (in Å) any line can be from the provide wavelenth range   before it is discarded.  If the edge of your window is near a strong line, you may have to turn   this up.\ncntm_step: the wavelength resolution with which continuum opacities are calculated.\nionization_energies, a Dict containing the first three ionization energies of each element,   defaults to Korg.ionization_energies.\npartition_funcs, a Dict mapping species to partition functions. Defaults to data from   Barklem & Collet 2016, Korg.partition_funcs.\nequilibrium_constants, a Dict mapping diatomic molecules to their molecular equilbrium constants in partial pressure form.  Defaults to data from Barklem and Collet 2016,  Korg.equilibrium_constants.\n\nUses solar abundances scaled by metallicity and for those not provided.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.constant_R_LSF","page":"Function Reference","title":"Korg.constant_R_LSF","text":"constant_R_LSF(flux, wls, R)\n\nApplies a gaussian line spread function the the spectrum with flux vector flux and wavelength vector wls with constant spectral resolution, R = λ/Δλ.\n\nThis will have weird behavior if your wavelength grid is not locally linearly-spaced. It is intended to be run on a fine wavelength grid (Deltalambda lesssim 005 AA), then downsampled to the observational (or otherwise desired) grid.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.read_model_atmosphere","page":"Function Reference","title":"Korg.read_model_atmosphere","text":"read_model_atmosphere(filename)\n\nParse the provided model atmosphere file in  \"Kurucz\" format.\n\n\n\n\n\n","category":"function"},{"location":"API/#line-absorption","page":"Function Reference","title":"line absorption","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"These functions can be used to directly compute line opacities. ","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"Korg.line_absorption\nKorg.line_profile\nKorg.voigt","category":"page"},{"location":"API/#Korg.line_absorption","page":"Function Reference","title":"Korg.line_absorption","text":"line_absorption(linelist, λs, temp, nₑ, n_densities, partition_fns, ξ\n               ; α_cntm=nothing, cutoff_threshold=1e-3, window_size=20.0*1e-8)\n\nCalculate the opacity coefficient, α, in units of cm^-1 from all lines in linelist, at wavelengths λs. \n\nother arguments:\n\ntemp the temerature in K\nn_densities, a Dict mapping species to absolute number density [cm^-3].\npartition_fns, a Dict containing the partition function of each species\nξ is the microturbulent velocity in cm/s (n.b. NOT km/s)\n\nThe three keyword arguments specify how the size of the window over which each line is calculated  is chosen.  \n\nIf α_cntm is passed as a callable returning the continuum opacity as a function of \n\nwavelength, the line window will extend to 4 doppler widths or the wavelength at which the Lorentz wings of the line are at cutoff_threshold * α_cntm[line.wl], whichever is greater.   cutoff_threshold defaults to 1e-3.  \n\nif α_cntm is not passed, defaults to window_size, which is 2e-7 (in cm, i.e. 20 Å) unless\n\notherwise specified\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.line_profile","page":"Function Reference","title":"Korg.line_profile","text":"line_profile(λ₀, invΔλ_D, Δλ_L, line_amplitude, λ)\n\nA normalized voigt profile centered on λ₀ with doppler width invΔλ_D = 1/ΔλD and lorentz width  `ΔλLevaluated atλ` (cm).  Note that this returns values in units of cm^-1.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.voigt","page":"Function Reference","title":"Korg.voigt","text":"voigt(α, v)\n\nThe voigt function, H.\n\n\n\n\n\n","category":"function"},{"location":"API/#continuum-absorption","page":"Function Reference","title":"continuum absorption","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"These function can be used to directly compute continuum opacities.","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"Korg.total_continuum_opacity\nKorg.ContinuumOpacity.H_I_bf\nKorg.ContinuumOpacity.H_I_ff\nKorg.ContinuumOpacity.Hminus_bf\nKorg.ContinuumOpacity.Hminus_ff\nKorg.ContinuumOpacity.H2plus_bf_and_ff\nKorg.ContinuumOpacity.He_II_bf\nKorg.ContinuumOpacity.He_II_ff\nKorg.ContinuumOpacity.Heminus_ff\nKorg.ContinuumOpacity.electron_scattering","category":"page"},{"location":"API/#Korg.total_continuum_opacity","page":"Function Reference","title":"Korg.total_continuum_opacity","text":"total_continuum_opacity(νs, T, nₑ, ρ, number_densities, partition_funcs)\n\nThe total continuum opacity, κ, at many frequencies, ν.\n\nνs are frequencies in Hz\nT is temperature in K\nnₑ is the electron number density in cm^-3\nρ is the density in g cm^-3 \nnumber_densities is a Dict mapping each species to its number density\npartition_funcs is a `Dict mapping each species to its partition function\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumOpacity.Hminus_bf","page":"Function Reference","title":"Korg.ContinuumOpacity.Hminus_bf","text":"Hminus_bf(nH_I_div_partition, ne, ν, ρ, T, [ion_energy_H⁻])\n\nCompute the H⁻ bound-free opacity κ\n\nArguments\n\nnH_I_div_partition::Flt: the total number density of H I divided by its partition function.\nne the electron number density\nν::Flt: frequency in Hz\nρ::Flt: mass density in g/cm³\nT::Flt: temperature in K\nion_energy_H⁻::Flt: Specifies the ionization energy of the single state of H⁻ in eV. This is  roughly 0.7552 eV.\n\nNotes\n\nThis function assumes that n(H⁻) ≪ n(H I) + n(H II). The number density of n(H⁻) should not be pre-computed (instead it's computed internally by this function).\n\nThis function is adapted from equation 8.12 from Grey (2005). This equation gives the absorption coefficient per H I atom (uncorrected by stimulated emission) is given by:\n\n``8.316e-10 \\alpha_{bf}(H^-) P_e \\theta^{2.5} * 10^{{\rm ion_energy_H}^- \\theta} U(H⁻,T)/ U(H I,T)``\n\nwhere:\n\nalpha_bf(H^-) is the photo dissociation cross-section. We estimate this by linearly interpolating data from Wishart (1979).\nθ = log10(e)/(k*T) or θ = 5040/T in units of eV⁻¹\nU(H⁻,T) is the partition function of H⁻ at temperature T. This is always 1\nU(H I,T) is the partition function of H I at temperature T. This is 2 at low to intermediate T.\n\nEqn 8.12 of Grey (2005) implicitly assumes that (U(H⁻,T)/ U(H I,T)) is always equal to 0.5.\n\nThis expression is simplicitly a rewritten form of: αff_H⁻ * n(H⁻)/n(H I) where n(H⁻)/n(H I) has been replaced with the expanded form of the saha equation, in which n₀ = n(H⁻) and n₁ = n(H I).\n\nCombining 8.18, and 8.19 of Gray (2005), indicate that the opacity contribution of H⁻ bound-free absorption (with stimulated emission correction) is given by:\n\nkappa_nu = alpha_bf(H^-) fracn(H^-)n(H I) (1 - exp left( frac-hnuk Tright) fracn(H I)n(H I) + n(H II) fracn(H I) + n(H II)rho\n\nThis can be rewritten as: kappa_nu = alpha_bf(H^-) n(H) (1 - exp left( frac-hnuk Tright)   rho\n\nWishart (1979) expects the tabulated data to have better than 1% percent accuracy. Mathisen (1984) suggests that this data has better than 3% accuracy.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumOpacity.Hminus_ff","page":"Function Reference","title":"Korg.ContinuumOpacity.Hminus_ff","text":"Hminus_ff(nH_I_div_partition, ne, ν, ρ, T)\n\nCompute the H⁻ free-free opacity κ\n\nThe naming scheme for free-free absorption is counter-inutitive. This actually refers to the  reaction:  photon + e⁻ + H I -> e⁻ + H I.\n\nArguments\n\nnH_I_div_partition::Flt: the total number density of H I divided by its partition function.\nne::Flt: the number density of free electrons.\nν::Flt: frequency in Hz\nρ::Flt: mass density in g/cm³\nT::Flt: temperature in K\n\nNotes\n\nThis is taken from equation 8.13 of Gray (2005). This uses a polynomial to Bell & Berrington (1987) tabulated values for αff(H⁻), which implicitly includes the correction for stimulated emission. The polynomial fits αff(H⁻) in the range 2520 K ≤ T ≤ 10080 K and 2604 Å ≤ λ ≤ 113918 Å. According to the book, the polynomial fit to the tabulated data typically has 1% precision. We find that at worst, the discrepancy never exceeds 2.25%.\n\nFrom equations 8.13, 8.18, and 8.19 of Gray (2005), the free-free opacity from H⁻ is given by:                               n(H I)          n(H I) + n(H II)    κν = αff(H⁻) * Pₑ * ––––––––– * ––––––––-                           n(H I) + n(H II)            ρ This can be rewritten as: κν = αff(H⁻) * Pₑ * n(H I) / ρ\n\nBased on Section 5.3 from Kurucz (1970), I'm fairly confident that the \"more correct\" version of the opacity equation should actually read  κν = αff(H⁻) * Pₑ * n(H I, n = 1) / ρ, and that the form provided by Gray (2005) implicitly assumes that n(H I, n = 1) ~ n(H I). This seems to be a  prettygood assumption given the tabulated values of the partition function in Table D.2 of Gray  (2005). From the boltzmann equation:      n(H I, n = 1) = n(H I)gₙ₌₁/u(T)exp(-Eₙ₌₁/(kT)) = n(H I) * 2/u(T)exp(0) = n(H I) * 2/u(T). According to Table D.2 of Grey, this approximation only introduces a ≤0.5% overestimate in  n(H I, n = 1) over the temperature range where the polynomial is valid.\n\nWe also considered the polynomial fit in Section 5.3 from Kurucz (1970). Unfortunately, it seems wrong (it gives lots of negative numbers).\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumOpacity.H2plus_bf_and_ff","page":"Function Reference","title":"Korg.ContinuumOpacity.H2plus_bf_and_ff","text":"H2plus_bf_and_ff(nH_I_div_partition, n_HII, ν, ρ, T)\n\nCompute the combined H₂⁺ bound-free and free-free opacity κ.\n\nThis uses polynomial fits from Gray (2005) that were derived from data tabulated in Bates (1952).\n\nArguments\n\nnH_I_div_partition: the total number density of H I divided by its partition   function.\nnH_II: the number density of H II (not of H₂⁺).\nν: frequency in Hz\nρ: mass density in g/cm³\nT: temperature in K\n\nWhile the formal type signature requires that these be Real, Float32s (or Float32-derived  types) may introduce numerical instability.\n\nNotes\n\nThis follows equation 8.15 of Gray (2005), which involves 2 polynomials that were fit to data provided in Bates (1952).\n\nThe combined H₂⁺ bound-free and free-free opacity opacity calculation can be cast as:     κ = const * σ₁ * exp(-U₁ / (kboltzT)) * n(H I, n=1) * n(H II) * (1 - exp(-hν/(kboltzT))) / ρ where σ₁ and U₁ are just functions of ν. Note that Bates (1952) and Gray (2005) both use the number density of all energy states of H I instead of n(H I, n=1). However, Kurucz (1970) makes a note in section 5.2 about how the photodisociation of H₂⁺ produces a ground state H atom and that we should therefore use n(H I, n=1) instead. This difference will only cause Bates/Gray to be wrong by a fraction of a percent (at most) for T ≤ 1.2e4 K. In this function we use n(H I, n=1).\n\nIn this function, we use polynomial approximations that Gray (2005) fit for σ₁ and U₁ using data from Table 1 of Bates (1952). Gray (2005) notes that the approximations match Bates' (1952) tabulated absorption data for 3800 Å ≤ λ ≤ 25000 Å at an accuracy of 0.3%. After reviewing the data in Bates (1952) I've concluded that Gray (2005) actually rounded down the lower end of the wavelength from 10⁵/26 Å or ∼3847 Å. (In other words, the approximation is good for 3847 Å ≤ λ ≤ 25000.0 Å).\n\nWhile this may fit to σ₁ and U₁ to better than 0.3%, comparisons against values from table 2 of Bates (1952) indicate that the function reproduces the full absorption coeffient at better than 1.5%. Gray (2005) did not provide a temperature range, but Bates (1952) only computed the absorption coefficient for 2500 K ≤ T ≤ 12000 K. In the text they have a comment that the proton's De Broglie wavelength is large at 2500 K and their semi-classical treatment may start to break down. However, as long as use n(H I, n=1), there doesn't seem to be any reason for us to enforce an upper Temperature limit.\n\nBates (1952) states that his classical treatment of the interaction is probably most accurate at higher temperatures and longer wavelengths (note that the longest λ considered in the paper is 8 times larger than the max λ the polynomials are fit against). He suggests that treatment is probably correct \"to well within one part in ten even at the lower temperatures and [lower wavelengths].\"\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumOpacity.Heminus_ff","page":"Function Reference","title":"Korg.ContinuumOpacity.Heminus_ff","text":"Heminus_ff(nHe_I_div_partition, ne, ν, ρ, T)\n\nCompute the He⁻ free-free opacity κ.\n\nThe naming scheme for free-free absorption is counter-inutitive. This actually refers to the reaction:  photon + e⁻ + He I -> e⁻ + He I.\n\nArguments\n\nnHe_I_div_partition::Flt: the total number density of H I divided by its partition function.\nne::Flt: the number density of free electrons.\nν::Flt: frequency in Hz\nρ::Flt: mass density in g/cm³\nT::Flt: temperature in K\n\nNotes\n\nThis follows equation 8.16 of Grey (2005) which provides a polynomial fit absorption to data tabulated in John 1994. According to that equation the \"continuous absorption coefficient per Hydrogen\" is given by:     α(He⁻_ff)PₑA(He) / (1 + Φ(He)/Pₑ) in which\n\nlog10(α(He⁻ff)) is the polynomial term.\nA(He) is the number abundance of Helium particles relative to Hydrogen particles. For reference, A(He) = [n(He I) + n(He II) + n(He III)] / [n(H I) + n(H II)]\nPₑ is the partial pressure contributed by electrons. For reference, Pₑ = nₑ*kb * T.\n1/(1 + Φ(He)/Pₑ) comes from the Saha equation and expresses n(He I) / [n(He I) + n(He II)].\n\nIn the above expression, α(He⁻_ff)*Pₑ specifies the free-free atomic absorption coefficient per ground state He I atom. The expression seems to implicitly assume that\n\napproximately all He I is in the ground state\nn(He I) / [n(He I) + n(He II)] is roughly n(He I) / [n(He I) + n(He II) + n(HeIII)]\n\n(at least for the range of temperatures where α can be accurately computed).\n\nTo convert the expression to opacity, they divided it by the product of the mean molecular weight and the Hydrogen mass. With that in mind, we can write an the equation for opacity (removing the apparent assumptions) as κν = α(He⁻ff)Pₑn(He I, n=1)/ρ.\n\nFor 5063 Å ≤ λ ≤ 151878 Å and 2520 K ≤ T ≤ 10080 K, Gray (2005) claims that the polynomial fit the tabulated data at a precision of 1% or better. In practice, we found that it only fits the data to better than 3.1% (it's possible that for smaller λ the fit may be better). For reference, the tabulated data in these ranges of values consist of an irregularly spaced rectangular grid with 15 λ values and 9 Temperature values. According to John (1994), improved calculations are unlikely to alter the tabulated data for λ > 1e4Å, \"by more than about 2%.\" The errors introduced by the approximations for 5.06e3 Å ≤ λ ≤ 1e4 Å \"are expected to be well below 10%.\"\n\nAn alternative approach using a fit to older data is provided in section 5.7 of Kurucz (1970).\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumOpacity.electron_scattering","page":"Function Reference","title":"Korg.ContinuumOpacity.electron_scattering","text":"electron_scattering(nₑ, ρ)\n\nCompute the opacity from scattering off of free electrons. This has no wavelength dependence. It assumes isotropic scattering\n\nArguments\n\nnₑ::F: number density of free electrons (in cgs)\nρ::F: the mass density\n\nNotes\n\nI adopted the formula described in section 5.12 of Kurucz (1970) and the equation in the electron scattering subsection of Gray (2005); the actual coefficient value comes from the latter. It turns out that the coefficient in Kurucz (1970) has a typo (it's a factor of 10 too large).\n\n\n\n\n\n","category":"function"},{"location":"API/#statistical-mechanics","page":"Function Reference","title":"statistical mechanics","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"These functions can be used to calculate the number densities of all species in a given atospheric  layer, or other statmech calculations. ","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"Korg.saha_ion_weights\nKorg.molecular_equilibrium_equations\nKorg.molecular_equilibrium","category":"page"},{"location":"API/#Korg.saha_ion_weights","page":"Function Reference","title":"Korg.saha_ion_weights","text":"saha_ion_weights(T, nₑ, atom, ionization_energies, partition_functions)\n\nReturns (wII, wIII), where wII is the ratio of singly ionized to neutral atoms of a given  element, and wIII is the ration of doubly ionized to neutral atoms.\n\narguments:\n\ntemperature T [K]\nelectron number density nₑ [cm^-3]\natom, the atomic symbol of the element \nionization_energies is a Dict mapping elements to their first three ionization energies\npartition_funcs is a Dict mapping species to their partition functions\n\n\n\n\n\nconvieience method for easier testing\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.molecular_equilibrium_equations","page":"Function Reference","title":"Korg.molecular_equilibrium_equations","text":"molecular_equilibrium_equations(absolute_abundances, ironization_energies, partiation_fns, equilibrium_constants)\n\nReturns a NamedTuple representing the system of equations specifying molecular equilibrium.\n\narguments:\n\nA Dict of absolute_abundances, NX/Ntotal\na Dict of ionization energies, ionization_energies.  The keys of act as a list of all atoms.\na Dict of partition functions, partition_fns\na Dict of log molecular equilibrium constants, equilibrium_constants, in partial pressure form.  The keys of equilibrium_constants act as a list of all molecules.\n\nThe system of equations is specified with the number densities of the neutral atoms as free  parameters.  Each equation specifies the conservation of a particular species, e.g. (simplified)\n\nn(O) = n(CO) + n(OH) + n(O I) + n(O II) + n(O III).\n\nIn this equation:\n\nn(O), the number density of oxygen atoms in any form comes absolute_abundances and the total\n\nnumber density (supplied later)\n\nn(O I) is a free parameter.  The numerical solver is varying this to satisfy the system of  equations.\nn(O II), and n(O III) come from the Saha (ionization) equation given n(O I)\nn(CO) and n(OH) come from the molecular equilibrium constants K, which are precomputed  over a range of temperatures. \n\nK is defined in terms of partial pressures, so e.g. K(OH)  ==  (p(O) p(H)) / p(OH)  ==  (n(O) + n(H)) / n(OH) kT Alternatively, this could be computed via a Saha equation involving the molecular partition function and dissolution energy.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.molecular_equilibrium","page":"Function Reference","title":"Korg.molecular_equilibrium","text":"molecular_equilibrium(MEQS, T, nₜ, nₑ; x0)\n\nIteratively solve for the number density of each species. Returns a Dict mapping species to number  densities.\n\narguments:\n\nthe system of molecular equilibrium equations MEQs (the thing returned by \n\nmolecular_equilibrium_equations)\n\nthe temperature T, \nthe number density of non-electron particles nₜ\nthe electron number density nₑ\noptionally, x0, a starting point for the solver\n\n\n\n\n\n","category":"function"},{"location":"API/#misc","page":"Function Reference","title":"misc","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"Korg.blackbody\nKorg.get_absolute_abundances","category":"page"},{"location":"API/#Korg.blackbody","page":"Function Reference","title":"Korg.blackbody","text":"blackbody(T, λ)\n\nThe value of the Planck blackbody function for temperature T at wavelength λ.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.get_absolute_abundances","page":"Function Reference","title":"Korg.get_absolute_abundances","text":"get_absolute_abundances(elements, metallicity, A_X)\n\nCalculate NX/Ntotal for each X in elements given some specified abundances, A(X).  Use the  metallicity [X/H] to calculate those remaining from the solar values (except He).\n\n\n\n\n\n","category":"function"}]
}
