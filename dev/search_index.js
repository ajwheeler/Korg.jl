var documenterSearchIndex = {"docs":
[{"location":"install/#install","page":"Install","title":"1. Install Julia","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"Install Julia by downloading a binary from the website.   See also the platform specific instructions, especially if you would like to use Julia from the command line.  ","category":"page"},{"location":"install/#.-Install-Korg","page":"Install","title":"2. Install Korg","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"Lauch a julia session (either by launching the app, or typing julia on the command line if you have that set up).\nType ] to enter Pkg mode.\nType add Korg to install Korg and its dependencies.\nPress backspace or CTRL+C to exit Pkg mode (and return to the Julia REPL)","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"Alternatively, you can run","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"julia> using Pkg\njulia> Pkg.add(\"Korg\")","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"tip: Tip\nIf you are coming from Python, we also recommend installing  IJulia (for using Julia from Jupyter/IPython  notebooks), and PyPlot (for calling matplotlib from  Julia). If you want PyPlot to use you existing python/matplotlib installation, just do  ENV[\"PYTHON\"] = \"/path/to/python\" before you install.  See here for details.","category":"page"},{"location":"install/#.-(Optional)-setup-PyJulia.","page":"Install","title":"3. (Optional) setup PyJulia.","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"If you would like to use Korg from Python, you can use  PyJulia.  Their documentation has detailed  installation notes, but here's the  short version: ","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"$ python3 -m pip install --user julia\n$ python\n>>> import julia\n>>> julia.install()","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"Korg computes stellar spectra from 1D model atmospheres and linelists assuming local thermodynamic equilibrium.","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"After installing Korg, get started by looking at the top-level functions or the tutorial notebook.","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"If you are having trouble using or installing Korg, please get in touch by opening a GitHub issue (preferred), or sending Adam an email.","category":"page"},{"location":"devdocs/#Developer-documentation","page":"Developer Documentation","title":"Developer documentation","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"This page contains info for people interested in contributing code to Korg.  If you  have questions, do not hesitate to ask.","category":"page"},{"location":"devdocs/#Code-guidelines","page":"Developer Documentation","title":"Code guidelines","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Try to be explicit about units throughout the code, particularly when not using CGS.\nWhenever possible, calculations should be precise up to a factor of 10^-3.  When it's easy and inexpensive, they should be precise to 10^-5 or better.  \nEnsure types are generic enough to support dual numbers and autodifferentiation. \nLimit lines to 100 characters.\nUse ASCII characters in the names of functions that are part of the public API.\nUnless they will never be called elsewhere, provide docstrings describing the inputs, assumptions and outputs of any functions you write.","category":"page"},{"location":"devdocs/#Continuum-absorption","page":"Developer Documentation","title":"Continuum absorption","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Steps for implementing new continuum sources of absorption:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Define a helper function that computes a single absorption coefficient (in units of cm⁻²). The function should accept ν (in Hz) and T (in K) as the first and second arguments, respectively. The convention is for it should share a name with the corresponding public function, but have an underscore pre-appended (e.g. we define _H_I_bf to help implement H_I_bf).\nThe public function is the function constructed and returned by Korg.ContinuumAbsorption.bounds_checked_absorption that wraps the above helper function. This wrapper function implements bounds-checking for ν and T and supports the keyword arguments described in Continuum Absorption Kwargs.\nAdd a docstring describing the new function. At the very least, please describe any non-standard arguments and include a reference in the docstring to the source where the function was taken from.\nAdd a line to doc/src/API.md under the Continuum absorption heading to render the docstring of your new function.\nAdd a line to total_continuum_absorption that calls the new public function for absorption.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"The first two steps may not apply for sources that don't directly depend on ν and T (e.g. absorption from scattering).","category":"page"},{"location":"devdocs/#Experimental-support-for-bound-free-metal-absorption-coefficients","page":"Developer Documentation","title":"Experimental support for bound-free metal absorption coefficients","text":"","category":"section"},{"location":"devdocs/#Overview","page":"Developer Documentation","title":"Overview","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Korg currently has experimental support for computing the absorption coefficient contribution from bound-free absorption by metals using data from the Opacity Project's online database, TOPbase.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"For a given species (e.g. neutral C or singly-ionized C) TOPbase provides many tables of bound-free cross-sections (without stimulated emission correction), as functions of wavelength. The  weighted_bf_cross_section_TOPBase can be used to compute the effective bound-free cross-section (including corrections from stimulated emission), assuming LTE, for the given species.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Our tentative plan for the future is to use weighted_bf_cross_section_TOPBase for each species to construct a 2D tables of the effective bound-free cross-section that can be interpolated over temperature and wavelength. However, in the short-term the absorption_coef_bf_TOPBase function (which calls weighted_bf_cross_section_TOPBase) can be used to directly compute the absorption coefficient from the TOPbase data.","category":"page"},{"location":"devdocs/#Data-Sources","page":"Developer Documentation","title":"Data Sources","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Currently, to call weighted_bf_cross_section_TOPBase or absorption_coef_bf_TOPBase for a given species, a table is required from TOPbase that is the result of a photoionisation Cross Section query. The query should only request data for a single species.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Precise details about the requirements of the query is provided in the docstring of each_photo_ion_subtable. Note that leading/trailing white-space can cause issues for the parsers of these tables. For examples of these tables, see the TOPbase_cross_section_He_II.txt and TOPbase_cross_section_H_I.txt files in the test/data directory.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"The path to this table should be directly passed to weighted_bf_cross_section_TOPBase and absorption_coef_bf_TOPBase via the cross_sec_file keyword argument. Alternatively, the code supports searching for the table at the path $KORG_OP_DIR/<symbol>_<ion-state>.txt, where","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"KORG_OP_DIR is the name of an environment variable\n<symbol> is replaced with the species atomic symbol\n<ion-state> is replaced with the capitalized Roman numerals describing the ionization state.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Examples of the base filename (under this environment variable approach) include H_I.txt, He_I.txt, He_II.txt, or Al_III.txt.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"In the future, we also plan to add support for reading in photoionization tables from the NORAD-Atomic-Data webpage. ","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"warning: Caveats\nBe aware that there are discrepancies between the theoretical energy levels computed by the Opacity Project and empirical measurements. This can be seen by looking at the plots produced by the misc/gen_Opacity_Project_comparison_plot.jl plot. To recover accurate UV opacities, Gustafsson+ 2008 needed to correct the precise photon energies in the tables for C I, Mg I, Al I, and Si I. Before providing full support for these opacities, we may want to consider making similar corrections.","category":"page"},{"location":"devdocs/#Complete-API","page":"Developer Documentation","title":"Complete API","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Here are all the documented methods in Korg.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Modules = [Korg, Korg.CubicSplines, Korg.ContinuumAbsorption, Korg.ContinuumAbsorption.Stancil1994]","category":"page"},{"location":"devdocs/#Korg.Formula","page":"Developer Documentation","title":"Korg.Formula","text":"Represents an atom or molecule, irespective of its charge.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.Line-Union{Tuple{F}, Tuple{F, F, Korg.Species, F}, Tuple{F, F, Korg.Species, F, Union{Missing, F}}, Tuple{F, F, Korg.Species, F, Union{Missing, F}, Union{Missing, F}}, Tuple{F, F, Korg.Species, F, Union{Missing, F}, Union{Missing, F}, Union{Missing, Tuple{F, F}, F}}} where F<:Real","page":"Developer Documentation","title":"Korg.Line","text":"Line(wl::F, log_gf::F, species::Species, E_lower::F, \n     gamma_rad::Union{F, Missing}=missing, gamma_stark::Union{F, Missing}=missing, \n     vdw::Union{F, Tuple{F, F}, Missing}, missing) where F <: Real\n\nConstruct a Line.  If any of gamma_rad, gamma_stark, or vdW are missing, guess them. vdW may be log(ΓvdW) (assumed if negative), ΓvdW (assumed if 0 < vdW < 1), or packed ABO  parameters (assumed if vdW > 1).  It may also be passed as a Tuple, (σ, α).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.PlanarAtmosphere-Tuple{Korg.ShellAtmosphere}","page":"Developer Documentation","title":"Korg.PlanarAtmosphere","text":"PlanarAtmosphere(atm::ShellAtmosphere)\n\nConstruct a planar atmosphere with the data from a shell atmosphere.  Mostly useful for testing.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ShellAtmosphere-Tuple{Korg.PlanarAtmosphere, Any}","page":"Developer Documentation","title":"Korg.ShellAtmosphere","text":"ShellAtmosphere(atm::PlanarAtmosphere, R)\n\nConstruct a shell atmosphere with the data from a planar atmosphere and an outer radius.  Mostly  useful for testing.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Species","page":"Developer Documentation","title":"Korg.Species","text":"Represents an atom or molecule (a Formula) with a particular number of electrons (regardless of  their configuration).\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.Species-Tuple{AbstractString}","page":"Developer Documentation","title":"Korg.Species","text":"Species(code::AbstractString)\n\nParse the \"species code\" as it is often specified in linelists and return a the \"astronomy\"  notation. 01.00 → \"HI\", 02.01 → \"HeII\", 02.1000 → \"HeII\", 0608 → \"COI\", etc.  \n\nTo parse at compile time, use the species string macro, i.e. species\"H I\".\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg._plane_parallel_approximate_transfer_integral-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg._plane_parallel_approximate_transfer_integral","text":"_plane_parallel_approximate_transfer_integral(τ, m, b)\n\nThe exact solution to int (mtau + b) E_2(tau) d\\tau$.\n\nThe exponential integral function, expint, captures the integral over the disk of the star to  get the emergent astrophysical flux. You can verify it by substituting the variable of integration  in the exponential integal, t, with mu=1/t.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.air_to_vacuum-Tuple{Any}","page":"Developer Documentation","title":"Korg.air_to_vacuum","text":"air_to_vacuum(λ; cgs=λ<1)\n\nConvert λ from an air to vacuum.  λ is assumed to be in Å if it is ⩾ 1, in cm otherwise.  Formula  from Birch and Downs (1994) via the VALD website.\n\nSee also: vacuum_to_air.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.all_mu_transfer_integral-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.all_mu_transfer_integral","text":"all_mu_transfer_integral(τ, S)\n\nCompute exactly the solution to the transfer integral obtained be linearly interpolating the source  function, S across optical depths τ, without approximating the factor of E₂(τ).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.approximate_gammas-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.approximate_gammas","text":"approximate_gammas(wl, species, E_lower; ionization_energies=Korg.ionization_energies)\n\nA simplified form of the Unsoeld (1955) approximation for van der Waals broadening and the  Cowley 1971 approximation for  Stark broadening, evaluated at 10,000 K.  Used for atomic lines with no vdW and stark broadening info in the linelist.\n\nReturns (γ_stark, log10(γ_vdW)) in Hz, where these are the per-perturber quantities. For autoionizing lines (those for which Eupper > χ), Returns 0.0 for γvdW.\n\nIn the calculation of n*², uses the approximation that overbarr^2 = 52 n^*^4  Z^2 which neglects the dependence on the angular momentum quantum number, l, in the the form given by Warner 1967 (the earliest english  work reporting the Unsoeld result).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.approximate_radiative_gamma-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.approximate_radiative_gamma","text":"approximate_radiative_gamma(wl, log_gf)\n\nApproximate radiate broadening parameter.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.blackbody-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.blackbody","text":"blackbody(T, λ)\n\nThe value of the Planck blackbody function for temperature T at wavelength λ [cm].\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.constant_R_LSF-Union{Tuple{F}, Tuple{AbstractVector{F}, Any, Any}} where F<:Real","page":"Developer Documentation","title":"Korg.constant_R_LSF","text":"constant_R_LSF(flux, wls, R)\n\nApplies a gaussian line spread function the the spectrum with flux vector flux and wavelength vector wls with constant spectral resolution, R = lambdaDeltalambda\n\nFor the best match to data, your wavelength range should extend a couple Deltalambda outside  the region you are going to compare.\n\nwarning: Warning\nThis is a naive, slow implementation.  Do not use it when performance matters.\nconstant_R_LSF will have weird behavior if your wavelength grid is not locally linearly-spaced.  It is intended to be run on a fine wavelength grid, then downsampled to the observational (or   otherwise desired) grid.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.contained-Tuple{Real, Korg.Interval}","page":"Developer Documentation","title":"Korg.contained","text":"contained(value, interval)\n\nReturns whether value is contained by interval.\n\nExamples\n\njulia> contained(0.5, Interval(1.0,10.0))\nfalse\njulia> contained(5.0, Interval(1.0,10.0))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.contained_slice-Tuple{AbstractVector, Korg.Interval}","page":"Developer Documentation","title":"Korg.contained_slice","text":"contained_slice(vals, interval)\n\nReturns a range of indices denoting the elements of vals (which are assumed to be sorted in  increasing order) that are contained by interval. When no entries are contained by interval, this returns (1,0) (which is a valid empty slice).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.cumulative_trapezoid_rule!","page":"Developer Documentation","title":"Korg.cumulative_trapezoid_rule!","text":"cumulative_trapezoid_rule!(out, xs, fs, [len=length(xs)])\n\nApproximate the closed integral of f(x) from the first element of xs to each element of xs  (up to len) with the trapezoid rule, given f values fs. \n\nAssigns to the preallocated vector out.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.doppler_width-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.doppler_width","text":"the width of the doppler-broadening profile\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.exponential_integral_2-Tuple{Any}","page":"Developer Documentation","title":"Korg.exponential_integral_2","text":"exponential_integral_2(x)\n\nApproximate second order exponential integral, E_2(x).  This stiches together several series  expansions to get an approximation which is accurate within 1% for all x.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_absolute_abundances-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.get_absolute_abundances","text":"get_absolute_abundances(metallicity, abundances, solar_abundances, solar_relative)\n\nCalculate n_Xn_mathrmtotal for each element X given abundances in either [X/H] or  A(X) form.  See synthesize for a detailed description of the arguments. Returns a  vector indexed by atomic number.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_mass-Tuple{Korg.Formula}","page":"Developer Documentation","title":"Korg.get_mass","text":"get_mass(f::Formula)\n\nReturns the mass [g] of f.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.hydrogen_line_absorption!-NTuple{7, Any}","page":"Developer Documentation","title":"Korg.hydrogen_line_absorption!","text":"hydrogen_line_absorption(λs, T, nₑ, nH_I, UH_I, hline_stark_profiles, ξ; \n                              stark_window_size=3e-7, self_window_size=1e-6)\n\nCalculate contribution to the the absorption coefficient, α, from hydrogen lines in units of cm^-1, at wavelengths λs. \n\nUses profiles from Stehlé & Hutcheon (1999), which include Stark and Doppler broadening.   For Halpha, Hbeta, and Hgamma, the p-d approximated profiles from  Barklem, Piskunovet, and O'Mara 2000 are added to the absortion coefficient.  This \"convolution by summation\" is inexact, but true  convolution is expensive.\n\nArguments:\n\nT: temperature [K]\nnₑ: electron number density [cm^-3]\nnH_I: neutral hydrogen number density [cm^-3]\nUH_I: the value of the neutral hydrogen partition function\nhline_stark_profiles: (returned by setuphlinestark_profiles`)\nξ: microturbulent velocity [cm/s]. This is only applied to Hα-Hγ.  Other hydrogen lines profiles   are dominated by stark broadening, and the stark broadened profiles are pre-convolved with a   doppler profile.\nstark_window_size: the max distance from each line center [cm] at which to calculate the stark  broadening profile\nself_window_size: the max distance from each line center [cm] at which to calculate the line   absorption for Hα-Hγ (those dominated by self-broadening).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.inverse_gaussian_density-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.inverse_gaussian_density","text":"inverse_gaussian_density(ρ, σ)\n\nCalculate the inverse of a (0-centered) Gaussian PDF with standard deviation σ, i.e. the value of  x for which ρ = exp(-0.5 x^2/σ^2}) / √[2π], which is given by σ √[-2 log (√[2π]σρ)].  Returns  0 when ρ is larger than any value taken on by the PDF.\n\nSee also: inverse_lorentz_density.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.inverse_lorentz_density-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.inverse_lorentz_density","text":"inverse_lorentz_density(ρ, γ)\n\nCalculate the inverse of a (0-centered) Lorentz PDF with width γ, i.e. the value of x for which  ρ = 1 / (π γ (1 + x^2/γ^2)), which is given by √[γ/(πρ) - γ^2]. Returns 0 when ρ is larger than  any value taken on by the PDF.\n\nSee also: inverse_gaussian_density.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ismolecule-Tuple{Korg.Formula}","page":"Developer Documentation","title":"Korg.ismolecule","text":"ismolecule(f::Formula)\n\ntrue when f is composed of more than one atom\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.line_absorption!-NTuple{9, Any}","page":"Developer Documentation","title":"Korg.line_absorption!","text":"line_absorption(linelist, λs, temp, nₑ, n_densities, partition_fns, ξ\n               ; α_cntm=nothing, cutoff_threshold=1e-3, window_size=20.0*1e-8)\n\nCalculate the opacity coefficient, α, in units of cm^-1 from all lines in linelist, at wavelengths λs [cm^-1]. \n\nother arguments:\n\ntemp the temerature in K\nn_densities, a Dict mapping species to absolute number density [cm^-3].\npartition_fns, a Dict containing the partition function of each species\nξ is the microturbulent velocity in cm/s (n.b. NOT km/s)\nα_cntm is as a callable returning the continuum opacity as a function of wavelength. The window   within which a line is calculated will extend to the wavelength at which the Lorentz wings or   Doppler core of the line are at cutoff_threshold * α_cntm[line.wl], whichever is greater.  \ncuttoff_threshold (optional, default: 1e-3): see α_cntm\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.line_profile-NTuple{5, Real}","page":"Developer Documentation","title":"Korg.line_profile","text":"line_profile(λ₀, invΔλ_D, Δλ_L, line_amplitude, λ)\n\nA voigt profile centered on λ₀ with Doppler width 1/invΔλ_D and Lorentz width Δλ_L  evaluated at λ (cm).  Note that this returns values in units of cm^-1.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.load_atomic_partition_functions","page":"Developer Documentation","title":"Korg.load_atomic_partition_functions","text":"load_atomic_partition_functions()\n\nLoads saved tabulated values for atomic partition functions from disk. Returns a dictionary mapping species to interpolators over log(T).\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.molecular_equilibrium-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.molecular_equilibrium","text":"molecular_equilibrium(MEQS, T, nₜ, nₑ; x0)\n\nIteratively solve for the number density of each species. Returns a Dict mapping species to number  densities.\n\narguments:\n\nthe system of molecular equilibrium equations MEQs (the thing returned by \n\nmolecular_equilibrium_equations)\n\nthe temperature T, \nthe number density of non-electron particles nₜ\nthe electron number density nₑ\noptionally, x0, a starting point for the solver\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.molecular_equilibrium_equations-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.molecular_equilibrium_equations","text":"molecular_equilibrium_equations(absolute_abundances, ironization_energies, partiation_fns, equilibrium_constants)\n\nReturns a NamedTuple representing the system of equations specifying molecular equilibrium.\n\narguments:\n\nA Dict of absolute_abundances, NX/Ntotal\na Dict of ionization energies, ionization_energies.  The keys of act as a list of all atoms.\na Dict of partition functions, partition_fns\na Dict of log molecular equilibrium constants, equilibrium_constants, in partial pressure form.  The keys of equilibrium_constants act as a list of all molecules.\n\nThe system of equations is specified with the number densities of the neutral atoms as free  parameters.  Each equation specifies the conservation of a particular species, e.g. (simplified)\n\nn(O) = n(CO) + n(OH) + n(O I) + n(O II) + n(O III).\n\nIn this equation:\n\nn(O), the number density of oxygen atoms in any form comes absolute_abundances and the total\n\nnumber density (supplied later)\n\nn(O I) is a free parameter.  The numerical solver is varying this to satisfy the system of  equations.\nn(O II), and n(O III) come from the Saha (ionization) equation given n(O I)\nn(CO) and n(OH) come from the molecular equilibrium constants K, which are precomputed  over a range of temperatures. \n\nEquilibrium constants are defined in terms of partial pressures, so e.g.\n\nK(OH)  ==  (p(O) p(H)) / p(OH)  ==  (n(O) n(H)) / n(OH)) kT\n\nThis could also be computed via a Saha equation involving the molecular partition function and  dissolution energy.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.parse_fwf-Tuple{String, Any}","page":"Developer Documentation","title":"Korg.parse_fwf","text":"parse_fwf(source, rowspec; datarow, lastrow)\n\nParse fixed-width files, returning a vector of NamedTuples. source can be either an AbstractVector of Strings or a filename. rowspec should be a vector of tuples each containing, in order\n\na range object corresponding to the column postion\nthe type.  Strings will be pulled directly & other types will be parsed with parse.\nthe column name, a Symbol.\noptionally, a function to apply to the parsed value.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.planar_transfer-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.planar_transfer","text":"planar_transfer(α, S, τ_ref, α_ref)\n\nReturns the astrophysical flux. See radiative_transfer for an explantion of the arguments.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.radiative_transfer","page":"Developer Documentation","title":"Korg.radiative_transfer","text":"radiative_transfer(atm::ModelAtmosphere, α, S, α_ref, mu_grid)\n\nReturns the astrophysical flux at each wavelength.\n\ninputs:\n\natm: the model atmosphere.\nα: a matrix (atmospheric layers × wavelengths) containing the absoprtion coefficient\nS: the source fuction as a matrix of the same shape.\nα_ref: the continuum absoprtion coefficient at the reference wavelength (5000 Å). Used to   rescale the total absorption to match the model atmosphere. This value should be calculated by   Korg.\nmu_grid: (required if atm is a ShellAtmosphere) the values of μ at which to calculate   the surface intensity, which is integrated to obtain the astrophysical flux.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ray_transfer_integral-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.ray_transfer_integral","text":"ray_transfer_integral(τ, S)\n\nCompute exactly the solution to the transfer integral obtained be linearly interpolating the source  function, S across optical depths τ, without approximating the factor of exp(-τ).\n\nThis breaks the integral into the sum of integrals of the form  int (mtau + b) exp(-tau) d\\tau$ ,  which is equal to $ -\\exp(-\\tau) (m*\\tau + b + m)$.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_Barklem_Collet_table-Tuple{Any}","page":"Developer Documentation","title":"Korg.read_Barklem_Collet_table","text":"functon read_Barklem_Collet_table([transform=identity])\n\nConstructs a Dict holding tables containing partition function or equilibrium constant values across ln(temperature).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_linelist-Tuple{String}","page":"Developer Documentation","title":"Korg.read_linelist","text":"read_linelist(filename; format=\"vald\", isotopic_abundances=Korg.isotopic_abundances)\n\nParse a linelist file, returning a vector of Lines.\n\nPass format=\"kurucz\" for a Kurucz linelist  (format=kurucz_vac if it uses vacuum wavelengths; Be warned that Korg will not assume that  wavelengths are vacuum below 2000 Å),format=\"vald\" for a  VALD linelist, and format=\"moog\" for a MOOG linelist (doesn't support broadening parameters or dissociation energies).  \n\nVALD linelists (the default and preferred format) can be either \"short\" or \"long\" format,  \"extract all\" or \"extract stellar\".  Air wavelengths will automatically be converted into vacuum wavelengths, and energy levels will be automatically converted from cm^-1 to eV.\n\nWhen they are not pre-scaled by isotopic abundace (which VALD does by default), Korg will  automatically adjust the log_gf of each line according to isotopic_abundances, which defaults  to the values from NIST. To use custom isotopic abundances, just pass isotopic_abundances as a dictionary mapping (atomic number, atomic weight) pairs to abundances between 0 and 1.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_model_atmosphere-Tuple{AbstractString}","page":"Developer Documentation","title":"Korg.read_model_atmosphere","text":"read_model_atmosphere(filename)\n\nParse the provided model atmosphere file in MARCS \".mod\" format.  Returns either a  PlanarAtmosphere or a ShellAtmosphere.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.rectify-Union{Tuple{F}, Tuple{AbstractVector{F}, Any}} where F<:Real","page":"Developer Documentation","title":"Korg.rectify","text":"rectify(flux, wls; bandwidth=50, q=0.95, wl_step=1.0)\n\nRectify the spectrum with flux vector flux and wavelengths wls by dividing out a moving q-quantile with window size bandwidth.  wl_step controls the size of the grid that the moving  quantile is calculated on and interpolated from.  Setting wl_step to 0 results in the exact  calculation with no interpolation, but note that this is very slow.  \n\nExperiments on real spectra show an agreement between the interpolated rectified spectrum and the  \"exact\" one (with default values) at the 3 × 10^-4 level.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.saha_ion_weights-Tuple{Any, Any, Any, Any, Dict}","page":"Developer Documentation","title":"Korg.saha_ion_weights","text":"saha_ion_weights(T, nₑ, atom, ionization_energies, partition_functions)\n\nReturns (wII, wIII), where wII is the ratio of singly ionized to neutral atoms of a given  element, and wIII is the ration of doubly ionized to neutral atoms.\n\narguments:\n\ntemperature T [K]\nelectron number density nₑ [cm^-3]\natom, the atomic number of the element \nionization_energies is a collection indexed by integers (e.g. a Vector) mappping elements'   atomic numbers to their first three ionization energies\npartition_funcs is a Dict mapping species to their partition functions\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.scaled_stark-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.scaled_stark","text":"the stark broadening gamma scaled acording to its temperature dependence\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.scaled_vdW","page":"Developer Documentation","title":"Korg.scaled_vdW","text":"the vdW broadening gamma scaled acording to its temperature dependence, using either simple scaling  or ABO\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.setup_equilibrium_constants-Tuple{}","page":"Developer Documentation","title":"Korg.setup_equilibrium_constants","text":"setup_equilibrium_constants()\n\nReturns a Dict holding the default (Barklem & Collet 2016) log equilibrium constants, which are in pressure units.\n\nIn equation 7 in this paper, m is the reduced mass, m₁m₂/(m₁ + m₂).  This can be verified by  re-deriving the equilibrium constants from the partition functions and dissolution constants  provided by the paper.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.setup_ionization_energies","page":"Developer Documentation","title":"Korg.setup_ionization_energies","text":"setup_ionization_energies([filename])\n\nParses the table of ionization energies and returns it as a dictionary mapping elements to their ionization energies, [χ₁, χ₂, χ₃] in eV.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.setup_partition_funcs-Tuple{}","page":"Developer Documentation","title":"Korg.setup_partition_funcs","text":"setup_partition_funcs()\n\nReturns a Dict holding the default partition functions. These are custom for atoms and via Barklem & Collet 2016 for molecules.\n\nThe partition function is linearly interpolated from values tabulated for the paper. The partition  functions can only be evaluated at temperatures between 1e-5 K and 1e4 K. The tabulated values were  NOT computed with a cutoff principle quantum number. This can lead to a couple percent error for  some neutral species in solar type stars (I think the problem becomes worse in hotter stars). See  the paper for more details.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.sigma_line-Tuple{Real}","page":"Developer Documentation","title":"Korg.sigma_line","text":"sigma_line(wl)\n\nThe cross-section (divided by gf) at wavelength wl in Ångstroms of a transition for which the  product of the degeneracy and oscillator strength is 10^log_gf.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.spherical_transfer-NTuple{6, Any}","page":"Developer Documentation","title":"Korg.spherical_transfer","text":"spherical_transfer(α, S, τ_ref, α_ref, radii, μ_surface_grid)\n\nPerform radiative transfer along rays emerging at the μ values in μ_surface_grid in a spherically symmetric atmosphere resolved at radii radii [cm]. See radiative_transfer for an  explantion of the arguments. Note that radii should be in decreasing order.\n\nReturns (flux, intensity), where flux is the astrophysical flux, and intensity, a matrix of  shape (mu values × wavelengths), is the surface intensity as a function of μ.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.synthesize","page":"Developer Documentation","title":"Korg.synthesize","text":"synthesize(atm, linelist, λ_start, λ_stop, [λ_step=0.01]; metallicity=0, abundances=Dict(), vmic=0, ... )\n\nSolve the transfer equation in the model atmosphere atm with the transitions in linelist at the  from λ_start to λ_stop in steps of λ_step (all Å) to get the resultant astrophysical flux at  each wavelength.  An AbstractRange can also be probvided directly in place of λ_start, λ_stop, and λ_step.\n\nReturns a named tuple with keys:\n\nflux: the output spectrum\nalpha: the linear absorption coefficient at each wavelenth and atmospheric layer a Matrix of   size (layers x wavelengths)\nnumber_densities: A dictionary mapping Species to vectors of number densities at each   atmospheric layer\nwavelengths: The vacuum wavelenths (in Å) over which the synthesis was performed.  If  air_wavelengths=true this will not be the same as the input wavelenths.\n\nExample\n\nto synthesize a spectrum between 5000 Å and 5100 Å, with all metal abundances set to  0.5 dex less than the solar value except carbon:\n\natm = read_model_atmospher(\"path/to/atmosphere.mod\")\nlinelist = read_linelist(\"path/to/linelist.vald\")\nsolution = synthesize(atm, linelist, 5000, 5100; metallicity=-0.5, abundances=Dict(\"C\"=>0))\n\nOptional arguments:\n\nmetallicity, i.e. [metals/H] is the log_10 solar-relative abundance of elements heavier   than He. It is overriden by abundances.\nabundances is a Dict mapping atomic symbols to [X/H] abundances.  (Set  solar_relative=false to use A(X) abundances instead.) These override metallicity.\nvmic (default: 0) is the microturbulent velocity, xi, in km/s.\nair_wavelengths (default: false): Whether or not the input wavelengths are air wavelenths to   be converted to vacuum wavelengths by Korg.  The conversion will not be exact, so that the   wavelenth range can internally be represented by an evenly-spaced range.  If the approximation   error is greater than wavelength_conversion_warn_threshold, an error will be thrown. (To do   wavelength conversions yourself, see air_to_vacuum and vacuum_to_air.)\nwavelength_conversion_warn_threshold (default: 1e-4): see air_wavelengths. (In Å.)\nsolar_relative (default: true): When true, interpret abundances as being in [X/H]  (log_10 solar-relative) format.  When false, interpret them as A(X) abundances, i.e.   A(x) = log_10(n_Xn_mathrmH) + 12, where n_X is the number density of X.  Note that abundances not specified default to the solar value, adjusted with metallicity, in  either case.\nsolar_abundances (default: Korg.asplund_2020_solar_abundances) is the set of solar abundances to  use, as a vector indexed by atomic number.  Korg.asplund_2009_solar_abundances and  Korg.grevesse_2007_solar_abundances are also provided for convienience.\nline_buffer (default: 10): the farthest (in Å) any line can be from the provided wavelenth range   before it is discarded.  If the edge of your window is near a strong line, you may have to turn   this up.\ncntm_step (default 1): the distance (in Å) between point at which the continuum opacity is  calculated.\nhydrogen_lines (default: true): whether or not to include H lines in the synthesis.\nmu_grid: the range of (surface) μ values at which to calculate the surface flux when doing   transfer in spherical geometry (when atm is a ShellAtmosphere).\nline_cutoff_threshold (default: 1e-3): the fraction of the continuum absorption coefficient   at which line profiles are truncated.  This has major performance impacts, since line absorption  calculations dominate more syntheses.  Turn it down for more precision at the expense of runtime.  The default value should effect final spectra below the 10^-3 level.\nionization_energies, a Dict mapping Species to their first three ionization energies,   defaults to Korg.ionization_energies.\npartition_funcs, a Dict mapping Species to partition functions (in terms of ln(T)). Defaults   to data from Barklem & Collet 2016, Korg.partition_funcs.\nequilibrium_constants, a Dict mapping Species representing diatomic molecules to their   molecular equilbrium constants in partial pressure form.  Defaults to data from   Barklem and Collet 2016, Korg.equilibrium_constants.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.translational_U-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.translational_U","text":"translational_U(m, T)\n\nThe (inverse) contribution to the partition function from the free movement of a particle. Used in the Saha equation.\n\narguments\n\nm is the particle mass\nT is the temperature in K\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.trapezoid_rule-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.trapezoid_rule","text":"trapezoid_rule(xs, fs)\n\nApproximate the integral f(x) with the trapezoid rule over x-values xs given f(x) values fs.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.vacuum_to_air-Tuple{Any}","page":"Developer Documentation","title":"Korg.vacuum_to_air","text":"vacuum_to_air(λ; cgs=λ<1)\n\nconvert λ from a vacuum to air.  λ is assumed to be in Å if it is ⩾ 1, in cm otherwise.  Formula  from Birch and Downs (1994) via the VALD website.\n\nSee also: air_to_vacuum.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.voigt-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.voigt","text":"voigt(α, v)\n\nThe voigt function, H. Approximation from Hunger 1965.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.λ_to_ν_bound-Tuple{Korg.Interval}","page":"Developer Documentation","title":"Korg.λ_to_ν_bound","text":"λ_to_ν_bound(λ_bound)\n\nConverts a λ Inverval (in cm) to an equivalent ν Interval (in Hz), correctly accounting for  tricky floating point details at the bounds.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.CubicSplines.CubicSpline-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.CubicSplines.CubicSpline","text":"CubicSpline(xs, ys; extrapolate=false)\n\nConstruct a interpolant using xs and ys as the knot coordinates. Assumes xs is sorted. Apply  this object as a function to interpolate at any x value in the domain.  If extrapolate is false, x values outside [xs[1], xs[end]] throw errors, if extrapolate is true, the interpolant uses flat extrapolation, i.e. it returns the extreme value.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.StateID","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.StateID","text":"StateID(iSLP, iLV)\n\nStateID represents a given state (electron configuration) of an ion species. The arguments are taken from the TOPBase.\n\nArguments\n\niSLP::UInt16: An integer representing the quantum atomic numbers SLπ (total spin, orbital angular momentum, and parity). The value is given by 100*(2*S+1) + 10*L + π. Note that TOPBase documentation refers to the parity quantum number as P or π, but for consistency with how TOPBase presents the data, we prefer P in our implementation code.\niLV::UInt8: Distinguishes between configurations that have the same values of iSLP. TOPBase seems to index the configuration based on the energy level of the configuration (with iLV = 1 corresponding to the lowest energy).\n\nNotes\n\nThe combination of this struct and an ion species (or neutral element) should be enough to fully specify a given electron configuration. For example, consider He I:\n\niSLP = 100, iLV = 1 has the electron configuration: 1s²\niSLP = 100, iLV = 2 has the electron configuration: 1s 2s\niSLP = 100, iLV = 3 has the electron configuration: 1s 3s\niSLP = 111, iLV = 1 has the electron configuration: 1s 2p\niSLP = 111, iLV = 2 has the electron configuration: 1s 3p\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.ContinuumAbsorption.StateProp","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.StateProp","text":"StateProp(ion_energy_ryd, excitation_potential_ryd, statistical_weight, electron_config)\n\nStateProp holds data associated with different electron configurations. It's used to hold data read from the TOPBase cross-section queries and to compute the statistical weight.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.ContinuumAbsorption._hydrogenic_bf_high_n_absorption-Tuple{Real, Real, Integer, Integer, Real, Real}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption._hydrogenic_bf_high_n_absorption","text":"_hydrogenic_bf_high_n_absorption(ν, T, Z, nmin, nsdens_div_partition, ion_energy)\n\nApproximates the sum of absorption coefficient contributions by all bound-free transitions in which the electron originates in an energy level of nmin or larger using an integral.\n\nIn full detail, the calculated quantity is described as     ∑{n'=nmin}^∞ ndens(n=n') * αν(n=n') * (1 - exp(-hν/k/T))/ρ, where α(n=n') is the absorption coefficient for the bound-free atomic absorption coefficient (uncorrected for stimulated emission). This function approximates this sum with an integral.\n\nArguments\n\nν: frequency in Hz\nT: temperature in K\nZ::Integer: Z is the atomic number of the ion (1 for HI)\nnmin::Integer: The lowest energy level (principle quantum number) included in the calculation\nnsdens_div_partition is the number density of the current species divided by the  partition function.\nion_energy: the ionization energy from the ground state (in eV).\n\nNotes\n\nThis is based on equation (5.6) from Kurucz (1970) (which give the formula for opacity). I think ρ was simply omitted from that equation.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption._load_gauntff_table","page":"Developer Documentation","title":"Korg.ContinuumAbsorption._load_gauntff_table","text":"_load_gauntff_table([fname])\n\nReturns a table of thermally-averaged free-free Gaunt factors, and the values of log₁₀(γ²) and log₁₀(u) associated with each point.\n\nThis loads the non-relativistic free-free data published by van Hoof et al. (2014).\n\nNote: This function code could trivially be adapted to load the relativistic free-free gaunt factors published by van Hoof et al (2015).\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumAbsorption._ndens_Hminus","page":"Developer Documentation","title":"Korg.ContinuumAbsorption._ndens_Hminus","text":"_ndens_Hminus(nH_I_div_partition, ne, T, ion_energy = _H⁻_ion_energy)\n\nCompute the number density of H⁻ (implements eqn 5.10 of Kurucz 1970). This is an application of the saha equation where the \"ground state\" is H⁻ and the \"first ionization state\" is H I. The partition function of H⁻ is 1 at all temperatures.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumAbsorption.absorption_coef_bf_TOPBase-Tuple{AbstractVector, AbstractVector, AbstractVector, Korg.Species}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.absorption_coef_bf_TOPBase","text":"absorption_coef_bf_TOPBase(λ, T, ndens_species, species; kwargs...)\n\nComputes the bound-free linear absorption coefficient, α, (in units of cm⁻¹) using data from the  Opacity Project (downloaded from TOPBase) and assuming LTE. The result is stored in a 2D array with a size given by (length(λ), length(T)).\n\nArguments\n\nλ::AbstractVector: wavelengths (in cm) to compute α at.\nT::AbstractVector: temperatures (in K) to compute α at.\nndens_species::AbstractVector: number density (in cm⁻³) of the species at each temperature  (this should have the same length as T).\nspecies::Species: the starting atom or atomic ion of the bound-free reaction.\n\nKeyword Arguments\n\nThis function accepts all the same keyword arguments as weighted_bf_cross_section_TOPBase.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.bounds_checked_absorption-Tuple{Any}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.bounds_checked_absorption","text":"bounds_checked_absorption(func; ν_bound, temp_bound)\n\nConstructs a wrapped function that implements bounds checking and extrapolation\n\nParameters\n\nfunc: a function that has a signature f(ν::Real, T::Real, args...)::Real, where ν is  frequency (in Hz) and T is temperature (in K)\nν_bound::Interval: Interval of frequencies (in Hz) over which func is valid.\ntemp_bound::Interval: Interval of temperatures (in K) over which func is valid.\n\nThe resulting function will have this signature:\n\nwrapped_func(ν::AbstractVector{<:Real}, T::Real, args...; kwargs...)\n\nWrapped Function Parameters\n\nν::AbstractVector{<:Real}: sorted vector of frequencies (in Hz)\nT::Real: temperature (in K)\nargs...: function-specific arguments\n\nFor a description for the kwargs..., see Continuum Absorption Kwargs.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.each_photo_ion_subtable-Tuple{AbstractString}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.each_photo_ion_subtable","text":"each_photo_ion_subtable(filename::AbstractString)\n\nCreate an iterable EachPhotoIonSubtable object for parsing photoionization cross-sections.\n\nThe input file is organized as a series of subtables. Each subtable provides the photoionization energies (make sure this isn't the energy of the photoionized electron) in Ryd, and the associated cross section (in megabarns) for a different state.\n\nEach entry in the EachPhotoIonSubtable iterable provides a named tuple with the keys:\n\nname: holds the species name\nstate_id: holds a StateID instance\nphotonenergyryd: the photoionization values (check), in Ryd, stored in an array of Float32 vals\ncrosssectionMegaBarn: the associated photoionization cross-sections. This array should have the same shape and datatype as photonenergyryd\n\nThe underlying file is only closed after the EachPhotoIonSubtable is garbage collected.\n\n#Notes This implementation is not robust enough to deal with blank lines at the start or end of the file.\n\nThe table should have been produced by a TOPbase Photoionisation Cross Section query that uses the following query options:\n\nOnly a single atomic number and a single number of electrons is included in the query (other choices may yield too many results, which causes TOPBase to truncate output).\nThere isn't any limitation on the number the quantum numbers, the energy or the levels\nThe query request levels ordered in the \"Level order in each series\"\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.electron_scattering-Tuple{F} where F<:Real","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.electron_scattering","text":"electron_scattering(nₑ)\n\nCompute the linear absorption coefficient, α, from scattering off of free electrons. This has no wavelength dependence. It assumes isotropic scattering.  (See, e.g. Gray p 160.)\n\nArguments\n\nnₑ::F: number density of free electrons (in cgs)\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.gaunt_ff_vanHoof-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.gaunt_ff_vanHoof","text":"gaunt_ff_vanHoof(log_u, log_γ2)\n\ncomputes the thermally averaged, non-relativistic free-free gaunt factor by interpolating the table provided by van Hoof et al. (2014).\n\nArguments\n\nlog_u: Equal to log₁₀(u) = log₁₀(hν/(kTₑ))\nlog_γ2: Equal to log₁₀(γ²) = log₁₀(RydbergZ²/(kTₑ))\n\nRydberg is the \"infinite mass unit of energy\" and Tₑ is the temperature of free electrons (for our purposes, we assume that free electrons are in thermal equilibrium with ions and neutral species).\n\nNotes\n\nvan Hoof et al. (2014) computed the associated data table with a non-relativistic approach, which is invalid at very high temperatures. They conclude (from comparisons with a different paper) that their \"results should be accurate up to electron temperatures of roughly 100 MK\". This is more than adequate for stellar atmospheres. In van Hoof et al. (2015), they find that relativistic effects introduce a ∼0.75% at 100MK, for Z = 1 (when Z > 1, the change is smaller).\n\nThis function currently uses linear interpolation. However, van Hoof et al. (2014) provides an implementation of a third-order Lagrange scheme, which \"reaches a relative precision better than 1.5e-4 everywhere.\" The C and Fortran implementations of this scheme can be found here, and are copyrighted by a BSD-style license.\n\nEarlier variants of this function used less-accurate data from section 5.1 of Kurucz (1970) that extended over a smaller interval of data. That table was originally derived from a figure in Karsas and Latter (1961) and it's now used for testing purposes.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.hydrogenic_bf_absorption","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.hydrogenic_bf_absorption","text":"hydrogenic_bf_absorption(ν, T, Z, nmax_explicit_sum, nsdens_div_partition,\n                         ion_energy, [integrate_high_n])\n\nCompute the bound-free linear absorption coefficient contributed by all energy states of a Hydrogenic species\n\nThe calculation is broken into 2 parts: (i) the contributions of the lowest energy states are  explicitly summed and (ii) the contributions of the higher energy states are estimated with an  integral.\n\nArguments\n\nν: frequency in Hz\nT: temperature in K\nZ::Integer: Z is the atomic number of the species (e.g. 1 for H I or 2 for He II)\nnsdens_div_partition is the total number density of the species divided by the species's  partition function.\nion_energy: the ionization energy from the ground state (in eV). This can be   estimated as Z²*RydbergH (RydbergH is the ionization energy of Hydrogen)\nnmax_explicit_sum::Integer: The highest energy level whose absorption contribution is included  in the explicit sum. The contributions from higher levels are included in the integral.\nintegrate_high_n::bool: When this is false, bf absorption from higher energy states are not  estimated at all. Default is true.\n\nNotes\n\nThis follows the approach described in section 5.1 of Kurucz (1970).\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumAbsorption.hydrogenic_ff_absorption-Tuple{Real, Real, Integer, Real, Real}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.hydrogenic_ff_absorption","text":"hydrogenic_ff_absorption(ν, T, Z, ni, ne)\n\ncomputes the free-free linear absorption coefficient for a hydrogenic species\n\nThe naming convention for free-free absorption is counter-intuitive. A free-free interaction is named as though the species interacting with the free electron had one more bound electron (in  other words it's named as though the free-electron and ion were bound together). In practice, this means that ni should refer to:\n\nthe number density of H II if computing the H I free-free absorption\nthe number density of He III if computing the He II free-free absorption\nthe number density of Li IV if computing the Li III free-free absorption\n\nArguments\n\nZ::Integer: the charge of the ion. For example, this is 1 for ionized H.\nni: the number density of the ion species in cm⁻³.\nne: the number density of free electrons.\nν: frequency in Hz\nT: temperature in K\n\nNote\n\nThis approach was adopted from equation 5.8 from section 5.1 of Kurucz (1970). Comparison against equation 5.18b of Rybicki & Lightman (2004), reveals that the equation in Kurucz (1970) omits the dependence on ρ. According to Rybicki & Lightman (2004) the free-free absorption coefficient (corrected for stimulated emission) is:\n\n    α = coef * Z² * ne * ni * (1 - exp(-hplanck*ν/(kboltz*T))) * g_ff / (sqrt(T) * ν³)\n\nNote that the g_ff is the free-free gaunt factor and coef is ∼3.7e8 (a more exact coefficient can be computed from eqn 5.18a).\n\nWith this in mind, equation 5.8 of Kurucz (1970) should actually read\n\n    κ = ne * n(H II) * F_ν(T) * (1 - exp(-hplanck*ν/(kboltz*T))) / ρ\n\nwhere Fν(T) = coef * Z² * gff / (sqrt(T) * ν³).\n\nSee gaunt_ff_vanHoof for details about where our gaunt factor data comes from. For simplicity, we enforce temperature and ν bounds constraints that don't include all of the available gaunt factor data. In practice, this should never be a concern for stellar spectroscopy.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.ndens_state_hydrogenic-Tuple{Integer, Real, Real, Real}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.ndens_state_hydrogenic","text":"ndens_state_hydrogenic(n, nsdens_div_partition, ion_energy, T)\n\nCalculates the LTE number density (in cm^-3) of a hydrogenic species at a given energy level.\n\nArguments\n\nn::Integer: The quantum number of the state\nnsdens_div_partition: The total (including all states) number density of the current \n\nionization species (in cm^-3) divided by the species's partition function.\n\nion_energy: The minimum energy (in eV) required to ionize the species (from the ground \n\nstate). This can be estimated as Z²ion_energy of hydrogen or Z²Rydberg_H.\n\nT: Temperature\n\nNote\n\nThis assumes that all hydrogenic species have a statistical weight of gₙ = 2*n².\n\nThis was taken from equation (5.4) of Kurucz (1970) (although this comes directly from the  boltzmann equation).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.positive_ion_ff_absorption!-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}, Real, Dict, Real}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.positive_ion_ff_absorption!","text":"positive_ion_ff_absorption!(α_out::Vector{Real}, ν::Real, T::Real, number_densities::Dict, \n                            ne::Real, departure_coefficients=Peach1970.departure_coefficients)\n\nComputes the linear absorption coefficient (in cm⁻¹) for all free-free interactions involving positively charged atomic species. Uses the provided departure coefficients when they are available, and the uncorrected hydrogenic approximation when they are not.\n\nArguments\n\nν: frequency in Hz\nT: temperature in K\nnumber_densities is a Dict mapping each Species to its number density.\nne: the number density of free electrons.\ndeparture_coefficients (optional, defaults to Peach1970):   a dictionary mapping species to the departure coefficients for the ff process it participates in   (e.g. species\"C II\" maps to the C III ff departure coefficients–see note below).  Departure  coefficients should be callables taking temperature and (photon energy / RydbergH / Zeff^2).    See Peach1970 for details.\n\nnote: Note\nA free-free interaction is named as though the species interacting with the free electron had  one more bound electron (in other words it's named as though the free-electron and ion were  bound together). To make matters more confusing, some sources present the free-free linear  absorption coefficient's formula in terms of the number density of the species in the  interaction's name (by including the Saha equation in the formula).To compute the absorption for a given free-free interaction, this function accesses elements  from the dictionary arguments that are associated with the species that participates in the  interaction. For example:Si I ff absorption: uses the number density of Si II (number_densities[species\"Si II\"]) and checks departure_coefficients[species\"Si II\"] for departure coefficients.\nSi II ff absorption: uses the number density of Si III (number_densities[species\"Si III\"]) and checks departure_coefficients[species\"Si III\"] for departure coefficients.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.rayleigh-Tuple{AbstractVector{<:Real}, Any, Any, Any}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.rayleigh","text":"rayleigh(λs, nH_I, nHe_II, nH2)\n\nAbsorption coefficient from Rayleigh scattering by neutral H, He, and H2.  Formulations for H and He are via Colgan+ 2016.  Formulation  for H2 from  Dalgarno and Williams 1962.\n\nThe Dalgarno and Williams H2 is applicable redward of 1300 Å.  Since Rayleigh scattering breaks down when the particle size to wavelength ratio gets large, we that all frequencies passed to this  function be equivalent to 1300 Å or greater.\n\nThe formulations for H is adapted from  Lee 2005, which states that it is  applicable redward of Lyman alpha. See Colgan 2016 for details on He.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.total_continuum_absorption-Union{Tuple{F}, Tuple{AbstractVector{F}, F, F, Dict, Dict}} where F<:Real","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.total_continuum_absorption","text":"total_continuum_absorption(νs, T, nₑ, number_densities, partition_funcs; error_oobounds)\n\nThe total continuum linear absoprtion coefficient, α, at many frequencies, ν.\n\nArguments\n\nνs are frequencies in Hz\nT is temperature in K\nnₑ is the electron number density in cm^-3\nnumber_densities is a Dict mapping each Species to its number density\npartition_funcs is a Dict mapping each Species to its partition function (e.g. Korg.partition_funcs)\nerror_oobounds::Bool specifies the behavior of most continnum absorption sources when passed  frequencies or temperature values that are out of bounds for their implementation. When false  (the default), those absorption sources are ignored at those values. Otherwise, an error is  thrown.\n\nnote: Note\nFor efficiency reasons, νs must be sorted. While this function technically supports any  sorted AbstractVector, it is most effient when passed an  AbstractRange.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.weighted_bf_cross_section_TOPBase-Tuple{AbstractVector, AbstractVector, Korg.Species}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.weighted_bf_cross_section_TOPBase","text":"weighted_bf_cross_section_TOPBase(λ_vals, T_vals, species; extrapolation_bc = 0.0\n                                  cross_sec_file = nothing,\n                                  partition_func = partition_funcs[species])\n\nCalculate the combined bound-free cross section (in cm²) of an ion species using data from the Opacity Project. The result is the mean of the the bound-free cross section of each electron state, weighted by their Boltzmann probabilities. It includes the LTE correction for stimulated emission.  The result is stored in a 2D array with a size given by (length(λ_vals), length(T_vals)).\n\nArguments\n\nλ_vals::AbstractVector: wavelengths (in cm) to compute the cross sections at\nT_vals::AbstractVector: temperatures (in K) to compute the cross sections at\nspecies::Species: the starting atom or atomic ion of the bound-free reaction.\n\nKeyword Arguments\n\nextrapolation_bc: Specifies handling of extrapolation during linear interpolation (this is passed to Interpolations.LinearInterpolation).\ncross_sec_file: Optional keyword that specifies the path to the text file that holds the cross-section subtables. When nothing (the default), this function tries to load the file from $KORG_OP_DIR/<atomic-symbol>_<ion-state>.txt. <atomic-symbol> is replaced with the atomic symbol of the species (e.g. H, He, Al) and <ion-state> is replaced with the  capital Roman numeral(s) specifying the ionization state.\npartition_func: Specifies the partition function for the current species. This should be a callable that accepts ln(temperature) as an argument. Defaults to the built-in values.\n\nExplanation\n\nIn more mathematical rigor, this function basically evaluates the following equation:\n\noverlinesigma_rm bf(lambdaT) = sum_bf ninrm states frac g_bf nU(T) e^-E_bf n(k_B T)left(1 - e^-h c(lambda k_B T)right) sigma_rm bf bf n(lambda)\n\nIn this equation:\n\ng_bf n is the statistical weight of state bf n.\nU is the partition function.\nE_bf n is the excitation potential of state bf n. In other words, its the energy  difference between state bf n and the ground state.\nsigma_lambdarm bf bf n is the bound-free cross-section (a.k.a. photo-ionization cross section) of state bf n.\n\nThe linear aborption coefficient for bound-free absorption is simply: alpha_lambdarm bf = n_rm tot overlinesigma_rm bf(lambdaT).\n\nNotes\n\nIn the future, it needs to be possible to pass an argument that adjusts the energy levels of different electron configurations.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.Stancil1994","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.Stancil1994","text":"This module contains transcriptions of the tables from  Stancil 1994, who calculated ff  and bf absorption coefficients for H₂⁺ and He₂⁺.\n\nIt also contains pre-constructed interpolation objects.\n\n\n\n\n\n","category":"module"},{"location":"API/#API","page":"Function Reference","title":"API","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"This page docuements the Korg API for users of the package. Low-level functions that only people  digging into the internals of Korg will be interested in can be found on the  Developer documentation.","category":"page"},{"location":"API/#Top-level-functions","page":"Function Reference","title":"Top-level functions","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"If you are synthesize a spectrum Korg, these are the functions you will call.   These functions are exported, so if you do using Korg, you can call them unquallified (i.e. synthesize instead of Korg.synthesize).  ","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"synthesize\nread_linelist\nread_model_atmosphere","category":"page"},{"location":"API/#Korg.synthesize","page":"Function Reference","title":"Korg.synthesize","text":"synthesize(atm, linelist, λ_start, λ_stop, [λ_step=0.01]; metallicity=0, abundances=Dict(), vmic=0, ... )\n\nSolve the transfer equation in the model atmosphere atm with the transitions in linelist at the  from λ_start to λ_stop in steps of λ_step (all Å) to get the resultant astrophysical flux at  each wavelength.  An AbstractRange can also be probvided directly in place of λ_start, λ_stop, and λ_step.\n\nReturns a named tuple with keys:\n\nflux: the output spectrum\nalpha: the linear absorption coefficient at each wavelenth and atmospheric layer a Matrix of   size (layers x wavelengths)\nnumber_densities: A dictionary mapping Species to vectors of number densities at each   atmospheric layer\nwavelengths: The vacuum wavelenths (in Å) over which the synthesis was performed.  If  air_wavelengths=true this will not be the same as the input wavelenths.\n\nExample\n\nto synthesize a spectrum between 5000 Å and 5100 Å, with all metal abundances set to  0.5 dex less than the solar value except carbon:\n\natm = read_model_atmospher(\"path/to/atmosphere.mod\")\nlinelist = read_linelist(\"path/to/linelist.vald\")\nsolution = synthesize(atm, linelist, 5000, 5100; metallicity=-0.5, abundances=Dict(\"C\"=>0))\n\nOptional arguments:\n\nmetallicity, i.e. [metals/H] is the log_10 solar-relative abundance of elements heavier   than He. It is overriden by abundances.\nabundances is a Dict mapping atomic symbols to [X/H] abundances.  (Set  solar_relative=false to use A(X) abundances instead.) These override metallicity.\nvmic (default: 0) is the microturbulent velocity, xi, in km/s.\nair_wavelengths (default: false): Whether or not the input wavelengths are air wavelenths to   be converted to vacuum wavelengths by Korg.  The conversion will not be exact, so that the   wavelenth range can internally be represented by an evenly-spaced range.  If the approximation   error is greater than wavelength_conversion_warn_threshold, an error will be thrown. (To do   wavelength conversions yourself, see air_to_vacuum and vacuum_to_air.)\nwavelength_conversion_warn_threshold (default: 1e-4): see air_wavelengths. (In Å.)\nsolar_relative (default: true): When true, interpret abundances as being in [X/H]  (log_10 solar-relative) format.  When false, interpret them as A(X) abundances, i.e.   A(x) = log_10(n_Xn_mathrmH) + 12, where n_X is the number density of X.  Note that abundances not specified default to the solar value, adjusted with metallicity, in  either case.\nsolar_abundances (default: Korg.asplund_2020_solar_abundances) is the set of solar abundances to  use, as a vector indexed by atomic number.  Korg.asplund_2009_solar_abundances and  Korg.grevesse_2007_solar_abundances are also provided for convienience.\nline_buffer (default: 10): the farthest (in Å) any line can be from the provided wavelenth range   before it is discarded.  If the edge of your window is near a strong line, you may have to turn   this up.\ncntm_step (default 1): the distance (in Å) between point at which the continuum opacity is  calculated.\nhydrogen_lines (default: true): whether or not to include H lines in the synthesis.\nmu_grid: the range of (surface) μ values at which to calculate the surface flux when doing   transfer in spherical geometry (when atm is a ShellAtmosphere).\nline_cutoff_threshold (default: 1e-3): the fraction of the continuum absorption coefficient   at which line profiles are truncated.  This has major performance impacts, since line absorption  calculations dominate more syntheses.  Turn it down for more precision at the expense of runtime.  The default value should effect final spectra below the 10^-3 level.\nionization_energies, a Dict mapping Species to their first three ionization energies,   defaults to Korg.ionization_energies.\npartition_funcs, a Dict mapping Species to partition functions (in terms of ln(T)). Defaults   to data from Barklem & Collet 2016, Korg.partition_funcs.\nequilibrium_constants, a Dict mapping Species representing diatomic molecules to their   molecular equilbrium constants in partial pressure form.  Defaults to data from   Barklem and Collet 2016, Korg.equilibrium_constants.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.read_linelist","page":"Function Reference","title":"Korg.read_linelist","text":"read_linelist(filename; format=\"vald\", isotopic_abundances=Korg.isotopic_abundances)\n\nParse a linelist file, returning a vector of Lines.\n\nPass format=\"kurucz\" for a Kurucz linelist  (format=kurucz_vac if it uses vacuum wavelengths; Be warned that Korg will not assume that  wavelengths are vacuum below 2000 Å),format=\"vald\" for a  VALD linelist, and format=\"moog\" for a MOOG linelist (doesn't support broadening parameters or dissociation energies).  \n\nVALD linelists (the default and preferred format) can be either \"short\" or \"long\" format,  \"extract all\" or \"extract stellar\".  Air wavelengths will automatically be converted into vacuum wavelengths, and energy levels will be automatically converted from cm^-1 to eV.\n\nWhen they are not pre-scaled by isotopic abundace (which VALD does by default), Korg will  automatically adjust the log_gf of each line according to isotopic_abundances, which defaults  to the values from NIST. To use custom isotopic abundances, just pass isotopic_abundances as a dictionary mapping (atomic number, atomic weight) pairs to abundances between 0 and 1.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.read_model_atmosphere","page":"Function Reference","title":"Korg.read_model_atmosphere","text":"read_model_atmosphere(filename)\n\nParse the provided model atmosphere file in MARCS \".mod\" format.  Returns either a  PlanarAtmosphere or a ShellAtmosphere.\n\n\n\n\n\n","category":"function"},{"location":"API/#Secondary-functions","page":"Function Reference","title":"Secondary functions","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"You don't need use these to synthesize spectra, but they might be relevant depending on what you are  doing.","category":"page"},{"location":"API/#Postprocessing","page":"Function Reference","title":"Postprocessing","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"These are used to transform observational or synthetic spectra.","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"Korg.rectify\nKorg.constant_R_LSF","category":"page"},{"location":"API/#Korg.rectify","page":"Function Reference","title":"Korg.rectify","text":"rectify(flux, wls; bandwidth=50, q=0.95, wl_step=1.0)\n\nRectify the spectrum with flux vector flux and wavelengths wls by dividing out a moving q-quantile with window size bandwidth.  wl_step controls the size of the grid that the moving  quantile is calculated on and interpolated from.  Setting wl_step to 0 results in the exact  calculation with no interpolation, but note that this is very slow.  \n\nExperiments on real spectra show an agreement between the interpolated rectified spectrum and the  \"exact\" one (with default values) at the 3 × 10^-4 level.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.constant_R_LSF","page":"Function Reference","title":"Korg.constant_R_LSF","text":"constant_R_LSF(flux, wls, R)\n\nApplies a gaussian line spread function the the spectrum with flux vector flux and wavelength vector wls with constant spectral resolution, R = lambdaDeltalambda\n\nFor the best match to data, your wavelength range should extend a couple Deltalambda outside  the region you are going to compare.\n\nwarning: Warning\nThis is a naive, slow implementation.  Do not use it when performance matters.\nconstant_R_LSF will have weird behavior if your wavelength grid is not locally linearly-spaced.  It is intended to be run on a fine wavelength grid, then downsampled to the observational (or   otherwise desired) grid.\n\n\n\n\n\n","category":"function"},{"location":"API/#Line-absorption","page":"Function Reference","title":"Line absorption","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"These functions can be used to directly compute line opacities. ","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"Korg.line_absorption!\nKorg.line_profile\nKorg.hydrogen_line_absorption!\nKorg.setup_hydrogen_stark_profiles\nKorg.voigt","category":"page"},{"location":"API/#Korg.line_absorption!","page":"Function Reference","title":"Korg.line_absorption!","text":"line_absorption(linelist, λs, temp, nₑ, n_densities, partition_fns, ξ\n               ; α_cntm=nothing, cutoff_threshold=1e-3, window_size=20.0*1e-8)\n\nCalculate the opacity coefficient, α, in units of cm^-1 from all lines in linelist, at wavelengths λs [cm^-1]. \n\nother arguments:\n\ntemp the temerature in K\nn_densities, a Dict mapping species to absolute number density [cm^-3].\npartition_fns, a Dict containing the partition function of each species\nξ is the microturbulent velocity in cm/s (n.b. NOT km/s)\nα_cntm is as a callable returning the continuum opacity as a function of wavelength. The window   within which a line is calculated will extend to the wavelength at which the Lorentz wings or   Doppler core of the line are at cutoff_threshold * α_cntm[line.wl], whichever is greater.  \ncuttoff_threshold (optional, default: 1e-3): see α_cntm\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.line_profile","page":"Function Reference","title":"Korg.line_profile","text":"line_profile(λ₀, invΔλ_D, Δλ_L, line_amplitude, λ)\n\nA voigt profile centered on λ₀ with Doppler width 1/invΔλ_D and Lorentz width Δλ_L  evaluated at λ (cm).  Note that this returns values in units of cm^-1.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.hydrogen_line_absorption!","page":"Function Reference","title":"Korg.hydrogen_line_absorption!","text":"hydrogen_line_absorption(λs, T, nₑ, nH_I, UH_I, hline_stark_profiles, ξ; \n                              stark_window_size=3e-7, self_window_size=1e-6)\n\nCalculate contribution to the the absorption coefficient, α, from hydrogen lines in units of cm^-1, at wavelengths λs. \n\nUses profiles from Stehlé & Hutcheon (1999), which include Stark and Doppler broadening.   For Halpha, Hbeta, and Hgamma, the p-d approximated profiles from  Barklem, Piskunovet, and O'Mara 2000 are added to the absortion coefficient.  This \"convolution by summation\" is inexact, but true  convolution is expensive.\n\nArguments:\n\nT: temperature [K]\nnₑ: electron number density [cm^-3]\nnH_I: neutral hydrogen number density [cm^-3]\nUH_I: the value of the neutral hydrogen partition function\nhline_stark_profiles: (returned by setuphlinestark_profiles`)\nξ: microturbulent velocity [cm/s]. This is only applied to Hα-Hγ.  Other hydrogen lines profiles   are dominated by stark broadening, and the stark broadened profiles are pre-convolved with a   doppler profile.\nstark_window_size: the max distance from each line center [cm] at which to calculate the stark  broadening profile\nself_window_size: the max distance from each line center [cm] at which to calculate the line   absorption for Hα-Hγ (those dominated by self-broadening).\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.voigt","page":"Function Reference","title":"Korg.voigt","text":"voigt(α, v)\n\nThe voigt function, H. Approximation from Hunger 1965.\n\n\n\n\n\n","category":"function"},{"location":"API/#Continuum-absorption","page":"Function Reference","title":"Continuum absorption","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"These function can be used to directly compute continuum absorption coefficients.","category":"page"},{"location":"API/#Continuum-Absorption-Kwargs","page":"Function Reference","title":"Continuum Absorption Kwargs","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"All bound-free and free-free absorption functions (other than absorption_coef_bf_TOPBase) support the following keyword arguments:","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"error_oobounds::Bool: specifies the function's behavior when it encounters invalid ν or T values. When false (the default), the function assumes that the absorption coefficient for these invalid ν or T values is 0.0. Otherwise, a DomainError is thrown when invalid ν or T values are encountered.\nout_α::Union{Nothing,AbstractVector}: When this is nothing (the default case), the function will simply allocate a new vector to store the output continuum absorption coefficients. Alternatively, this can be a vector (with the same length as the function's ν argument). In this case, the function will directly add the computed continuum absorption to the elements of this vector, in-place (the vector is also returned by the function).","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"Korg.total_continuum_absorption\nKorg.ContinuumAbsorption.H_I_bf\nKorg.ContinuumAbsorption.H_I_ff\nKorg.ContinuumAbsorption.Hminus_bf\nKorg.ContinuumAbsorption.Hminus_ff\nKorg.ContinuumAbsorption.H2plus_bf_and_ff\nKorg.ContinuumAbsorption.He_II_bf\nKorg.ContinuumAbsorption.He_II_ff\nKorg.ContinuumAbsorption.Heminus_ff\nKorg.ContinuumAbsorption.electron_scattering\nKorg.ContinuumAbsorption.rayleigh\nKorg.ContinuumAbsorption.hydrogenic_bf_absorption\nKorg.ContinuumAbsorption.hydrogenic_ff_absorption","category":"page"},{"location":"API/#Korg.ContinuumAbsorption.total_continuum_absorption","page":"Function Reference","title":"Korg.ContinuumAbsorption.total_continuum_absorption","text":"total_continuum_absorption(νs, T, nₑ, number_densities, partition_funcs; error_oobounds)\n\nThe total continuum linear absoprtion coefficient, α, at many frequencies, ν.\n\nArguments\n\nνs are frequencies in Hz\nT is temperature in K\nnₑ is the electron number density in cm^-3\nnumber_densities is a Dict mapping each Species to its number density\npartition_funcs is a Dict mapping each Species to its partition function (e.g. Korg.partition_funcs)\nerror_oobounds::Bool specifies the behavior of most continnum absorption sources when passed  frequencies or temperature values that are out of bounds for their implementation. When false  (the default), those absorption sources are ignored at those values. Otherwise, an error is  thrown.\n\nnote: Note\nFor efficiency reasons, νs must be sorted. While this function technically supports any  sorted AbstractVector, it is most effient when passed an  AbstractRange.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.H_I_bf","page":"Function Reference","title":"Korg.ContinuumAbsorption.H_I_bf","text":"H_I_bf(ν, T, nH_I_div_partition, [ion_energy], [nmax_explicit_sum], [integrate_high_n];\n       kwargs...)\n\nCompute the bound-free linear absorption coefficient contributed by all energy states of a neutral Hydrogen atom.\n\nRequired Arguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnH_I_div_partition is the total number density of neutral Hydrogen divided by the its  partition function.\n\nOptional Arguments\n\nion_energy: The ionization energy of Hydrogen. By default, this is set to the values loaded  into the global ionization_energies list.\nnmax_explicit_sum: The highest energy level whose absorption contribution is included  in the explicit sum. The contributions from higher levels are included in an integral.\nintegrate_high_n::bool: When this is false, bf absorption from higher energy states are not  estimated at all. Default is true.\n\nFor a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis function wraps hydrogenic_ff_absorption. See that function for implementation details.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.Hminus_bf","page":"Function Reference","title":"Korg.ContinuumAbsorption.Hminus_bf","text":"Hminus_bf(ν, T, nH_I_div_partition, ne; kwargs...)\n\nCompute the H⁻ bound-free linear absorption coefficient α\n\nArguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnH_I_div_partition: the total number density of H I divided by its partition function.\nne: the electron number density\n\nFor a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis function assumes that n(H⁻) ≪ n(H I) + n(H II). The number density of n(H⁻) isn't precomputed  as part of Korg's molecular equlibrium, it's computed here instead.\n\nThis function is adapted from equation 8.12 from Grey (2005). That equation specifies the absorption coefficient per H I atom (uncorrected by stimulated emission) as:\n\n8316 times 10^-10 sigma_bf(H^-) P_e theta^25 10^(theta chi_mathrmH^-) U(HT) U(H IT)\n\nwhere:\n\nsigma_bf(mathrmH^-) is the photo dissociation cross-section (Grey uses the variable alpha_bf in place of sigma_bf). We get this from   McLaughlin (2017).\nchi_mathrmH^- is the ionization enrgy of H⁻.\nθ = log10(e)/(k*T) or θ = 5040/T in units of eV⁻¹\nU(H⁻,T) is the partition function of H⁻ at temperature T. This is always 1\nU(H I,T) is the partition function of H I at temperature T. This is 2 at low to intermediate T.\n\nEqn 8.12 of Grey (2005) implicitly assumes that (U(H⁻,T)/ U(H I,T)) is always equal to 0.5.\n\nThis expression is simply a rewritten form of sigma_bf(H^-) n(H^-)n(H I) where n(H^-)n(H I) has been replaced with the expanded form of the saha equation, in which n₀ = n(H⁻) and n₁ = n(H I).\n\nEquations 8.18 and 8.19 of Gray (2005), indicate that the H⁻ bound-free opacity (with the stimulated emission correction) is given by:\n\nkappa_nu = sigma_bf(H^-) fracn(H^-)n(H I) (1 - exp left( frac-hnuk Tright)) fracn(H I)n(H I) + n(H II) fracn(H I) + n(H II)rho\n\nIn other words, the linear absorption coefficient is: alpha_nu = sigma_bf(H^-) n(H) (1 - exp left( frac-hnuk Tright))\n\nnote: Note\nThe McLaughlin tabulated values (downloaded as a text file) contained a stray line out of  monotonic order.  A version of the data file with the line deleted is saved at  data/McLaughlin2017Hminusbf.dat for archival purposes.  (Korg doesn't read this file, it reads data/McLaughlin2017Hminusbf.h5.)\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.Hminus_ff","page":"Function Reference","title":"Korg.ContinuumAbsorption.Hminus_ff","text":"Hminus_ff(ν, T, nH_I_div_partition, ne; kwargs...)\n\nCompute the H⁻ free-free linear absorption coefficient α\n\nThe naming scheme for free-free absorption is counter-inutitive. This actually refers to the reaction:  photon + e⁻ + H I -> e⁻ + H I.\n\nArguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnH_I_div_partition::Flt: the total number density of H I divided by its partition function.\nne: the number density of free electrons.\n\nFor a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis is taken from equation 8.13 of Gray (2005). The equation uses a polynomial fig against Table 1 of Bell & Berrington's (1987), which tabulates values for \"the H⁻ absorption coefficient\" (the values include the correction for stimulated emission). We denote this quantity as f(H⁻) (Grey instead denotes it with the variable, alpha_ff(H^-)). The polynomial fits f(H⁻) in the range 2520 K ≤ T ≤ 10080 K and 2604 Å ≤ λ ≤ 113918 Å. According to Grey, the polynomial fit to the tabulated data typically has 1% precision. We find that at worst, the discrepancy never exceeds 2.25%.\n\nBased on equations 8.13, 8.18, and 8.19 of Gray (2005), the free-free linear absorption coefficient of H⁻ is given by: α = f(H⁻) * Pₑ * n(H I).\n\nBased on Section 5.3 from Kurucz (1970), I'm fairly confident that the \"more correct\" version of this equation should actually read α = f(H⁻) * Pₑ * n(H I, n = 1), and that the form inferred from Gray (2005) implicitly assumes that n(H I, n = 1) ≈ n(H I). In detail, the Boltzmann equation relates n(H I, n = 1) and n(H I) as: n(H I, n = 1) = n(H I)*gₙ₌₁/U(T)*exp(-Eₙ₌₁/(k*T)) = n(H I) * 2/U(T)*exp(0) = n(H I) * 2/U(T). Based on the values of the partition function in Table D.2 of Grey, this approximation seems fairly good. It only introduces a ≤0.5% overestimate in n(H I, n = 1) over the temperature range where the polynomial is valid.\n\nWe also considered the polynomial fit in Section 5.3 from Kurucz (1970). Unfortunately, it seems to be wrong (it gives lots of negative numbers).\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.H2plus_bf_and_ff","page":"Function Reference","title":"Korg.ContinuumAbsorption.H2plus_bf_and_ff","text":"H2plus_bf_and_ff(ν, T, nH_I_div_partition, n_HII; kwargs...)\n\nCompute the combined H₂⁺ bound-free and free-free linear absorption coefficient α using the tables  from Stancil 1994.\n\nArguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnH_I: the total number density of H I divided by its partition   function.\nnH_II: the number density of H II (not of H₂⁺).\n\nFor a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis computes the H₂⁺ number density from those of H I and H II, since ionized molecules  are not included in the molecular equlibrium calculation.  Stancil provides approximate equilibrium  constants, K, for the molecule, but the Barklem and Collet values used elsewhere by Korg may be more  reliable.  Once ionized molecules are fully supported, those values should be used instead. While  cross sections are tabulated down to only 3150 K, the cross sections could be linearly interpolated  1000 K or so lower, if reliable K values are availble.\n\nBecause n(H₂⁺) is computed on the fly, the \"cross-sections\" used (internally) by this function have units of  cm^-5, since they must be multiplied by n(H I) and n(H II) to obtain absorption coefficients.\n\nStancil, Bates (1952), and Gray (2005) all use n(H I), but Kurucz (1970) notes in section 5.2 that the photodisociation of H₂⁺  produces a ground state H atom and that we should therefore use n(H I, n=1) instead. This difference  causes a descrepancy of a fraction of a percent (at most) for T ≤ 1.2e4 K. Here we use n(H I).\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.He_II_bf","page":"Function Reference","title":"Korg.ContinuumAbsorption.He_II_bf","text":"He_II_bf(ν, T, nHe_I_div_partition, [ion_energy], [nmax_explicit_sum], [integrate_high_n];\n         kwargs...)\n\nCompute the bound-free linear absorption coefficient contributed by all energy states of a singly-ionized Helium atom.\n\nRequired Arguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnHe_II_div_partition is the total number density of singly-ionized Helium divided by the its  partition function.\n\nOptional Arguments\n\nion_energy: The ionization energy of Helium. By default, this is set to the values loaded  into the global ionization_energies list.\nnmax_explicit_sum: The highest energy level whose absorption contribution is included  in the explicit sum. The contributions from higher levels are included in an integral.\nintegrate_high_n::bool: When this is false, bf absorption from higher energy states are not  estimated at all. Default is true.\n\nFor a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis function simply wraps hydrogenic_ff_absorption. See that function for additional details.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.Heminus_ff","page":"Function Reference","title":"Korg.ContinuumAbsorption.Heminus_ff","text":"Heminus_ff(ν, T, nHe_I_div_partition, ne; kwargs...)\n\nCompute the He⁻ free-free opacity κ.\n\nThe naming scheme for free-free absorption is counter-inutitive. This actually refers to the reaction:  photon + e⁻ + He I -> e⁻ + He I.\n\nArguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnHe_I_div_partition: the total number density of H I divided by its partition function.\nne: the number density of free electrons.\n\nFor a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis follows equation 8.16 of Grey (2005) which provides a polynomial fit absorption to data tabulated in John (1994). According to that equation, the \"continuous absorption coefficient per Hydrogen\" is given by:\n\n    f(He⁻_ff)*Pₑ*A(He) / (1 + Φ(He)/Pₑ)\n\nin which\n\nlog_10(f(He⁻_ff)) is the polynomial term (Grey actually uses the variable α in place of f)\nA(He) is the number abundance of Helium particles relative to Hydrogen particles. For reference,\nA(He) = [n(He I) + n(He II) + n(He III)] / [n(H I) + n(H II)]\nPₑ is the partial pressure contributed by electrons. For reference, Pₑ = nₑ*kb * T.\n1/(1 + Φ(He)/Pₑ) comes from the Saha equation and expresses n(He I) / [n(He I) + n(He II)].\n\nIn the above expression, f(He⁻_ff)*Pₑ specifies the free-free atomic absorption coefficient per ground state He I atom. The expression seems to implicitly assume that\n\napproximately all He I is in the ground state\nn(He I) / [n(He I) + n(He II)] is roughly n(He I) / [n(He I) + n(He II) + n(HeIII)]\n\n(at least for the range of temperatures where f can be accurately computed).\n\nTo convert the expression to opacity, Grey divided it by the product of the mean molecular weight and the Hydrogen mass. With that in mind, we can write the equation for linear absorption coefficient, αν, (removing the apparent assumptions) as `αν = f(He⁻_ff)Pₑn(He I, n=1).`\n\nFor 5063 Å ≤ λ ≤ 151878 Å and 2520 K ≤ T ≤ 10080 K, Gray (2005) claims that the polynomial fit the tabulated data at a precision of 1% or better. In practice, we found that it only fits the data to better than 3.1% (it's possible that for smaller λ the fit may be better). For reference, the tabulated data in these ranges of values consist of an irregularly spaced rectangular grid with 15 λ values and 9 Temperature values. According to John (1994), improved calculations are unlikely to alter the tabulated data for λ > 1e4Å, \"by more than about 2%.\" The errors introduced by the approximations for 5.06e3 Å ≤ λ ≤ 1e4 Å \"are expected to be well below 10%.\"\n\nAn alternative approach using a fit to older data is provided in section 5.7 of Kurucz (1970).\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.electron_scattering","page":"Function Reference","title":"Korg.ContinuumAbsorption.electron_scattering","text":"electron_scattering(nₑ)\n\nCompute the linear absorption coefficient, α, from scattering off of free electrons. This has no wavelength dependence. It assumes isotropic scattering.  (See, e.g. Gray p 160.)\n\nArguments\n\nnₑ::F: number density of free electrons (in cgs)\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.rayleigh","page":"Function Reference","title":"Korg.ContinuumAbsorption.rayleigh","text":"rayleigh(λs, nH_I, nHe_II, nH2)\n\nAbsorption coefficient from Rayleigh scattering by neutral H, He, and H2.  Formulations for H and He are via Colgan+ 2016.  Formulation  for H2 from  Dalgarno and Williams 1962.\n\nThe Dalgarno and Williams H2 is applicable redward of 1300 Å.  Since Rayleigh scattering breaks down when the particle size to wavelength ratio gets large, we that all frequencies passed to this  function be equivalent to 1300 Å or greater.\n\nThe formulations for H is adapted from  Lee 2005, which states that it is  applicable redward of Lyman alpha. See Colgan 2016 for details on He.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.hydrogenic_bf_absorption","page":"Function Reference","title":"Korg.ContinuumAbsorption.hydrogenic_bf_absorption","text":"hydrogenic_bf_absorption(ν, T, Z, nmax_explicit_sum, nsdens_div_partition,\n                         ion_energy, [integrate_high_n])\n\nCompute the bound-free linear absorption coefficient contributed by all energy states of a Hydrogenic species\n\nThe calculation is broken into 2 parts: (i) the contributions of the lowest energy states are  explicitly summed and (ii) the contributions of the higher energy states are estimated with an  integral.\n\nArguments\n\nν: frequency in Hz\nT: temperature in K\nZ::Integer: Z is the atomic number of the species (e.g. 1 for H I or 2 for He II)\nnsdens_div_partition is the total number density of the species divided by the species's  partition function.\nion_energy: the ionization energy from the ground state (in eV). This can be   estimated as Z²*RydbergH (RydbergH is the ionization energy of Hydrogen)\nnmax_explicit_sum::Integer: The highest energy level whose absorption contribution is included  in the explicit sum. The contributions from higher levels are included in the integral.\nintegrate_high_n::bool: When this is false, bf absorption from higher energy states are not  estimated at all. Default is true.\n\nNotes\n\nThis follows the approach described in section 5.1 of Kurucz (1970).\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.ContinuumAbsorption.hydrogenic_ff_absorption","page":"Function Reference","title":"Korg.ContinuumAbsorption.hydrogenic_ff_absorption","text":"hydrogenic_ff_absorption(ν, T, Z, ni, ne)\n\ncomputes the free-free linear absorption coefficient for a hydrogenic species\n\nThe naming convention for free-free absorption is counter-intuitive. A free-free interaction is named as though the species interacting with the free electron had one more bound electron (in  other words it's named as though the free-electron and ion were bound together). In practice, this means that ni should refer to:\n\nthe number density of H II if computing the H I free-free absorption\nthe number density of He III if computing the He II free-free absorption\nthe number density of Li IV if computing the Li III free-free absorption\n\nArguments\n\nZ::Integer: the charge of the ion. For example, this is 1 for ionized H.\nni: the number density of the ion species in cm⁻³.\nne: the number density of free electrons.\nν: frequency in Hz\nT: temperature in K\n\nNote\n\nThis approach was adopted from equation 5.8 from section 5.1 of Kurucz (1970). Comparison against equation 5.18b of Rybicki & Lightman (2004), reveals that the equation in Kurucz (1970) omits the dependence on ρ. According to Rybicki & Lightman (2004) the free-free absorption coefficient (corrected for stimulated emission) is:\n\n    α = coef * Z² * ne * ni * (1 - exp(-hplanck*ν/(kboltz*T))) * g_ff / (sqrt(T) * ν³)\n\nNote that the g_ff is the free-free gaunt factor and coef is ∼3.7e8 (a more exact coefficient can be computed from eqn 5.18a).\n\nWith this in mind, equation 5.8 of Kurucz (1970) should actually read\n\n    κ = ne * n(H II) * F_ν(T) * (1 - exp(-hplanck*ν/(kboltz*T))) / ρ\n\nwhere Fν(T) = coef * Z² * gff / (sqrt(T) * ν³).\n\nSee gaunt_ff_vanHoof for details about where our gaunt factor data comes from. For simplicity, we enforce temperature and ν bounds constraints that don't include all of the available gaunt factor data. In practice, this should never be a concern for stellar spectroscopy.\n\n\n\n\n\n","category":"function"},{"location":"API/#Statistical-mechanics","page":"Function Reference","title":"Statistical mechanics","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"These functions can be used to calculate the number densities of all species in a given atospheric  layer, or other statmech calculations. ","category":"page"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"Korg.saha_ion_weights\nKorg.molecular_equilibrium_equations\nKorg.molecular_equilibrium","category":"page"},{"location":"API/#Korg.saha_ion_weights","page":"Function Reference","title":"Korg.saha_ion_weights","text":"saha_ion_weights(T, nₑ, atom, ionization_energies, partition_functions)\n\nReturns (wII, wIII), where wII is the ratio of singly ionized to neutral atoms of a given  element, and wIII is the ration of doubly ionized to neutral atoms.\n\narguments:\n\ntemperature T [K]\nelectron number density nₑ [cm^-3]\natom, the atomic number of the element \nionization_energies is a collection indexed by integers (e.g. a Vector) mappping elements'   atomic numbers to their first three ionization energies\npartition_funcs is a Dict mapping species to their partition functions\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.molecular_equilibrium_equations","page":"Function Reference","title":"Korg.molecular_equilibrium_equations","text":"molecular_equilibrium_equations(absolute_abundances, ironization_energies, partiation_fns, equilibrium_constants)\n\nReturns a NamedTuple representing the system of equations specifying molecular equilibrium.\n\narguments:\n\nA Dict of absolute_abundances, NX/Ntotal\na Dict of ionization energies, ionization_energies.  The keys of act as a list of all atoms.\na Dict of partition functions, partition_fns\na Dict of log molecular equilibrium constants, equilibrium_constants, in partial pressure form.  The keys of equilibrium_constants act as a list of all molecules.\n\nThe system of equations is specified with the number densities of the neutral atoms as free  parameters.  Each equation specifies the conservation of a particular species, e.g. (simplified)\n\nn(O) = n(CO) + n(OH) + n(O I) + n(O II) + n(O III).\n\nIn this equation:\n\nn(O), the number density of oxygen atoms in any form comes absolute_abundances and the total\n\nnumber density (supplied later)\n\nn(O I) is a free parameter.  The numerical solver is varying this to satisfy the system of  equations.\nn(O II), and n(O III) come from the Saha (ionization) equation given n(O I)\nn(CO) and n(OH) come from the molecular equilibrium constants K, which are precomputed  over a range of temperatures. \n\nEquilibrium constants are defined in terms of partial pressures, so e.g.\n\nK(OH)  ==  (p(O) p(H)) / p(OH)  ==  (n(O) n(H)) / n(OH)) kT\n\nThis could also be computed via a Saha equation involving the molecular partition function and  dissolution energy.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.molecular_equilibrium","page":"Function Reference","title":"Korg.molecular_equilibrium","text":"molecular_equilibrium(MEQS, T, nₜ, nₑ; x0)\n\nIteratively solve for the number density of each species. Returns a Dict mapping species to number  densities.\n\narguments:\n\nthe system of molecular equilibrium equations MEQs (the thing returned by \n\nmolecular_equilibrium_equations)\n\nthe temperature T, \nthe number density of non-electron particles nₜ\nthe electron number density nₑ\noptionally, x0, a starting point for the solver\n\n\n\n\n\n","category":"function"},{"location":"API/#Misc","page":"Function Reference","title":"Misc","text":"","category":"section"},{"location":"API/","page":"Function Reference","title":"Function Reference","text":"Korg.blackbody\nKorg.get_absolute_abundances\nKorg.air_to_vacuum\nKorg.vacuum_to_air","category":"page"},{"location":"API/#Korg.blackbody","page":"Function Reference","title":"Korg.blackbody","text":"blackbody(T, λ)\n\nThe value of the Planck blackbody function for temperature T at wavelength λ [cm].\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.get_absolute_abundances","page":"Function Reference","title":"Korg.get_absolute_abundances","text":"get_absolute_abundances(metallicity, abundances, solar_abundances, solar_relative)\n\nCalculate n_Xn_mathrmtotal for each element X given abundances in either [X/H] or  A(X) form.  See synthesize for a detailed description of the arguments. Returns a  vector indexed by atomic number.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.air_to_vacuum","page":"Function Reference","title":"Korg.air_to_vacuum","text":"air_to_vacuum(λ; cgs=λ<1)\n\nConvert λ from an air to vacuum.  λ is assumed to be in Å if it is ⩾ 1, in cm otherwise.  Formula  from Birch and Downs (1994) via the VALD website.\n\nSee also: vacuum_to_air.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.vacuum_to_air","page":"Function Reference","title":"Korg.vacuum_to_air","text":"vacuum_to_air(λ; cgs=λ<1)\n\nconvert λ from a vacuum to air.  λ is assumed to be in Å if it is ⩾ 1, in cm otherwise.  Formula  from Birch and Downs (1994) via the VALD website.\n\nSee also: air_to_vacuum.\n\n\n\n\n\n","category":"function"}]
}
