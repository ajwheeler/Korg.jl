var documenterSearchIndex = {"docs":
[{"location":"tutorials/#tutorials","page":"Tutorials","title":"Tutorial notebooks","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Here are a few tutorials in the form of Jupyter Notebooks to help you get started using Korg.  Each of the following bullets link to a folder on GitHub containing the associated Julia and Python notebooks (the .ipynb files) and any supporting data.  You can download everything if you want to run the notebook yourself, or just view the notebook on GitHub.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The Basics demonstrates how to read linelists, read or interpolate model atmospheres, and synthesize spectra. It also goes into some of the other data returned when you synthesize a spectrum.\nFitting demonstrates the use of Korg.Fit.fit_spectrum to fit observational data.\nFitting with equivalent widths demonstrates how to fit equivalent widths.","category":"page"},{"location":"tutorials/#Slurm-example","page":"Tutorials","title":"Slurm example","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"There is an example script that shows how you might use Korg to generate many spectra within a Slurm job. Note that this example creates a file for each spectrum, which may not be desireable on your HPC environment.","category":"page"},{"location":"tutorials/#APOGEE-example","page":"Tutorials","title":"APOGEE example","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Here is an exmple script showing how you might synthsize an APOGEE spectrum.  It demonstrates some bells and whistles: a precomputed LSF matrix and precomputed molecular cross sections.","category":"page"},{"location":"FAQ/#What's-the-difference-between-Korg.species-and-Korg.Species?","page":"FAQ","title":"What's the difference between Korg.species and Korg.Species?","text":"","category":"section"},{"location":"FAQ/","page":"FAQ","title":"FAQ","text":"Short answer: you can always use Korg.Species like so: Korg.Species(\"C II\"). Longer answer: they do the same thing, but the lower-case version can only be applied to string literals. Both of these are ways to constructing objects of type [Korg.Species](@ref), which is used to represent atom and molecules with specific charges, e.g. C II or neutral FeH.Korg.Speciesis the constructor, which acts like a normal function.Korg.speciesis a [non-standard string literal](https://docs.julialang.org/en/v1/manual/metaprogramming/#meta-non-standard-string-literals), which is used without parentheses, like this:Korg.species\"Mg I\"`. It can only be applied to string literals (things that you actually type out between quotes, not variables containing strings.) The string macro does the work of constructing the species object at compile time, which can make code much faster in specific circumstances.","category":"page"},{"location":"FAQ/#Are-Korg-spectra-bitwise-reproducible?","page":"FAQ","title":"Are Korg spectra bitwise reproducible?","text":"","category":"section"},{"location":"FAQ/","page":"FAQ","title":"FAQ","text":"Korg spectra should be bitwise reproducible under these conditions:","category":"page"},{"location":"FAQ/","page":"FAQ","title":"FAQ","text":"Using a single thread (Julia's default configuration)\nRunning on the same machine\nUsing identical Korg and dependency versions\nProviding identical input parameters","category":"page"},{"location":"FAQ/","page":"FAQ","title":"FAQ","text":"When running with multiple threads, small numerical differences may occur due to floating-point operations being performed in different orders.","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"While Korg is written in Julia, it's possible to use it from either Julia or Python.","category":"page"},{"location":"install/#Using-Korg-from-Julia","page":"Install","title":"Using Korg from Julia","text":"","category":"section"},{"location":"install/#install","page":"Install","title":"1. Install Julia","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"Install Julia, by following the instructions on the website.","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"warning: Warning\nThe latest versions of Korg support Julia 1.7 and greater, so make sure you are not using an older version.  (Versions can be installed alongside eachother, and the 1.X versions are backwards compatible.)","category":"page"},{"location":"install/#2.-Install-Korg","page":"Install","title":"2. Install Korg","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"Launch a julia session (either by launching the app, or typing julia on the command line if you have that set up).\nType ] to enter Pkg mode.\nType add Korg to install Korg and its dependencies.\nPress backspace or CTRL+C to exit Pkg mode (and return to the Julia REPL)","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"Alternatively, you can run","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"julia> using Pkg\njulia> Pkg.add(\"Korg\")","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"tip: Tip\nIf you are coming from Python, we also recommend installing IJulia (for using Julia from Jupyter/IPython notebooks), and PythonPlot (for calling matplotlib from Julia).","category":"page"},{"location":"install/#Using-Korg-from-Python","page":"Install","title":"Using Korg from Python","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"The recommended way to call Korg from Python is to use juliacall. Here's the quick version:","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"Install juliacall with","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"pip install juliacall\npip install juliapkg","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"Then, to install Korg, do this from a Python shell:","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"import juliapkg\njuliapkg.add(\"Korg\", \"acafc109-a718-429c-b0e5-afd7f8c7ae46\")\njuliapkg.resolve()","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"That's it! To use Korg from Python, just put these lines at the top of your script/notebook.","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"from juliacall import Main as jl\njl.seval(\"using Korg\")\nKorg = jl.Korg","category":"page"},{"location":"install/#Keeping-Korg-updated","page":"Install","title":"Keeping Korg updated","text":"","category":"section"},{"location":"install/","page":"Install","title":"Install","text":"In order to update Korg in the future, you can type:","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"Julia:","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"using Pkg\nPkg.update(\"Korg\")","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"Python:","category":"page"},{"location":"install/","page":"Install","title":"Install","text":"from juliacall import Main as jl\njl.seval(\"using Pkg\")\njl.Pkg.update(\"Korg\")","category":"page"},{"location":"#Korg.jl","page":"Quickstart","title":"Korg.jl","text":"","category":"section"},{"location":"","page":"Quickstart","title":"Quickstart","text":"(Image: Documentation) (Image: Tests) (Image: codecov) (Image: Aqua QA)","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"Korg is a package for computing stellar spectra from 1D model atmospheres and linelists assuming local thermodynamic equilibrium. It can be used with Julia or Python. Here's some things it can do:","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"Computing spectra from Teff, logg, abundances, etc.\nFitting whole spectra or individual lines via synthesis or equivalent widths\nExcitation-ionization balance from equivalent width data\nModel atmosphere interpolation, parsing and using atmosphere files (MARCS)\nParsing and using linelists in VALD, Kurucz, MOOG, ExoMol, and Turbospectrum formats, with several defaults built-in.\nAutomatic differentiaion (via ForwardDiff.jl)\nSynthesis with arbitrary abundances/solar abundance scales, with several defaults built-in.","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"After installing Korg, get started by looking at the top-level functions or the tutorial notebooks.","category":"page"},{"location":"#Example","page":"Quickstart","title":"Example","text":"","category":"section"},{"location":"","page":"Quickstart","title":"Quickstart","text":"(Python version below)","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"using Korg, PyPlot\n\nwls, flux, continuum = synth(\n    Teff=5000, # effective temperature of 5000 Kelvin\n    logg=4.32, # surface gravity of 10^(4.32) cm/s²\n    m_H=-1.1,  # metallicity, [m/H]. Overridden for individual elements by alpha_H and individual abundances\n    C=-0.5,    # The Carbon abundance, [C/H].  Works for anything from He to U.\n    linelist=Korg.get_GALAH_DR3_linelist(),\n    wavelengths=(5850, 5900)\n)\n\n# plot\nfigure(figsize=(12, 4))\nplot(wls, flux, \"k-\")\nxlabel(L\"$\\lambda$ [Å]\")\nylabel(L\"$F_\\lambda/R_\\mathrm{star}^2$ [erg s$^{-1}$ cm$^{-5}$]\");","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"See the documentation for synth, or the documentation for synthesize for advanced usage.","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"(Image: image)","category":"page"},{"location":"#Code-papers-(please-cite-these-if-you-use-Korg):","page":"Quickstart","title":"Code papers (please cite these if you use Korg):","text":"","category":"section"},{"location":"","page":"Quickstart","title":"Quickstart","text":"Korg: A Modern 1D LTE Spectral Synthesis Package. This is also a good overview of how spectral synthesis works, the inputs and outputs, etc.\nKorg: fitting, model atmosphere interpolation, and Brackett lines","category":"page"},{"location":"#Tutorials:","page":"Quickstart","title":"Tutorials:","text":"","category":"section"},{"location":"","page":"Quickstart","title":"Quickstart","text":"Korg basics\nKorg basics in python\nother tutorial notebooks","category":"page"},{"location":"#Getting-help","page":"Quickstart","title":"Getting help","text":"","category":"section"},{"location":"","page":"Quickstart","title":"Quickstart","text":"If you are having trouble using or installing Korg, please get in touch by opening a GitHub issue (preferred), or sending Adam an email.","category":"page"},{"location":"#You-can-also-call-Korg-from-python","page":"Quickstart","title":"You can also call Korg from python","text":"","category":"section"},{"location":"","page":"Quickstart","title":"Quickstart","text":"See the documentation for setup instructions.","category":"page"},{"location":"","page":"Quickstart","title":"Quickstart","text":"from juliacall import Main as jl\njl.seval(\"using Korg\"); Korg = jl.Korg\n\n# calling Korg.synth is exactly the same as in Julia.\nwls, flux, continuum = Korg.synth(\n    Teff=5000,\n    logg=4.32,\n    m_H=-1.1,\n    C=-0.5,\n    linelist=Korg.get_GALAH_DR3_linelist(),\n    wavelengths=(5850, 5900)\n)","category":"page"},{"location":"#Multithreading","page":"Quickstart","title":"Multithreading","text":"","category":"section"},{"location":"","page":"Quickstart","title":"Quickstart","text":"Korg can use multithreading to speed up line opacity calculation, the most expensive step for syntheses. To use it launch Julia with more than one thread, using the -t command-line argument, or by setting the $JULIA_NUM_THREADS environment variable.","category":"page"},{"location":"devdocs/#Developer-documentation","page":"Developer Documentation","title":"Developer documentation","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"This page contains info for people interested in contributing code to Korg.  If you  have questions, do not hesitate to ask.","category":"page"},{"location":"devdocs/#Julia-development","page":"Developer Documentation","title":"Julia development","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"If you've never developed a package in Julia, here are some tips.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Once you have a local copy of Korg, you can make it importable locally by deving it from the Julia environment in which you would like to run it: Pkg.dev(\"/path/to/Korg\").  If you run Pkg.dev(\"Korg\") instead, Julia will automatically clone the repo to ~/.julia/dev/Korg.  (See the Pkg documentation for details.)\nWhen working on your local copy of Korg, Revise is easiest way to make and test changes without constantly restarting your Julia session.\nTo run the test suite locally, start a Julia session in the Korg root directory and run ]activate . then test.  This will automatically run test/runtests.jl in the test environment.\nDocumentation is generated with Documentor. Continuous integration on github will ensure that the documentation is generated without errors, but it won't catch all formatting problems.  If you wish to generate documentation locally in order to check that everything is as expected, start a Julia session in Korg/docs, activate the test environment (]activate .), and run instantiate.  This downloads and installs the docs dependences, and will only have to be run once.  To generate documentation, run julia --project make.jl on the command line (the --project flag activates the local environment).  The generated docs can be served from docs/build.","category":"page"},{"location":"devdocs/#Code-guidelines","page":"Developer Documentation","title":"Code guidelines","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Try to be explicit about units throughout the code, particularly when not using CGS.\nWhenever possible, calculations should be precise up to a factor of 10^-3.  When it's easy and inexpensive, they should be precise to 10^-5 or better.  There are exceptions to this (e.g. the Voigt function), but ideally they will eventually be vanquished.\nEnsure types are generic enough to support dual numbers and autodifferentiation. \nLimit lines to 100 characters.\nUse ASCII characters in the names of functions that are part of the public API.\nUnless they will never be called elsewhere, provide docstrings describing the inputs, assumptions and outputs of any functions you write.","category":"page"},{"location":"devdocs/#Continuum-absorption","page":"Developer Documentation","title":"Continuum absorption","text":"","category":"section"},{"location":"devdocs/#Continuum-Absorption-Kwargs","page":"Developer Documentation","title":"Continuum Absorption Kwargs","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"All bound-free and free-free absorption functions (other than absorption_coef_bf_TOPBase) support the following keyword arguments:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"error_oobounds::Bool: specifies the function's behavior when it encounters invalid ν or T values. When false (the default), the function assumes that the absorption coefficient for these invalid ν or T values is 0.0. Otherwise, a DomainError is thrown when invalid ν or T values are encountered.\nout_α::Union{Nothing,AbstractVector}: When this is nothing (the default case), the function will simply allocate a new vector to store the output continuum absorption coefficients. Alternatively, this can be a vector (with the same length as the function's ν argument). In this case, the function will directly add the computed continuum absorption to the elements of this vector, in-place (the vector is also returned by the function).","category":"page"},{"location":"devdocs/#Steps-for-implementing-new-continuum-sources-of-absorption:","page":"Developer Documentation","title":"Steps for implementing new continuum sources of absorption:","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Define a helper function that computes a single absorption coefficient (in units of cm⁻²). The function should accept ν (in Hz) and T (in K) as the first and second arguments, respectively. The convention is for it should share a name with the corresponding public function, but have an underscore pre-appended (e.g. we define _H_I_bf to help implement H_I_bf).\nThe public function is the function constructed and returned by Korg.ContinuumAbsorption.bounds_checked_absorption that wraps the above helper function. This wrapper function implements bounds-checking for ν and T and supports the keyword arguments described in Continuum Absorption Kwargs.\nAdd a docstring describing the new function. At the very least, please describe any non-standard arguments and include a reference in the docstring to the source where the function was taken from.\nAdd a line to doc/src/API.md under the Continuum absorption heading to render the docstring of your new function.\nAdd a line to total_continuum_absorption that calls the new public function for absorption.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"The first two steps may not apply for sources that don't directly depend on ν and T (e.g. absorption from scattering).","category":"page"},{"location":"devdocs/#Manifest.toml-and-Project.toml","page":"Developer Documentation","title":"Manifest.toml and Project.toml","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Read more about these files here. These files are used by the julia package manager.  Project.toml records dependencies, and you'll  notice that the test and docs directories have their own Project.tomls for test and  documentation-specific dependencies.  Manifest.toml records exact package versions used when a  package was run.  It enables someone else to reproduce the exact environment and results later.   There are a few directories containing scripts that generate Korg's data files which have there own  Projects.tomls and Manifest.tomls, for example data/bf_cross-sections/.","category":"page"},{"location":"devdocs/#Where-to-put-data","page":"Developer Documentation","title":"Where to put data","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"If you are adding data to Korg, data/README provides an overview of the options and how to decide  between them.","category":"page"},{"location":"devdocs/#Complete-API","page":"Developer Documentation","title":"Complete API","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"This is a list of the complete API. Anything not explicitly listed here should be considered a private function (that can/will change between patch releases).","category":"page"},{"location":"devdocs/#Korg._alpha_5000_default_linelist","page":"Developer Documentation","title":"Korg._alpha_5000_default_linelist","text":"The default linelist for calculating the absorption coefficient at 5000 Å.  This for internal use when the provided linelist doesn't cover the region and a radiative transfer scheme using τ_5000 is used.\n\nSee also _load_alpha_5000_linelist.\n\n\n\n\n\n","category":"constant"},{"location":"devdocs/#Korg.default_alpha_elements","page":"Developer Documentation","title":"Korg.default_alpha_elements","text":"The \"alpha elements\" are defined as O, Ne, Mg, Si, S, Ar, Ca, Ti, i.e. all elements with even atomic numbers from 8-22. This definition is used by default in format_A_X, get_metals_H, and get_alpha_H, but can be overridden with a keyword argument.\n\n\n\n\n\n","category":"constant"},{"location":"devdocs/#Korg.default_solar_abundances","page":"Developer Documentation","title":"Korg.default_solar_abundances","text":"Korg's default solar abundances (Asplund 2020, for now).\n\n\n\n\n\n","category":"constant"},{"location":"devdocs/#Korg.Formula","page":"Developer Documentation","title":"Korg.Formula","text":"Represents an atom or molecule, irrespective of its charge.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.Line-Union{Tuple{F6}, Tuple{F5}, Tuple{F4}, Tuple{F3}, Tuple{F2}, Tuple{F1}, Tuple{F1, F2, Korg.Species, F3}, Tuple{F1, F2, Korg.Species, F3, Union{Missing, F4}}, Tuple{F1, F2, Korg.Species, F3, Union{Missing, F4}, Union{Missing, F5}}, Tuple{F1, F2, Korg.Species, F3, Union{Missing, F4}, Union{Missing, F5}, Union{Missing, Tuple{F6, F6}, F6}}} where {F1<:Real, F2<:Real, F3<:Real, F4<:Real, F5<:Real, F6<:Real}","page":"Developer Documentation","title":"Korg.Line","text":"Line(wl::F, log_gf::F, species::Species, E_lower::F,\n     gamma_rad::Union{F, Missing}=missing, gamma_stark::Union{F, Missing}=missing,\n     vdw::Union{F, Tuple{F, F}, Missing}, missing) where F <: Real\n\nArguments:\n\nwl: wavelength (Assumed to be in cm if < 1, otherwise in Å)\nlog_gf: (log base 10) oscillator strength (unitless)\nspecies: the Species associated with the line\nE_lower: The energy (excitiation potential) of the lower energy level (eV)\n\nOptional Arguments (these override default recipes):\n\ngamma_rad: Fundemental width\ngamma_stark: per-perturber Stark broadening width at 10,000 K (s⁻¹).\nvdW: If this is present, it may may be\nlog10(γ_vdW), assumed if negative\n0, corresponding to no vdW broadening\nA fudge factor for the Unsoeld approximation, assumed if between 0 and 20\nThe ABO parameters as packed float (assumed if >= 20) or a Tuple, (σ, α).\nThis behavior is intended to mirror that of Turbospectrum as closely as possible.\n\nSee approximate_gammas for more information on the default recipes for gamma_stark and vdW.\n\nNote the the \"gamma\" values here are FWHM, not HWHM, of the Lorenztian component of the line profile, and are in units of s⁻¹.\n\nLine(line::line; kwargs...)\n\nConstruct a new Line by copying the values from an existing Line.  Any of the values can be modified with keyword arguments, e.g. Line(line, log_gf=0.0).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.MolecularCrossSection-Tuple{Any, Vararg{Any}}","page":"Developer Documentation","title":"Korg.MolecularCrossSection","text":"MolecularCrossSection(linelist, wl_params...; cutoff_alpha=1e-30, log_temp_vals=3:0.025:5, verbose=true)\n\nPrecompute the molecular absorption cross section for a given linelist and set of wavelengths. The MolecularCrossSection object can be passed to synthesize and potentially speed up the calculation significantly.  At present, Korg only supports precomputed cross-sections created by this function, though they can be saved and loaded using save_molecular_cross_section and read_molecular_cross_section.\n\nArguments\n\nlinelist: A vector of Line objects representing the molecular linelist.  These must be of the same species.\nwl_params...: Parameters specifying the wavelengths in the same format that synthesize expects.\n\nKeyword Arguments\n\ncutoff_alpha (default: 1e-30): The value of the single-line absorption coefficient (in cm^-1) at which to truncate the profile.\nlog_temp_vals (default: 3:0.025:5): The log10 of the temperatures at which to precompute the cross-section.\nverbose (default: true): Whether to print progress information.\n\ntip: Tip\nThe default values of vmic_vals, log_temp_vals, and cutoffalphawere chosen to ensure that lines in the APOGEE linelist ([getAPOGEEDR17linelist`](@ref)) could be accurately reproduced (better than 10^-3 everywhere). You should verify that they yield acceptable accuracy for other applications by comparing spectra synthesize with and without precomputing the molecular cross-section.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.PlanarAtmosphere","page":"Developer Documentation","title":"Korg.PlanarAtmosphere","text":"PlanarAtmosphere(layers)\n\nA planar atmosphere is a flat atmosphere with its photosphere at z = 0.  The atmosphere is specified by a vector of PlanarAtmosphereLayers.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.PlanarAtmosphere-Tuple{Korg.ShellAtmosphere}","page":"Developer Documentation","title":"Korg.PlanarAtmosphere","text":"PlanarAtmosphere(atm::ShellAtmosphere)\n\nConstruct a planar atmosphere with the data from a shell atmosphere.  Mostly useful for testing.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.PlanarAtmosphereLayer","page":"Developer Documentation","title":"Korg.PlanarAtmosphereLayer","text":"PlanarAtmosphereLayer(tau_5000, z, temp, nₑ, n)\n\nA layer of a planar atmosphere.\n\nArguments\n\ntau_5000: the optical depth at 5000 Å.  This is useful for radiative transfer.\nz: the height (cm) of the layer relative to the photosphere.\ntemp: the temperature (K) of the layer.\nnₑ: the electron number density (cm⁻³) of the layer.\nn: the total number density (cm⁻³) of the layer.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.ShellAtmosphere","page":"Developer Documentation","title":"Korg.ShellAtmosphere","text":"ShellAtmosphere(layers, R)\n\nShellAtmospheres (spherical atmospheres) are specified by a vector of ShellAtmosphereLayers and a photospheric radius R.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.ShellAtmosphere-Tuple{Korg.PlanarAtmosphere, Any}","page":"Developer Documentation","title":"Korg.ShellAtmosphere","text":"ShellAtmosphere(atm::PlanarAtmosphere, R)\n\nConstruct a shell atmosphere with the data from a planar atmosphere and an outer radius.  Mostly useful for testing.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ShellAtmosphereLayer","page":"Developer Documentation","title":"Korg.ShellAtmosphereLayer","text":"ShellAtmosphereLayer(tau_5000, z, temp, nₑ, n)\n\nA layer of a shell atmosphere.\n\nArguments\n\ntau_5000: the optical depth at 5000 Å.  This is useful for radiative transfer.\nz: the height (cm) of the layer relative to the photosphere.\ntemp: the temperature (K) of the layer.\nnₑ: the electron number density (cm⁻³) of the layer.\nn: the total number density (cm⁻³) of the layer.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.Species","page":"Developer Documentation","title":"Korg.Species","text":"Represents an atom or molecule (a Formula) with a particular number of electrons (regardless of their configuration).\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.Species-Tuple{AbstractString}","page":"Developer Documentation","title":"Korg.Species","text":"Species(code)\n\nParse the \"species code\" in many of the forms in which it is often specified and return an object representing the species. code can be either a string or a float.\n\nExamples\n\n\"H I\" -> H I\n\"H 1\" -> H I\n\"H     1\" -> H I\n\"H_1\" -> H I\n\"H.I\" -> H I\n\"H 2\" -> H II\n\"H2\" -> H₂\n\"H\" -> H I\n\"01.00\" → H I\n\"02.01\" → He II\n\"02.1000\" → He II\n\"0608\" → CO I\n\nnote: Note\nTo parse at compile time, use the species string macro, i.e. species\"H I\".  This is important in hot inner loops.\n\nwarning: Warning\nMOOG codes which include isotopic information will not be parsed correctly by this function, though read_linelist handles them correctly. # leading 0s are safe to remove\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.SynthesisResult","page":"Developer Documentation","title":"Korg.SynthesisResult","text":"SynthesisResult\n\nThe result of a synthesis. Returned by synthesize.\n\nFields\n\nflux: the output spectrum\ncntm: the continuum at each wavelength\nintensity: the intensity at each wavelength and mu value, and possibly each layer in the model atmosphere, depending on the radiative transfer scheme.\nalpha: the linear absorption coefficient at each wavelength and atmospheric layer a Matrix of size (layers x wavelengths)\nmu_grid: a vector of tuples containing the μ values and weights used in the radiative transfer calculation. Can be controlled with the mu_values keyword argument.\nnumber_densities: A dictionary mapping Species to vectors of number densities at each atmospheric layer\nelectron_number_density: the electron number density at each atmospheric layer\nwavelengths: The vector of vacuum wavelengths (in Å) over which the synthesis was performed. If air_wavelengths=true this will not be the same as the input wavelengths.\nsubspectra: A vector of ranges which can be used to index into flux to extract the spectrum for each range provided in wavelength_ranges.  If you use the standard λ_start, λ_stop, λ_step arguments, this will be a vector containing only one range.\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.Wavelengths","page":"Developer Documentation","title":"Korg.Wavelengths","text":"Korg.Wavelengths(wl_params...; air_wavelengths=false, wavelength_conversion_warn_threshold=1e-4)\n\nConstruct a Wavelengths object which represents the (possibly non-contiguous) wavelengths for which to compute a spectrum.  The wavelengths can be specified with an upper and lower bound, or a vector of upper and lower bounds. For example,\n\nKorg.Wavelengths(5000, 5500)\nKorg.Wavelengths(5000, 5500, 0.01) # explicitly specify the spacing (0.01 Å is the default)\nKorg.Wavelengths([(5000, 5500), (6000, 6500)])\n\nWavelengths can be specified in either Å or cm. Values >= 1 are assumed to be in Å and values < 1 are assumed to be in cm.\n\nKeyword Arguments\n\nair_wavelengths (default: false): Whether or not the input wavelengths are air wavelengths to be converted to vacuum wavelengths by Korg.  The conversion will not be exact, so that the wavelength range can internally be represented by an evenly-spaced range.  If the approximation error is greater than wavelength_conversion_warn_threshold, an error will be thrown. (To do wavelength conversions yourself, see air_to_vacuum and vacuum_to_air.)\nwavelength_conversion_warn_threshold (default: 1e-4): see air_wavelengths. (In Å.)\n\n\n\n\n\n","category":"type"},{"location":"devdocs/#Korg.Qfactor-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.Qfactor","text":"Qfactor(synth_flux, synth_wl, obs_wl, LSF_mat; obs_mask=nothing)\n\nCompute the Q factor from the high-resolution theoretical spectrum, the high resolution wavelength grid, the low resolution (observed) wavelength grid, and the LSF matrix. Based on work from Bouchy et al. 2001, A&A, 374, 733. Note that the Q factor is an approximation when the flux uncertainty is not photon-dominated.\n\nArguments\n\nsynth_flux: High resolution theoretical spectrum\nsynth_wl: High resolution wavelength grid\nobs_wl: Low resolution wavelength grid\nLSF_mat: LSF matrix (see compute_LSF_matrix)\n\nKeyword Arguments\n\nobs_mask::Vector{Bool}=nothing: Mask for the low resolution spectrum to account for pixels masked from the observation\n\nSee also: RV_prec_from_Q and RV_prec_from_noise\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RV_prec_from_Q-Tuple{Real, Real, Real}","page":"Developer Documentation","title":"Korg.RV_prec_from_Q","text":"RV_prec_from_Q(Q, RMS_SNR, Npix)\n\nCompute the RV precision (in m/s) from the Q factor, the RMS SNR per pixel, and the number of pixels in the spectrum.\n\nArguments\n\nQ::Real: Q factor of the spectrum\nRMS_SNR::Real: The root mean squared per pixel SNR of the spectrum. For spectra which are not line-blanketed, this is approximately equal to the average SNR. approximately equal to the SNR.\nNpix::Real: Number of pixels in the spectrum\n\nSee also: Qfactor and RV_prec_from_noise\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RV_prec_from_noise-NTuple{5, Any}","page":"Developer Documentation","title":"Korg.RV_prec_from_noise","text":"RV_prec_from_noise(synth_flux, synth_wl, obs_wl, LSF_mat, obs_err; obs_mask=nothing)\n\nCompute the best achievable RV precision given the a spectrum with uncertainties.\n\nArguments\n\nsynth_flux: High-resolution theoretical spectrum\nsynth_wl: High-resolution wavelength grid\nobs_wl: Low-resolution wavelength grid\nLSF_mat: LSF matrix (see compute_LSF_matrix)\nobs_err: Noise in the continuum normalized spectrum\n\nKeyword Arguments\n\nobs_mask=nothing: Mask for the low resolution spectrum to account for pixels masked from the observation\n\nSee also: RV_prec_from_Q and Qfactor\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg._get_multi_X_H-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg._get_multi_X_H","text":"Given a vector of abundances, A_X, get [I+J+K/H], where Zs = [I,J,K] is a vector of atomic numbers.  This is used to calculate, for example, [α/H] and [metals/H].\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg._load_alpha_5000_linelist","page":"Developer Documentation","title":"Korg._load_alpha_5000_linelist","text":"_load_alpha_5000_linelist([path])\n\nLoad the default linelist for calculating the absorption coefficient at 5000 Å.  This for internal use when the provided linelist doesn't cover the region and a radiative transfer scheme using τ_5000 is used.\n\nThis linelist loaded into Korg._alpha_5000_default_linelist when Korg is imported.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.air_to_vacuum-Tuple{Any}","page":"Developer Documentation","title":"Korg.air_to_vacuum","text":"air_to_vacuum(λ; cgs=λ<1)\n\nConvert λ from an air to vacuum.  λ is assumed to be in Å if it is ⩾ 1, in cm otherwise.  Formula from Birch and Downs (1994) via the VALD website.\n\nSee also: vacuum_to_air.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.all_atomic_species-Tuple{}","page":"Developer Documentation","title":"Korg.all_atomic_species","text":"all_atomic_species()\n\nReturns an iterator that runs over all atomic species supported by Korg.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.apply_LSF-Union{Tuple{F}, Tuple{AbstractVector{F}, Any, Any}} where F<:Real","page":"Developer Documentation","title":"Korg.apply_LSF","text":"apply_LSF(flux, wls, R; window_size=4)\n\nApplies a gaussian line spread function the the spectrum with flux vector flux and wavelengths wls in any format accepted by synthesize, e.g. as a pair (λstart, λstop)) with constant spectral resolution (, R = lambdaDeltalambda, where Deltalambda is the LSF FWHM.  The window_size argument specifies how far out to extend the convolution kernel in standard deviations.\n\nFor the best match to data, your wavelength range should extend a couple Deltalambda outside the region you are going to compare.\n\nIf you are convolving many spectra defined on the same wavelenths to observational resolution, you will get much better performance using compute_LSF_matrix.\n\nKeyword Arguments\n\nwindow_size (default: 4): how far out to extend the convolution kernel in units of the LSF width (σ, not HWHM)\nrenormalize_edge (default: true): whether or not to renormalize the LSF at the edge of the wl range.  This doen't matter as long as synth_wls extends to large and small enough wavelengths.\n\nwarning: Warning\nThis is a naive, slow implementation.  Do not use it when performance matters.\napply_LSF will have weird behavior if your wavelength grid is not locally linearly-spaced. It is intended to be run on a fine wavelength grid, then downsampled to the observational (or otherwise desired) grid.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.apply_rotation","page":"Developer Documentation","title":"Korg.apply_rotation","text":"apply_rotation(flux, wls, vsini, ε=0.6)\n\nGiven a spectrum flux sampled at wavelengths wls for a non-rotating star, compute the spectrum that would emerge given projected rotational velocity vsini (in km/s) and linear limb-darkening coefficient ε: I(mu) = I(1) (1 - varepsilon + \u000barepsilon mu)).  See, for example, Gray equation 18.14.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.approximate_gammas-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.approximate_gammas","text":"approximate_gammas(wl, species, E_lower; ionization_energies=Korg.ionization_energies)\n\nA simplified form of the Unsoeld (1955) approximation for van der Waals broadening and the Cowley 1971 approximation for Stark broadening, evaluated at 10,000 K. Used for atomic lines with no vdW and stark broadening info in the linelist.\n\nReturns (γ_stark, log10(γ_vdW)) in Hz, where these are the per-perturber quantities. For autoionizing lines (those for which Eupper > χ), Returns 0.0 for γvdW. Note the the \"gamma\" values here are FWHM, not HWHM, of the Lorenztian component of the line profile.\n\nIn the calculation of n*², uses the approximation that overbarr^2 = 52 n^*^4  Z^2 which neglects the dependence on the angular momentum quantum number, l, in the the form given by Warner 1967 (the earliest english work reporting the Unsoeld result).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.approximate_line_strength-Tuple{Korg.Line, Any}","page":"Developer Documentation","title":"Korg.approximate_line_strength","text":"approximate_line_strength(line::Line, T)\n\nApproximate the line strength (log10(gfλ) - θχ, in arbitrary units) of a line at temperature T (K).  This can be used to very quickly filter a linelist, and is used to filter very large molecular linelists from ExoMol (see load_ExoMol_linelist).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.approximate_radiative_gamma-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.approximate_radiative_gamma","text":"approximate_radiative_gamma(wl, log_gf)\n\nApproximate radiate broadening parameter.  When using this, make sure that log_gf is the true value (not adjusted for isotopic abundance).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.autodiffable_conv-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.autodiffable_conv","text":"autodiffable_conv(f, g)\n\nCompute the convolution of two vectors, f and g. This is a wrapped version of DSP.conv that handles ForwardDiff.Dual types via the chain rule.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.blackbody-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.blackbody","text":"blackbody(T, λ)\n\nThe value of the Planck blackbody function for temperature T at wavelength λ [cm].\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.bracket_line_interpolator","page":"Developer Documentation","title":"Korg.bracket_line_interpolator","text":"bracket_line_interpolator(m, λ₀, T, nₑ, ξ, λmin, λmax; kwargs...)\n\nThis routine numerically convolves the two components of the Brackett line stark profile (quasistatic/Holtsmark and impact) and the doppler profile, if necessary.  It returns a pair containing the interpolator and the distance from the line center at which it is defined.\n\nArguments\n\nm: the principle quantum number of the upper level\nλ₀: the line center in Å\nT: the temperature [K]\nnₑ: the electron number density [cm^-3]\nξ: the microturbulence [cm/s]\nλmin: the minimum wavelength at which the profile should be computed (used to avoid calculations outside the required region)\nλmax: the maximum wavelength at which the profile should be computed\n\nKeyword Arguments\n\nn_wavelength_points (default=201): the number of wavelengths at which to sample the profiles quasistatic profiles to be convolved.\nwindow_size (default=5): the size of the wavelength range over which the profiles should be calculated, in units of the characteristic profile width\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.brackett_line_stark_profiles-NTuple{5, Any}","page":"Developer Documentation","title":"Korg.brackett_line_stark_profiles","text":"brackett_line_stark_profiles(m, λs, λ₀, T, nₑ)\n\nStark-broadened line profile (specialized to Brackett series).  Translated and heavily adapted from HLINOP.f by Barklem, who adapted it from Peterson and Kurucz.  Mostly follows Griem 1960, and Griem 1967.  Ions and distant electrons have E fields which can be treated quasi-statically, leading to a Holtsmark broadening profile.\n\nReturns a pair of vectors containing the impact and quasistatic profiles, respectively.\n\nArguents:\n\nm: the upper level of the transition\nλs: the wavelengths at which to calculate the profile [cm]\nλ₀: the line center [cm]\nT: temperature [K]\nnₑ: electron number density [cm^-3]\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.brackett_oscillator_strength-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.brackett_oscillator_strength","text":"brackett_oscillator_strength(n, m)\n\nThe oscillator strength of the transition from the 4th to the mth energy level of hydrogen. Adapted from HLINOP.f by Peterson and Kurucz.\n\nComparison to the values in Goldwire 1968 indicates that this is accurate to 10^-4 for the Brackett series.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.chemical_equilibrium-NTuple{7, Any}","page":"Developer Documentation","title":"Korg.chemical_equilibrium","text":"chemical_equilibrium(T, nₜ, nₑ, absolute_abundances, ionization_energies, \n                     partition_fns, log_equilibrium_constants; x0=nothing)\n\nIteratively solve for the number density of each species. Returns a pair containing the electron number density and Dict mapping species to number densities.\n\narguments:\n\nthe temperature, T, in K\nthe total number density nₜ\nthe electron number density nₑ\nA Dict of absolute_abundances, NX/Ntotal\na Dict of ionization energies, ionization_energies.  The keys of act as a list of all atoms.\na Dict of partition functions, partition_fns\na Dict of log molecular equilibrium constants, log_equilibrium_constants, in partial pressure form. The keys of equilibrium_constants act as a list of all molecules.\n\nkeyword arguments:\n\nx0 (default: nothing) is an initial guess for the solution (in the format internal to chemical_equilibrium). If not supplied, a good guess is computed by neglecting molecules.\nelectron_number_density_warn_threshold (default: 0.1) is the fractional difference between the calculated electron number density and the model atmosphere electron number density at which a warning is issued.\nelectron_number_density_warn_min_value (default: 1e-4) is the minimum value of the electron number density at which a warning is issued.  This is to avoid warnings when the electron number density is very small.\n\nThe system of equations is specified with the number densities of the neutral atoms as free parameters.  Each equation specifies the conservation of a particular species, e.g. (simplified)\n\nn(O) = n(CO) + n(OH) + n(O I) + n(O II) + n(O III).\n\nIn this equation:\n\nn(O), the number density of oxygen atoms in any form comes absolute_abundances and the total number density (supplied later)\nn(O I) is a free parameter.  The numerical solver is varying this to satisfy the system of equations.\nn(O II), and n(O III) come from the Saha (ionization) equation given n(O I)\nn(CO) and n(OH) come from the molecular equilibrium constants K, which are precomputed over a range of temperatures.\n\nEquilibrium constants are defined in terms of partial pressures, so e.g.\n\nK(OH)  ==  (p(O) p(H)) / p(OH)  ==  (n(O) n(H)) / n(OH)) kT\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.compute_LSF_matrix-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.compute_LSF_matrix","text":"compute_LSF_matrix(synth_wls, obs_wls, R; kwargs...)\n\nConstruct a sparse matrix, which when multiplied with a flux vector defined over wavelenths synth_wls, applies a gaussian line spead function (LSF) and resamples to the wavelenths obswls.\n\nArguments\n\nsynth_wls: the synthesis wavelengths in any form recognized by synthesize, e.g. a pair containing a lower and upper bound in Å, a vector of pairs, or a vector of Julia range objects.\nobs_wls: the wavelengths of the observed spectrum\nR: the resolving power, R = lambdaDeltalambda\n\nKeyword Arguments\n\nwindow_size (default: 4): how far out to extend the convolution kernel in units of the LSF width (σ, not HWHM)\nverbose (default: true): whether or not to emit warnings and information to stdout/stderr.\nstep_tolerance: the maximum difference between adjacent wavelengths in synth_wls for them to be considered linearly spaced.  This is only used if synth_wls is a vector of wavelengths rather than a range or vector or ranges.\n\nFor the best match to data, your wavelength range should extend a couple Deltalambda outside the region you are going to compare.\n\nKorg.apply_LSF can apply an LSF to a single flux vector efficiently. This function is relatively slow, but one the LSF matrix is constructed, convolving spectra to observational resolution via matrix multiplication is fast.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.contained-Tuple{Real, Korg.Interval}","page":"Developer Documentation","title":"Korg.contained","text":"contained(value, interval)\n\nReturns whether value is contained by interval.\n\nExamples\n\njulia> contained(0.5, Interval(1.0, 10.0))\nfalse\n\njulia> contained(5.0, Interval(1.0, 10.0))\ntrue\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.contained_slice-Tuple{AbstractVector, Korg.Interval}","page":"Developer Documentation","title":"Korg.contained_slice","text":"contained_slice(vals, interval)\n\nReturns a range of indices denoting the elements of vals (which are assumed to be sorted in increasing order) that are contained by interval. When no entries are contained by interval, this returns (1,0) (which is a valid empty slice).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.doppler_width-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.doppler_width","text":"doppler_width(λ₀ T, m, ξ)\n\nThe standard deviation of of the doppler-broadening profile.  In standard spectroscopy texts, the Doppler width often refers to σ√2, but this is σ\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.eachfreq-Tuple{Korg.Wavelengths}","page":"Developer Documentation","title":"Korg.eachfreq","text":"eachfreq(wls::Wavelengths)\n\nReturns an array of the frequencies corresponding to the wavelengths in wls (in Hz). They are sorted, i.e. in reverse order of the wavelengths.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.eachwindow-Tuple{Korg.Wavelengths}","page":"Developer Documentation","title":"Korg.eachwindow","text":"eachwindows(wls::Wavelengths)\n\nReturns an iterator over the wavelength ranges (λ_low, λ_hi) in wls (in cm, not Å).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.exponential_integral_1-Tuple{Any}","page":"Developer Documentation","title":"Korg.exponential_integral_1","text":"exponential_integral_1(x)\n\nCompute the first exponential integral, E1(x).  This is a rough approximation lifted from Kurucz's VCSE1F. Used in brackett_line_profile.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.filter_linelist-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.filter_linelist","text":"filter_linelist(linelist, wls, line_buffer)\n\nReturn a new linelist containing only lines within the provided wavelength ranges.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.format_A_X-Union{Tuple{}, Tuple{R2}, Tuple{R1}, Tuple{V}, Tuple{K}, Tuple{R1, R2}, Tuple{R1, R2, AbstractDict{K, V}}} where {K, V, R1<:Real, R2<:Real}","page":"Developer Documentation","title":"Korg.format_A_X","text":"format_A_X(default_metals_H, default_alpha_H, abundances; kwargs... )\n\nReturns a 92 element vector containing abundances in A(X) (log_10(XH) + 12) format for elements from hydrogen to uranium.\n\nArguments\n\nYou can specify abundance with these positional arguments.  All are optional, but if default_alpha_H is provided, default_metals_H must be as well.\n\ndefault_metals_H (default: 0), i.e. [metals/H] is the log_10 solar-relative abundance of elements heavier than He. It is overridden by default_alpha and abundances on a per-element basis.\ndefault_alpha_H (default: same as default_metals_H), i.e. [alpha/H] is the log_10 solar-relative abundance of the alpha elements (See alpha_elements, below). It is overridden by abundances on a per-element basis.\nabundances is a Dict mapping atomic numbers or symbols to [X/H] abundances.  (Set solar_relative=false to use A(X) abundances instead.) These override default_metals_H. This is the only way to specify an abundance of He that is non-solar.\n\nKeyword arguments\n\nsolar_relative (default: true): When true, interpret abundances as being in [X/H] (log_10 solar-relative) format.  When false, interpret them as A(X) abundances, i.e. A(x) = log_10(n_Xn_mathrmH) + 12, where n_X is the number density of X. Note that abundances not specified default to the solar value still depend on the solar value, as they are set according to default_metals_H and default_alpha_H.\nsolar_abundances (default: Korg.asplund_2020_solar_abundances) is the set of solar abundances to use, as a vector indexed by atomic number. Korg.asplund_2009_solar_abundances and Korg.grevesse_2007_solar_abundances are also provided for convenience.\nalpha_elements (default: Korg.default_alpha_elements): vector of atomic numbers of the alpha elements. (Useful since conventions vary.)\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_APOGEE_DR17_linelist-Tuple{}","page":"Developer Documentation","title":"Korg.get_APOGEE_DR17_linelist","text":"get_APOGEE_DR17_linelist(; include_water=true)\n\nThe APOGEE DR 17 linelist.  It ranges from roughly 15,000 Å to 17,000 Å.  It is nearly the same at the DR 16 linelist described in Smith+ 2021.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_GALAH_DR3_linelist-Tuple{}","page":"Developer Documentation","title":"Korg.get_GALAH_DR3_linelist","text":"get_GALAH_DR3_linelist()\n\nThe GALAH DR 3 linelist (also used for DR 4). It ranges from roughly 4,675 Å to 7,930 Å. This linelist is based on, but distinct from Heiter 2021. See Buder et al. 2021 for details.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_GES_linelist-Tuple{}","page":"Developer Documentation","title":"Korg.get_GES_linelist","text":"get_GES_linelist()\n\nThe Gaia-ESO survey linelist from Heiter et al. 2021.  This linelist contains > 15 million lines, which means that it can take a while to synthesize spectra.  If you don't need molecular lines, you can set include_molecules=false to speed things up.\n\nKeyword Arguments\n\ninclude_molecules (default: true): whether to include molecular lines.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_VALD_solar_linelist-Tuple{}","page":"Developer Documentation","title":"Korg.get_VALD_solar_linelist","text":"get_VALD_solar_linelist()\n\nGet a VALD \"extract stellar\" linelist produced at solar parameters, with the \"threshold\" value set to 0.01.  It was downloaded on 2021-05-20. It is intended to be used for quick tests only.\n\nIf you use this in a paper, please cite VALD appropriately.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_alpha_5000_linelist-Tuple{Any}","page":"Developer Documentation","title":"Korg.get_alpha_5000_linelist","text":"get_alpha_5000_linelist(linelist)\n\nArguments:\n\nlinelist: the synthesis linelist, which will be used if it covers the 5000 Å region.\n\nReturn a linelist which can be used to calculate the absorption at 5000 Å, which is required for the standard radiative transfer scheme.  If the provided linelist doesn't contain lines near 5000 Å, use the built-in one. (see _load_alpha_5000_linelist)\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_alpha_H-Tuple{Any}","page":"Developer Documentation","title":"Korg.get_alpha_H","text":"get_alpha_H(A_X; kwargs...)\n\nCalculate [α/H] given a vector, A_X of absolute abundances, A(X) = log_10(n_αn_mathrmH). Here, the alpha elements are defined to be O, Ne, Mg, Si, S, Ar, Ca, Ti.  See also get_metals_H.\n\nKeyword Arguments\n\nsolar_abundances (default: Korg.asplund_2020_solar_abundances) is the set of solar abundances to use, as a vector indexed by atomic number. Korg.asplund_2009_solar_abundances, Korg.grevesse_2007_solar_abundances, and Korg.magg_2022_solar_abundances are also provided for convenience.\nalpha_elements (default: Korg.default_alpha_elements): vector of atomic numbers of the alpha elements. (Useful since conventions vary.)\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_atom-Tuple{Korg.Formula}","page":"Developer Documentation","title":"Korg.get_atom","text":"get_atom(x)\n\nReturns the atomic number of an atomic Korg.Species or Korg.Formula.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_atoms-Tuple{Korg.Formula}","page":"Developer Documentation","title":"Korg.get_atoms","text":"get_atoms(x)\n\nReturns an array view containing the atomic number of each atom that makes up the formula or species x.  E.g. get_atoms(Korg.species\"H2O\") yields [1, 1, 8].\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_electron_number_densities-Tuple{Korg.ModelAtmosphere}","page":"Developer Documentation","title":"Korg.get_electron_number_densities","text":"getelectronnumberdensities(atm::ModelAtmosphere) = [l.electronnumber_density for l in atm.layers]\n\nThis is a convienince functions for making plots, etc.  Note that it doesn't access quantities in a memory-efficient order.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_gas_pressures-Tuple{Any}","page":"Developer Documentation","title":"Korg.get_gas_pressures","text":"get_gas_pressures(atm::ModelAtmosphere)\n\nThis is a convienince functions for making plots, etc.  Note that it doesn't access quantities in a memory-efficient order.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_log_nK-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.get_log_nK","text":"get_log_nK(mol, T, log_equilibrium_constants)\n\nGiven a molecule, mol, a temperature, T, and a dictionary of log equilibrium constants in partial pressure form, return the base-10 log equilibrium constant in number density form, i.e. log10(nK) where nK = n(A)n(B)/n(AB).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_mass-Tuple{Korg.Formula}","page":"Developer Documentation","title":"Korg.get_mass","text":"get_mass(f::Formula)\n\nReturns the mass [g] of f.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_metals_H-Tuple{Any}","page":"Developer Documentation","title":"Korg.get_metals_H","text":"get_metals_H(A_X; kwargs...)\n\nCalculate [metals/H] given a vector, A_X of absolute abundances, A(X) = log_10(n_Mn_mathrmH). See also get_alpha_H.\n\nKeyword Arguments\n\nsolar_abundances (default: Korg.asplund_2020_solar_abundances) is the set of solar abundances to use, as a vector indexed by atomic number. Korg.asplund_2009_solar_abundances, Korg.grevesse_2007_solar_abundances, and Korg.magg_2022_solar_abundances are also provided for convenience.\nignore_alpha (default: true): Whether or not to ignore the alpha elements when calculating [metals/H].  If true, [metals/H] is calculated using all elements heavier than He.  If false, then both carbon and the alpha elements are ignored.\nalpha_elements (default: Korg.default_alpha_elements): vector of atomic numbers of the alpha elements. (Useful since conventions vary.)\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_number_densities-Tuple{Korg.ModelAtmosphere}","page":"Developer Documentation","title":"Korg.get_number_densities","text":"get_number_densities(atm::ModelAtmosphere) = [l.number_density for l in atm.layers]\n\nThis is a convienince functions for making plots, etc.  Note that it doesn't access quantities in a memory-efficient order.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_tau_5000s-Tuple{Korg.ModelAtmosphere}","page":"Developer Documentation","title":"Korg.get_tau_5000s","text":"get_tau_5000s(atm::ModelAtmosphere) = [l.tau_5000 for l in atm.layers]\n\nThis is a convienince functions for making plots, etc.  Note that it doesn't access quantities in a memory-efficient order.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_temps-Tuple{Korg.ModelAtmosphere}","page":"Developer Documentation","title":"Korg.get_temps","text":"get_temps(atm::ModelAtmosphere) = [l.temp for l in atm.layers]\n\nThis is a convienince functions for making plots, etc.  Note that it doesn't access quantities in a memory-efficient order.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.get_zs-Tuple{Korg.ModelAtmosphere}","page":"Developer Documentation","title":"Korg.get_zs","text":"get_zs(atm::ModelAtmosphere) = [l.z for l in atm.layers]\n\nThis is a convienince functions for making plots, etc.  Note that it doesn't access quantities in a memory-efficient order.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.greim_1960_Knm-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.greim_1960_Knm","text":"greim_1960_Knm(n, m)\n\nKnm constants as defined by Griem 1960 for the long range Holtsmark profile. This function includes only the values for Brackett lines.\n\nK_nm = C_nm 2 π c  λ^2 where C_nm F = Δω and F is the ion field. See Griem 1960 EQs 7 and 12. This works out to K_nm = λF.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.holtsmark_profile-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.holtsmark_profile","text":"holtsmark_profile(β, P)\n\nCalculates the Holtsmark profile for broadening of hydrogen lines by quasistatic charged particles. Adapted from SOFBET in HLINOP by Peterson and Kurucz. Draws heavily from Griem 1960.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.hummer_mihalas_U_H-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.hummer_mihalas_U_H","text":"hummer_mihalas_U_H(T, nH, nHe, ne)\n\n!!!note This is experimental, and not used by Korg for spectral synthesis.\n\nCalculate the partition function of neutral hydrogen using the occupation probability formalism from Hummer and Mihalas 1988.  See hummer_mihalas_w for details.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.hummer_mihalas_w-NTuple{5, Any}","page":"Developer Documentation","title":"Korg.hummer_mihalas_w","text":"hummer_mihalas_w(T, n_eff, nH, nHe, ne; use_hubeny_generalization=false)\n\nCalculate the correction, w, to the occupation fraction of a hydrogen energy level using the occupation probability formalism from Hummer and Mihalas 1988, optionally with the generalization by Hubeny+ 1994.  (Sometimes Daeppen+ 1987 is cited instead, but H&M seems to be where the theory originated. Presumably it was delayed in publication.)\n\nThe expression for w is in equation 4.71 of H&M.  K, the QM correction used in defined in equation 4.24. Note that H&M's \"N\"s are numbers (not number densities), and their \"V\" is volume.  These quantities apear only in the form N/V, so we use the number densities instead.\n\nThis is based partially on Paul Barklem and Kjell Eriksson's WCALC fortran routine (part of HBOP.f), which is used by (at least) Turbospectrum and SME.  As in that routine, we do consider hydrogen and helium as the relevant neutral species, and assume them to be in the ground state.  All ions are assumed to have charge 1.  Unlike that routine, the generalization to the formalism from Hubeny+ 1994 is turned off by default because I haven't closely checked it.  The difference effects the chargedterm only, and temperature is only used when `usehubeny_generalizationis set totrue`.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.hydrogen_line_absorption!-Tuple{Any, Korg.Wavelengths, Vararg{Any, 7}}","page":"Developer Documentation","title":"Korg.hydrogen_line_absorption!","text":"hydrogen_line_absorption!(αs, λs, T, nₑ, nH_I, UH_I, ξ, window_size; kwargs...)\n\nCalculate contribution to the the absorption coefficient, αs, from hydrogen lines in units of cm^-1, at wavelengths λs (a vector of ranges).\n\nUses profiles from Stehlé & Hutcheon (1999), which include Stark and Doppler broadening. For Halpha, Hbeta, and Hgamma, the p-d approximated profiles from Barklem, Piskunovet, and O'Mara 2000 are added to the absortion coefficient.  This \"convolution by summation\" is inexact, but true convolution is expensive.\n\nArguments:\n\nαs: the absorption coefficient [cm^-1] vector into which to add the line absorption\nλs: the wavelengths at which to calculate the absorption [cm]\nT: temperature [K]\nnₑ: electron number density [cm^-3]\nnH_I: neutral hydrogen number density [cm^-3]\nUH_I: the value of the neutral hydrogen partition function\nξ: microturbulent velocity [cm/s]. This is only applied to Hα-Hγ.  Other hydrogen lines profiles are dominated by stark broadening, and the stark broadened profiles are pre-convolved with a doppler profile.\nwindow_size: the max distance from each line center [cm] at which to calculate the Stark and self-broadening profiles absorption for Hα-Hγ (those dominated by self-broadening).\n\nKeyword arguments:\n\nstark_profiles (default: Korg._hline_stark_profiles): tables from which to interpolate Stark profiles\nuse_MHD: whether or not to use the Mihalas-Daeppen-Hummer formalism to adjust the occupation probabilities of each hydrogen orbital for plasma effects.  Default: true.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.interpolate_marcs-Tuple{Any, Any, AbstractVector{<:Real}}","page":"Developer Documentation","title":"Korg.interpolate_marcs","text":"interpolate_marcs(Teff, logg, A_X; kwargs...)\ninterpolate_marcs(Teff, logg, m_H=0, alpha_m=0, C_m=0; kwargs...)\n\nReturns a model atmosphere computed by interpolating models from MARCS ((Gustafsson+ 2008)[https://ui.adsabs.harvard.edu/abs/2008A&A...486..951G/abstract]). Along with Teff and logg, the atmosphere is specified by m_H, alpha_m, and C_m, which can be automatically determined from an A_X abundance vector (the recommended method, see format_A_X). Note that the MARCS atmosphere models were constructed with the Grevesse+ 2007 solar abundances (Korg.grevesse_2007_solar_abundances). This is handled automatically when A_X is provided.\n\ninterpolate_marcs uses three different interpolation schemes for different stellar parameter regimes. In the standard case the model atmosphere grid is the one generated for SDSS, transformed and linearly interpolated. For cool dwarfs (Teff ≤ 4000 K, logg ≥ 3.5), the grid is resampled onto unchanging tau_5000 values and interpolated with a cubic spline. For low-metallicity models (-5 ≤ m_H < -2.5), a grid of standard composition (i.e. fixed alpha and C) atmospheres is used.  (The microturbulence is 1km/s for dwarfs and 2km/s for giants and the mass for spherical models is 1 solar mass.) The interpolation method is the same as in the standard case. See Wheeler+ 2024 for more details and a discussion of errors introduced by model atmosphere interpolation. (Note that the cubic scheme for cool dwarfs is referred to as not-yet-implemented in the paper but is now available.)\n\nkeyword arguments\n\nspherical: whether or not to return a ShellAtmosphere (as opposed to a PlanarAtmosphere).  By default true when logg < 3.5.\nsolar_abundances: (default: grevesse_2007_solar_abundances) The solar abundances to use when A_X is provided instead of M_H, alpha_M, and C_M. The default is chosen to match that of the atmosphere grid, and if you change it you are likely trying to do something else.\nclamp_abundances: (default: false) allowed only when specifying A_X. Whether or not to clamp the abundance parameters to be within range to avoid throwing an out of bounds error.\nperturb_at_grid_values (default: true): whether or not to add or a subtract a very small number to each parameter which is exactly at a grid value. This prevents null derivatives, which can cause problems for minimizers.\nresampled_cubic_for_cool_dwarfs (default: true): whether or not to used specialized method for cool dwarfs.\narchives: A tuple containing the atmosphere grids to use.  For testing purposes.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.interpolate_molecular_cross_sections!-Union{Tuple{R}, Tuple{AbstractArray{R}, Any, Korg.Wavelengths, Any, Any, Any}} where R<:Real","page":"Developer Documentation","title":"Korg.interpolate_molecular_cross_sections!","text":"interpolate_molecular_cross_sections!(α, molecular_cross_sections, λs, Ts, vmic, number_densities)\n\nInterpolate the molecular cross-sections and add them to the total absorption coefficient α. See MolecularCrossSection for more information.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.inverse_gaussian_density-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.inverse_gaussian_density","text":"inverse_gaussian_density(ρ, σ)\n\nCalculate the inverse of a (0-centered) Gaussian PDF with standard deviation σ, i.e. the value of x for which ρ = exp(-0.5 x^2/σ^2}) / √[2π], which is given by σ √[-2 log (√[2π]σρ)].  Returns 0 when ρ is larger than any value taken on by the PDF.\n\nSee also: inverse_lorentz_density.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.inverse_lorentz_density-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.inverse_lorentz_density","text":"inverse_lorentz_density(ρ, γ)\n\nCalculate the inverse of a (0-centered) Lorentz PDF with width γ, i.e. the value of x for which ρ = 1 / (π γ (1 + x^2/γ^2)), which is given by √[γ/(πρ) - γ^2]. Returns 0 when ρ is larger than any value taken on by the PDF.\n\nSee also: inverse_gaussian_density.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ismolecule-Tuple{Korg.Formula}","page":"Developer Documentation","title":"Korg.ismolecule","text":"ismolecule(f::Formula)\n\ntrue when f is composed of more than one atom\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.lazy_multilinear_interpolation-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.lazy_multilinear_interpolation","text":"lazy_multilinear_interpolation(params, nodes, grid; kwargs...)\n\nThis function is does multidimensional linear interpolation on a grid where the first two dimensions represent the values being interpolated.  In other words, it interpolates matrices. It is written to minimize the number of reads from the grid, and access things in an efficient order. It is much faster than Interpolations.linear_interpolation when applied to memory-mapped grids. At present it is used only for model atmosphere and departure coefficient interpolation.\n\nSee also: interpolate_marcs, Korg.CubicSplines.CubicSpline\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.line_absorption!-Tuple{Any, Any, Korg.Wavelengths, Vararg{Any, 6}}","page":"Developer Documentation","title":"Korg.line_absorption!","text":"line_absorption!(α, linelist, λs, temp, nₑ, n_densities, partition_fns, ξ\n               ; α_cntm=nothing, cutoff_threshold=1e-3, window_size=20.0*1e-8)\n\nCalculate the opacity coefficient, α, in units of cm^-1 from all lines in linelist, at wavelengths λs [cm^-1].\n\nother arguments:\n\ntemp the temerature in K (as a vector, for multiple layers, if you like)\nn_densities, a Dict mapping species to absolute number density in cm^-3 (as a vector, if temp is a vector).\npartition_fns, a Dict containing the partition function of each species\nξ is the microturbulent velocity in cm/s (n.b. NOT km/s)\nα_cntm is as a callable returning the continuum opacity as a function of wavelength. The window within which a line is calculated will extend to the wavelength at which the Lorentz wings or Doppler core of the line are at cutoff_threshold * α_cntm[line.wl], whichever is greater.\n\nKeyword Arguments\n\ncuttoff_threshold (default: 3e-4): see α_cntm\ntasks_per_thread (default: 1): the number of tasks to run per Julia thread. This function is multithreaded over the lines in linelist.\nverbose (deprecated): no longer used.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.line_profile-NTuple{5, Real}","page":"Developer Documentation","title":"Korg.line_profile","text":"line_profile(λ₀, σ, γ, amplitude, λ)\n\nA voigt profile centered on λ₀ with Doppler width σ (NOT √[2] σ, as the \"Doppler width\" is often defined) and Lorentz HWHM γ evaluated at λ (cm).  Returns values in units of cm^-1.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.load_ExoMol_linelist-NTuple{5, Any}","page":"Developer Documentation","title":"Korg.load_ExoMol_linelist","text":"load_ExoMol_linelist(specs, states_file, transitions_file, upper_wavelength, lower_wavelength)\n\nLoad a linelist from ExoMol. Returns a vector of Lines, the same as read_linelist.\n\nArguments\n\nspec: the species, i.e. the molecule that the linelist is for\nstates_file: the path to the ExoMol states file\ntransitions_file: the path to the ExoMol, transitions file\nupper_wavelength: the upper limit of the wavelength range to load (Å)\nlower_wavelength: the lower limit of the wavelength range to load (Å)\n\nKeyword Arguments\n\nline_strength_cutoff: the cutoff for the line strength (default: -15) used to filter the linelist. See approximate_line_strength for more information.\nT_line_strength: the temperature (K) at which to evaluate the line strength (default: 3500.0)\n\nwarning: Warning\nThis functionality is in beta.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.load_atomic_partition_functions","page":"Developer Documentation","title":"Korg.load_atomic_partition_functions","text":"load_atomic_partition_functions()\n\nLoads saved tabulated values for atomic partition functions from disk. Returns a dictionary mapping species to interpolators over log(T).\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.load_exomol_partition_functions-Tuple{}","page":"Developer Documentation","title":"Korg.load_exomol_partition_functions","text":"load_exomol_partition_functions()\n\nLoads the exomol partition functions for polyatomic molecules from the HDF5 archive. Returns a dictionary mapping species to interpolators over log(T).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.merge_bounds","page":"Developer Documentation","title":"Korg.merge_bounds","text":"merge_bounds(bounds, merge_distance=0.0)\n\nSort a vector of lower-bound, upper-bound pairs and merge overlapping ranges.\n\nReturns a pair containing:\n\na vector of merged bounds\na vector of vectors of indices of the original bounds which were merged into each merged bound\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.merge_close_lines-Tuple{Any}","page":"Developer Documentation","title":"Korg.merge_close_lines","text":"merge_close_lines(linelist; merge_distance=0.2)\n\nProduce a list of the species and wavelengths of the lines in linelist, merging lines of the same species that are within merge_distance (default: 0.2 Å).  This is useful for labeling lines in a plot after running prune_linelist.\n\nArguments\n\nlinelist: the linelist (a vector of Line objects)\n\nKeyword Arguments\n\nmerge_distance=0.2: The maximum distance in Å between lines of the same species to be merged into a single entry\n\nReturns\n\nA vector of tuples (wl, wl_low, wl_high, species) where wl is gf-weighted wavelength of each set of merged lines (Å), wl_low and wl_high are their highest and lowest wavelength, and species is a string (not a Korg.Species) identifying the species of the line. These will be in wavelength order.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.n_atoms-Tuple{Korg.Formula}","page":"Developer Documentation","title":"Korg.n_atoms","text":"n_atoms(x)\n\nThe number of atoms in the Korg.Species or Korg.Formula x.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.prune_linelist-Tuple{Any, Any, Any, Vararg{Any}}","page":"Developer Documentation","title":"Korg.prune_linelist","text":"prune_linelist(atm, linelist, A_X, wls...; threshold=1.0, sort=true, synthesis_kwargs...)\n\nReturn the vector containing the strongest lines in  linelist, (optionally) sorted by approximate equivalent width.\n\nArguments\n\natm: the atmosphere model\nlinelist: the linelist (a vector of Line objects)\nA_X: the abundance of each element (see format_A_X)\nwls...: the wavelength ranges to synthesize over.  These are specified the same way as the wls for synthesize.\n\nKeyword Arguments\n\nthreshold=0.1: The threshold ratio in the line center absorption to the continuum absorption computed at the photosphere for a line to be included in the returned list. 0.1 is a reasonable default for getting a sense of what might be measurable in a high-res, high-quality spectrum, but it should not be used to create a linelist for synthesis.\nsort_by_EW=true: If true, the returned linelist will be sorted by approximate reduced equivalent width.  If false, the linelist will be in wavelength order. Leaving the list in wavelength order is much faster, but sorting by strength is useful for visualizing the strongest lines.\nverbose=true: If true, a progress bar will be displayed while measuring the EWs. All other kwargs are passed to internal calls to synthesize.\nmax_distance=0.0, how far from wls lines can be (in Å) before they are excluded from the returned list.\n\ncaution: Caution\nWhile this function can be used to prune a linelist for synthesis, the default behavior too aggressive for this purpose.  Set a much lower threshold (e.g. threshold=1e-4) and use sort_by_EW=false if you are pruning the linelist to speedup synthesis.  Note that Korg will dynamically choose which lines to include even if you use a large linelist (see the line_cutoff_threshold keyword argument to synthesize).\n\nSee also merge_close_lines if you are using this for plotting.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_Barklem_Collet_logKs-Tuple{Any}","page":"Developer Documentation","title":"Korg.read_Barklem_Collet_logKs","text":"read_Barklem_Collet_logKs(fname)\n\nReads the equilibrium constants from the HDF5 file produced by the Barklem and Collet 2016 paper. Returns a Dict from Korg.Species to Korg.CubicSplines from ln(T) to log10(K).\n\nAs recommended by Aquilina+ 2024, we modify the C2 equilibrium constant reflect the dissociation energy reported by Visser+ 2019.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_Barklem_Collet_table-Tuple{Any}","page":"Developer Documentation","title":"Korg.read_Barklem_Collet_table","text":"function read_Barklem_Collet_table(fname; transform=identity)\n\nConstructs a Dict holding tables containing partition function or equilibrium constant values across ln(temperature).  Applies transform (which you can use to, e.g. change units) to each example.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_linelist-Tuple{String}","page":"Developer Documentation","title":"Korg.read_linelist","text":"read_linelist(filename; format=\"vald\", isotopic_abundances=Korg.isotopic_abundances)\n\nParse a linelist file, returning a vector of Lines.\n\nThe format keyword argument can be used to specify one of these linelist formats (default: \"vald\"):\n\n\"vald\" for a VALD linelist. These can be either \"short\" or \"long\" format, \"extract all\" or \"extract stellar\".  Air wavelengths will automatically be converted into vacuum wavelengths, and energy levels will be automatically converted from cm^-1 to eV.\n\"kurucz\" for an atomic or molecular Kurucz linelist (format=kurucz_vac if it uses vacuum wavelengths; be warned that Korg will not assume that wavelengths are vacuum below 2000 Å),\n\"moog\" for a MOOG linelist (doesn't support broadening parameters or dissociation energies, assumed to be in vacuum wavelengths).\n\"moog_air\" for a MOOG linelist in air wavelengths.\n\"turbospectrum\" for a Turbospectrum linelist in air wavelengths. Note that Korg doesn't make use of the (optional) orbital angular momentum quantum number, l, for the upper or lower levels, so it won't fall back on generic ABO recipes when the ABO parameters are not available. Korg's interpretation of the fdamp parameter is also slightly different from Turbospectrum's. See the documentation of the vdW parameter of Line for details.  Korg will error if encounters an Unsoeld fudge factor, which it does not support.\n\"turbospectrum_vac\" for a Turbospectrum linelist in vacuum wavelengths.\n\"korg\" for a Korg linelist (saved with hdf5). If the filename ends in .h5, this will be used by default.\n\nFor VALD and Turbospectrum linelists with isotope information available, Korg will scale log gf values by isotopic abundance (unless VALD has already pre-scaled them), using isotopic abundances from NIST ([Korg.isotopicabundances]). To use custom isotopic abundances, just pass `isotopicabundances` with the same structure: a dict mapping atomic number to a dict mapping from atomic weight to abundance.\n\nBe warned that for linelists which are pre-scaled for isotopic abundance, the estimation of radiative broadening from log(gf) is not accurate.\n\nSee also: load_ExoMol_linelist, save_linelist.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_model_atmosphere-Tuple{AbstractString}","page":"Developer Documentation","title":"Korg.read_model_atmosphere","text":"read_model_atmosphere(filename)\n\nParse the provided model atmosphere file in MARCS \".mod\" format.  Returns either a PlanarAtmosphere or a ShellAtmosphere.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.read_molecular_cross_section-Tuple{Any}","page":"Developer Documentation","title":"Korg.read_molecular_cross_section","text":"read_molecular_cross_section(filename)\n\nRead a precomputed molecular cross-section from a file created by save_molecular_cross_section. See also MolecularCrossSection.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.saha_ion_weights-Tuple{Any, Any, Any, Any, Dict}","page":"Developer Documentation","title":"Korg.saha_ion_weights","text":"saha_ion_weights(T, nₑ, atom, ionization_energies, partition_functions)\n\nReturns (wII, wIII), where wII is the ratio of singly ionized to neutral atoms of a given element, and wIII is the ration of doubly ionized to neutral atoms.\n\narguments:\n\ntemperature T [K]\nelectron number density nₑ [cm^-3]\natom, the atomic number of the element\nionization_energies is a collection indexed by integers (e.g. a Vector) mapping elements' atomic numbers to their first three ionization energies\npartition_funcs is a Dict mapping species to their partition functions\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.save_linelist-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.save_linelist","text":"save_linelist(path, linelist)\n\nSave a Korg linelist (a Vector{Line}) to an HDF5 file which can be read by read_linelist.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.save_molecular_cross_section-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.save_molecular_cross_section","text":"save_molecular_cross_section(filename, cross_section)\n\nSave a precomputed molecular cross-section to a file. See also MolecularCrossSection, read_molecular_cross_section.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.scaled_stark-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.scaled_stark","text":"the stark broadening gamma scaled acording to its temperature dependence\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.scaled_vdW-Union{Tuple{F}, Tuple{Tuple{F, F}, Any, Any}} where F<:Real","page":"Developer Documentation","title":"Korg.scaled_vdW","text":"scaled_vdW(vdW, m, T)\n\nThe vdW broadening gamma scaled acording to its temperature dependence, using either simple scaling or ABO. See Anstee & O'Mara (1995) or Paul Barklem's notes for the definition of the ABO γ.\n\nvdW should be either γ_vdW evaluated at 10,000 K, or tuple containing the ABO params (σ, α). The species mass, m, is ignored in the former case.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.setup_ionization_energies","page":"Developer Documentation","title":"Korg.setup_ionization_energies","text":"setup_ionization_energies([filename])\n\nParses the table of ionization energies and returns it as a dictionary mapping elements to their ionization energies, [χ₁, χ₂, χ₃] in eV.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.setup_partition_funcs_and_equilibrium_constants-Tuple{}","page":"Developer Documentation","title":"Korg.setup_partition_funcs_and_equilibrium_constants","text":"setup_partition_funcs_and_equilibrium_constants()\n\nReturns two dictionaries. One holding the default partition functions, and one holding the default log10 equilibrium constants.\n\nDefault partition functions\n\nThe partition functions are custom (calculated from NIST levels) for atoms, from Barklem & Collet 2016 for diatomic molecules, and from exomol for polyatomic molecules. For each molecule, we include only the most abundant isotopologue.\n\nNote than none of these partition functions include plasma effects, e.g. via the Mihalas Hummer Daeppen occupation probability formalism. They are for isolated species. This can lead to a couple percent error for neutral alkalis and to greater errors for hydrogen in some atmospheres, particularly those of hot stars.\n\nDefault equilibrium constants\n\nMolecules have equilibrium constants in addition to partition functions.  For the diatomics, these are provided by Barklem and Collet, which extensively discusses the dissociation energies.  For polyatomics, we calculate these ourselves, using atomization energies calculated from the enthalpies of formation at 0K from NIST's CCCDB.\n\nKorg's equilibrium constants are in terms of partial pressures, since that's what Barklem and Collet provide.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.sigma_line-Tuple{Real}","page":"Developer Documentation","title":"Korg.sigma_line","text":"sigma_line(wl)\n\nThe cross-section (divided by gf) at wavelength wl in Ångstroms of a transition for which the product of the degeneracy and oscillator strength is 10^log_gf.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.subspectrum_indices-Tuple{Korg.Wavelengths}","page":"Developer Documentation","title":"Korg.subspectrum_indices","text":"subspectrum_indices(wls::Wavelengths)\n\nReturns a vector of Julia ranges, which can be used to index into the full spectrum to get the sub-spectrum corresponding to each wavelength range in wls.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.synth-Tuple{}","page":"Developer Documentation","title":"Korg.synth","text":"synth(kwargs...)\n\nThis function creates a synthetic spectrum. It's easier to use than synthesize, but it gives you less control. Unlike synthesize, it returns a tuple of (wavelengths, rectified_flux, cntm) (Wavelength in Å, rectified flux as a unitless number between 0 and 1, and continuum in erg/s/cm^5).  Korg.synth also provides shortcuts for some ways you might want to post-process the spectrum (applying a LSF, rotation, etc).\n\nKeyword arguments\n\nTeff: effective temperature in K (default: 5000)\nlogg: surface gravity in cgs units (default: 4.5)\nm_H: metallicity, [metals/H], (default: 0.0) (See format_A_X for precisely how this is interpreted.)\nalpha_H: alpha enhancement, [α/H], (default: m_H) (See format_A_X for precisely how this is interpreted.)\nAny atomic symbol (e.g. Fe or C) can be used to to specify a (solar relative, [X/H]) abundance. These override m_H and alpha_H. Specifying an individual abundance means that the true metallicity and alpha will not correspond precisely to the values of m_H and alpha_H. See format_A_X for details.\nlinelist: a linelist, (default: get_VALD_solar_linelist()). See also read_linelist.\nwavelengths: a tuple of the start and end wavelengths (default: (5000, 6000)), or a vector of (λstart, λstop) pairs. See Wavelengths for all the ways the wavelengths can be specified.\nrectify: whether to rectify (continuum normalize) the spectrum (default: true)\nR: resolution (default: Inf, no LSF applied). R can be a scalar, or a function from wavelength (in Å) to resolving power. See apply_LSF for details on how to do this manually.\nvsini: projected rotational velocity in km/s (default: 0). This calls apply_rotation under the hood.\nvmic: microturbulent velocity in km/s (default: 1.0).\nsynthesize_kwargs: additional keyword arguments pass to synthesize.\nformat_A_X_kwargs: additional keyword arguments pass to format_A_X.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.synthesize-Tuple{Korg.ModelAtmosphere, Any, AbstractVector{<:Real}, Vararg{Any}}","page":"Developer Documentation","title":"Korg.synthesize","text":"synthesize(atm, linelist, A_X, λ_start, λ_stop; kwargs... )\nsynthesize(atm, linelist, A_X, wavelength_ranges; kwargs... )\n\nCompute a synthetic spectrum. Returns a SynthesisResult.\n\nArguments\n\natm: the model atmosphere (see interpolate_marcs and read_model_atmosphere)\nlinelist: A vector of Lines (see read_linelist, get_APOGEE_DR17_linelist, get_GES_linelist, get_GALAH_DR3_linelist, and get_VALD_solar_linelist).\nA_X: a vector containing the A(X) abundances (log(X/H) + 12) for elements from hydrogen to uranium.  format_A_X can be used to easily create this vector.\nThe wavelengths at which to synthesize the spectrum.  They can be specified either as a pair (λstart, λstop), or as a list of pairs [(λstart1, λstop1), (λstart2, λstop2), ...] (or as an valid arugments to the Wavelengths constructor).\n\nExample\n\nTo synthesize a spectrum between 5000 Å and 5100 Å, with all metal abundances set to 0.5 dex less than the solar value except carbon, which we set to [C/H]=-0.25:\n\natm = read_model_atmosphere(\"path/to/atmosphere.mod\")\nlinelist = read_linelist(\"path/to/linelist.vald\")\nA_X = format_A_X(-0.5, Dict(\"C\" => -0.25))\nresult = synthesize(atm, linelist, A_X, 5000, 5100)\n\nOptional arguments:\n\nvmic (default: 0) is the microturbulent velocity, xi, in km/s.  This can be either a scalar value or a vector of values, one for each atmospheric layer.\nline_buffer (default: 10): the farthest (in Å) any line can be from the provided wavelength range before it is discarded.  If the edge of your window is near a strong line, you may have to turn this up.\ncntm_step (default 1): the distance (in Å) between point at which the continuum opacity is calculated.\nhydrogen_lines (default: true): whether or not to include H lines in the synthesis.\nuse_MHD_for_hydrogen_lines (default: true): whether or not to use the MHD occupation probability formalism for hydrogen lines. (MHD is always used for hydrogen bound-free absorption.)\nhydrogen_line_window_size (default: 150): the maximum distance (in Å) from each hydrogen line center at which to calculate its contribution to the total absorption coefficient.\nmu_values (default: 20): the number of μ values at which to calculate the surface flux, or a vector of the specific values to use when doing transfer in spherical geometry. If mu_points is an integer, the values are chosen per Gauss-Legendre integration. If they are specified directly, the trapezoid rule is used for the astrophysical flux. The default values is sufficient for accuracy at the 10^-3 level. Note that if you are using the default radiative transfer scheme, with a plane-parallel model atmosphere, the integral over μ is exact, so this parameter has no effect. The points and weights are returned in the mu_grid field of the output.\nline_cutoff_threshold (default: 3e-4): the fraction of the continuum absorption coefficient at which line profiles are truncated.  This has major performance impacts, since line absorption calculations dominate more syntheses.  Turn it down for more precision at the expense of runtime. The default value should effect final spectra below the 10^-3 level.\nelectron_number_density_warn_threshold (default: Inf): if the relative difference between the calculated electron number density and the input electron number density is greater than this value, a warning is printed.  By default, this warning is suppress (threshold is Inf) because it is very easily raised in cases where it is of no observable consequence. See also electron_number_density_warn_min_value, below.\nelectron_number_density_warn_min_value (default: 1e-4): The minimum value of the ratio of the electron number density to the total number density at which a warning is printed.\nreturn_cntm (default: true): whether or not to return the continuum at each wavelength.  If this is false, solution.cntm will be nothing.\nionization_energies, a Dict mapping Species to their first three ionization energies, defaults to Korg.ionization_energies.\npartition_funcs, a Dict mapping Species to partition functions (in terms of ln(T)). Defaults to data from Barklem & Collet 2016, Korg.default_partition_funcs.\nequilibrium_constants, a Dict mapping Species representing diatomic molecules to the base-10 log of their molecular equilibrium constants in partial pressure form.  Defaults to data from Barklem and Collet 2016, Korg.default_log_equilibrium_constants.\nuse_chemical_equilibrium_from (default: nothing): Takes another solution returned by synthesize. When provided, the chemical equilibrium solution will be taken from this object, rather than being recomputed. This is physically self-consistent only when the abundances, A_X, and model atmosphere, atm, are unchanged.\nmolecular_cross_sections (default: []): A vector of precomputed molecular cross-sections. See MolecularCrossSection for how to generate these. If you are using the default radiative transfer scheme, your molecular cross-sections should cover 5000 Å only if your linelist does.\ntau_scheme (default: \"linear\"): how to compute the optical depth.  Options are \"linear\" and \"bezier\" (testing only–not recommended).\nI_scheme (default: \"linear_flux_only\"): how to compute the intensity.  Options are \"linear\", \"linear_flux_only\", and \"bezier\".  \"linear_flux_only\" is the fastest, but does not return the intensity values anywhere except at the top of the atmosphere.  \"linear\" performs an equivalent calculation, but stores the intensity at every layer. \"bezier\" is for testing and not recommended.\nverbose (default: false): Whether or not to print information about progress, etc.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.translational_U-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.translational_U","text":"translational_U(m, T)\n\nThe (possibly inverse) contribution to the partition function from the free movement of a particle. Used in the Saha equation.\n\narguments\n\nm is the particle mass\nT is the temperature in K\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.vacuum_to_air-Tuple{Any}","page":"Developer Documentation","title":"Korg.vacuum_to_air","text":"vacuum_to_air(λ; cgs=λ<1)\n\nconvert λ from a vacuum to air.  λ is assumed to be in Å if it is ⩾ 1, in cm otherwise.  Formula from Birch and Downs (1994) via the VALD website.\n\nSee also: air_to_vacuum.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.voigt_hjerting-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.voigt_hjerting","text":"voigt_hjerting(α, v)\n\nThe Hjerting function, H, somtimes called the Voigt-Hjerting function. H is defined as H(α, v) = ∫^∞_∞ exp(-y^2) / ((u-y)^2 + α^2) dy (see e.g. the unnumbered equation after Gray equation 11.47).  It is equal to the ratio of the absorption coefficient to the value of the absorption coefficient obtained at the line center with only Doppler broadening.\n\nIf x = λ-λ₀, Δλ_D = σ√2 is the Doppler width, and Δλ_L = 4πγ is the Lorentz width,\n\nvoigt(x|Δλ_D, Δλ_L) = H(Δλ_L/(4πΔλ_D), x/Δλ_D) / (Δλ_D√π)\n                    = H(γ/(σ√2), x/(σ√2)) / (σ√(2π))\n\nApproximation from Hunger 1965.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.λ_to_ν_bound-Tuple{Korg.Interval}","page":"Developer Documentation","title":"Korg.λ_to_ν_bound","text":"λ_to_ν_bound(λ_bound)\n\nConverts a λ Inverval (in cm) to an equivalent ν Interval (in Hz), correctly accounting for tricky floating point details at the bounds.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit","page":"Developer Documentation","title":"Korg.Fit","text":"Functions for fitting to data.\n\nwarning: Warning\nThis submodule is in beta. It's API may change.\n\n\n\n\n\n","category":"module"},{"location":"devdocs/#Korg.Fit.calculate_EWs-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.Fit.calculate_EWs","text":"calculate_EWs(atm, linelist, A_X; kwargs...)\n\nCalculate the equivalent widths of the lines in linelist in the spectrum synthesized from atm with abundances A_X.\n\nArguments:\n\natm: the model atmosphere (see Korg.read_model_atmosphere and Korg.interpolate_marcs).\nlinelist: A vector of Korg.Lines (see Korg.read_linelist).  The lines must be sorted by wavelength.\nA_X: a vector containing the A(X) abundances (log(nX/nH) + 12) for elements from hydrogen to uranium (Korg.format_A_X exists as a convenience for creating this vector). All syntheses are done with these abundances, so if the resulting abundances deviate significantly from these, you may wish to iterate.\n\nKeyword arguments:\n\new_window_size (default: 2): the farthest (in Å) to consider equivalent width contributions for each line.\nwl_step (default: 0.01): the resolution in Å at which to synthesize the spectrum around each line.\nblend_warn_threshold (default: 0.01): the minimum depth between two lines allowed before triggering a warning that they may be blended.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit.ews_to_abundances-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.Fit.ews_to_abundances","text":"ews_to_abundances(atm, linelist, A_X, measured_EWs; kwargs...)\news_to_abundances(params, linelist, measured_EWs; kwargs...)\n\nCompute per-line abundances on the linear part of the curve of growth given a model atmosphere and a list of lines with equivalent widths.\n\nArguments:\n\natm: the model atmosphere (see Korg.read_model_atmosphere and Korg.interpolate_marcs).\nlinelist: A vector of Korg.Lines (see Korg.read_linelist).  The lines must be sorted by wavelength.\nA_X: a vector containing the A(X) abundances (log(nX/nH) + 12) for elements from hydrogen to uranium (see Korg.format_A_X). All syntheses are done with these abundances, so if the resulting abundances deviate significantly from these, you may wish to iterate.\nmeasured_EWs: a vector of equivalent widths (in mÅ)\n\nAlternatively, you can pass a vector of parameters like the one returned by ews_to_stellar_parameters instead of a model atmosphere and abundances vector. These should be in the order [Teff, logg, vmic, m_H].\n\nReturns\n\nA vector of abundances (A(X) = log10(n_X/n_H) + 12 format) for each line inlinelist, and a vector of ∂A/∂log(EW) for each line.\n\nOptional arguments:\n\nwl_step (default: 0.01) is the resolution in Å at which to synthesize the spectrum around each line.\new_window_size (default: 2): the farthest (in Å) to consider equivalent width contributions for each line.  It's very important that this is large enough to include each line entirely.\nblend_warn_threshold (default: 0.01) is the minimum absorption between two lines allowed before triggering a warning that they may be blended.\nfinite_difference_delta_A (default: 0.01): the step size in A(X) to use for the finite difference calculation of the curve of growth slope.\nsolar_abundances (default: Korg.default_solar_abundances): the solar abundances to use for the calculation of A(X). Only used if ews_to_abundances is called with a vector of parameters instead of a model atmosphere and abundances vector.\n\nAll other keyword arguments are passed to Korg.synthesize when synthesizing each line.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit.ews_to_abundances_approx-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.Fit.ews_to_abundances_approx","text":"ews_to_abundances_approx(atm, linelist, A_X, measured_EWs; kwargs...)\n\nA very approximate method for fitting abundances from equivalent widths.  It assumes that all lines are on the linear part of the curve of growth, and that the lines are not blended. Arguments and keyword arguments are the same as for ews_to_abundances. Returns the abundances, but not ∂A/∂logEW, since this is constant by assumption.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit.ews_to_stellar_parameters-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.Fit.ews_to_stellar_parameters","text":"ews_to_stellar_parameters(linelist, measured_EWs; kwargs...)\n\nFind stellar parameters from equivalent widths the \"old fashioned\" way.  This function finds the values of T_mathrmeff, log g, v_mic, and [m/H] which satisfy the following conditions (using a Newton-Raphson solver):\n\nThe slope of the abundances of neutral lines with respect to lower excitation potential is zero.\nThe difference between the mean abundances of neutral and ionized lines is zero.\nThe slope of the abundances of neutral lines with respect to reduced equivalent width is zero.\nThe difference between the mean abundances of all lines and the model-atmosphere input [m/H] is zero. Here the \"slope\" refers to the slope of a linear fit to the abundances of the lines in question.\n\nArguments:\n\nlinelist: A vector of Korg.Line objects (see Korg.read_linelist).  The lines must be sorted by wavelength.\nmeasured_EWs: a vector of equivalent widths (in mÅ).\n\nReturns:\n\nA pair, (params, uncertainties), containing:\n\nthe best-fit parameters: [Teff, logg, vmic, [m/H]] as a vector (with vmic in km/s)\nthe uncertainties in the parameters, propagated from the uncertainties in the equivalent widths, which estimated from the line-to-line scatter and assumed to be uncorrelated. This is not a particularly rigorous error estimate, but it is a good sanity check.\n\ninfo: Info\nFor now, this function is limited to the parameters supported by the SDSS MARCS grid, i.e. down to [m/H] = -2.5 at the lowest metallicity grid point.\n\nKeyword arguments:\n\nabundance_adjustments (default: zeros(length(measured_EWs))) is a vector of abundances adjustments to be applied to the lines. This is useful when doing a differential analysis.\nTeff0 (default: 5000.0) is the starting guess for Teff\nlogg0 (default: 3.5) is the starting guess for logg\nvmic0 (default: 1.0) is the starting guess for vmic. Note that this must be nonzero in order to avoid null derivatives. Very small values are fine.\nm_H0 (default: 0.0) is the starting guess for [m/H]\ntolerances (default: [1e-3, 1e-3, 1e-4, 1e-3]) is the tolerance for the residuals each equation listed above. The solver stops when all residuals are less than the corresponding tolerance.\nmax_step_sizes (default: [1000.0, 1.0, 0.3, 0.5]) is the maximum step size to take in each parameter direction.  This is used to prevent the solver from taking too large of a step and missing the solution.  Be particularly cautious with the vmic (third) parameter, as the unadjusted step size is often too large.\nparameter_ranges (default: [(2800.0, 8000.0), (-0.5, 5.5), (1e-3, 10.0), (-2.5, 1.0)]) is the allowed range for each parameter. This is used to prevent the solver from wandering into unphysical parameter space, or outside the range of the SDSS MARCS grid supported by Korg.interpolate_marcs. The default ranges for T_mathrmeff, log g, and [m/H] are the widest supported by the MARCS grid. The minimum value for vmic is set to 1e-3 km/s to avoid null derivatives in the optimization.\nfix_params (default: [false, false, false, false]) is a vector of booleans indicating which parameters should be held fixed during the optimization. The order is [Teff, logg, vmic, [m/H]].\nsolar_abundances (default: Korg.default_solar_abundances) the solar abundances to assume\nverbose (default: false) is a boolean indicating whether to print verbose output during the optimization. Works, by default, by adding a callback that prints the current parameters, residuals, and abundances. The callback can be explicitly set with the callback keyword.\ncallback: is a function which is called at each step of the optimization. It is passed three arguments:\nthe current values of the parameters [Teff, logg, vmic, [m/H]]\nthe residuals of each equation being solved\nthe abundances of each line computed with the current parameters You can pass a callback function, to e.g. make a plot of the residuals at each step.\nmax_iterations (default: 30) is the maximum number of iterations to allow before stopping the optimization.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit.ews_to_stellar_parameters_direct","page":"Developer Documentation","title":"Korg.Fit.ews_to_stellar_parameters_direct","text":"ews_to_stellar_parameters_direct(linelist, measured_EWs,\n                                measured_EW_err=ones(length(measured_EWs));\n                                p0=[5.0, 3.5, 1.0, 0.0], precision=1e-5, time_limit=500)\n\nwarning: Warning\nThis function is experimental and may change or be removed in the future.\n\nFind stellar parameters from equivalent widths the \"direct\" way, e.g. by forward modelling the equivalent widths and minimizing the chi-squared.\n\nReturns a vector of parameters [Teff, logg, vmic, [m/H]], and an estimate of the uncertainties from the approximate inverse Hessian matrix from BFGS.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.Fit.fit_spectrum","page":"Developer Documentation","title":"Korg.Fit.fit_spectrum","text":"fit_spectrum(obs_wls, obs_flux, obs_err, linelist, initial_guesses, fixed_params; kwargs...)\n\nFind the parameters and abundances that best match a rectified observed spectrum.\n\nArguments:\n\nobs_wls: the wavelengths of the observed spectrum in Å.  These must be vacuum wavelengths.\nobs_flux: the rectified flux of the observed spectrum\nobs_err: uncertainty in flux\nlinelist: a linelist to use for the synthesis\ninitial_guesses: a NamedTuple specifying initial guesses for the parameters to be fit.  See \"Specifying parameters\" below.\nfixed_params: a NamedTuple specifying parameters to be held fixed. See \"Specifying parameters\" below.\n\ninitial_guesses and fixed_params can also be specified as Dicts instead of NamedTuples, which is more convenient when calling Korg from python.\n\nSpecifying parameters\n\nParameters are specified as named tuples or dictionaries. Named tuples look like this: (Teff=5000, logg=4.5, m_H=0.0).  Single-element named tuples require a semicolon: (; Teff=5000).\n\nRequired parameters\n\nTeff and logg must be specified in either initial_guesses or fixed_params.\n\nOptional Parameters\n\nThese can be specified in either initial_guesses or fixed_params, but if they are not default values are used.\n\nm_H: the metallicity of the star, in dex. Default: 0.0\nalpha_H: the alpha enhancement of the star, in dex. Default: m_H.  Note that, because of the parameter range supported by Korg.interpolate_marcs, only values within ±1 of m_H are supported.\nvmic: the microturbulence velocity, in km/s. Default: 1.0\nvsini: the projected rotational velocity of the star, in km/s. Default: 0.0. See Korg.apply_rotation for details.\nepsilon: the linear limb-darkening coefficient. Default: 0.6. Used for applying rotational broadening only.  See Korg.apply_rotation for details.\nIndividual elements, e.g. Na, specify the solar-relative ([X/H]) abundance of that element.\n\nKeyword arguments\n\nR, the resolution of the observed spectrum. This is required.  It can be specified as a function of wavelength, in which case it will be evaluated at the observed wavelengths.\nwindows is a vector of wavelength pairs, each of which specifies a wavelength \"window\" to synthesize and contribute to the total χ². If not specified, the entire spectrum is used. Overlapping windows are automatically merged.\nadjust_continuum (default: false) if true, adjust the continuum with the best-fit linear correction within each window, minimizing the chi-squared between data and model at every step of the optimization.\nwl_buffer is the number of Å to add to each side of the synthesis range for each window.\ntime_limit is the maximum number of seconds to spend in the optimizer. (default: 10_000). The optimizer will only checks against the time limit after each step, so the actual wall time may exceed this limit.\nprecision specifies the tolerance for the solver to accept a solution. The solver operates on transformed parameters, so precision doesn't translate straightforwardly to Teff, logg, etc, but the default value, 1e-4, provides a theoretical worst-case tolerance of about 0.15 K in Teff, 0.0002 in logg, 0.0001 in m_H, and 0.0004 in detailed abundances. In practice the precision achieved by the optimizer is about 10x bigger than this.\npostprocess can be used to arbitrarilly transform the synthesized (and LSF-convolved) spectrum before calculating the chi2.  It should take the form postprocess(flux, data, err) and write its changes in-place to the flux array.\nLSF_matrix: this can be provedided along with synthesis_wls in place of specifying R if you have a precomputed custom LSF matrix.\nsynthesis_wls: see LSF_matrix above. This can be a Korg.Wavelengths object or any arguments that can be passed to its constructor, e.g. a range or vector of ranges. Wavelengths are in Å.\nAny additional keyword arguments will be passed to Korg.synthesize when synthesizing the spectra for the fit.\n\nReturns\n\nA NamedTuple with the following fields:\n\nbest_fit_params: the best-fit parameters\nbest_fit_flux: the best-fit flux, with LSF applied, resampled, and rectified.\nobs_wl_mask: a bitmask for obs_wls which selects the wavelengths used in the fit (i.e. those in the windows)\nsolver_result: the result object from Optim.jl\ntrace: a vector of NamedTuples, each of which contains the parameters at each step of the optimization. This is empty for single parameter fits, because the underlying solver doesn't supply it.\ncovariance: a pair (params, Σ) where params is vector of parameter name (providing an order), and Σ is an estimate of the covariance matrix of the parameters.  It is the approximate inverse hessian of the log likelihood at the best-fit parameter calculated by the BGFS algorithm, and should be interpreted with caution.\n\ntip: Tip\nThis function takes a long time to compile the first time it is called. Compilation performance is significantly better on Julia 1.10+ than previous versions, so if you are using an older version of Julia, you may want to upgrade.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.Fit.linear_continuum_adjustment!-NTuple{5, Any}","page":"Developer Documentation","title":"Korg.Fit.linear_continuum_adjustment!","text":"linear_continuum_adjustment!(obs_wls, windows, model_flux, obs_flux, obs_err)\n\nAdjust the model flux to match the observed flux by fitting a line (as a function of wavelength) to the residuals, and dividing it out. This can compensate for poorly done continuum normalization.\n\nNote, obs_wls must be masked.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit.postprocessed_synthetic_spectrum-NTuple{11, Any}","page":"Developer Documentation","title":"Korg.Fit.postprocessed_synthetic_spectrum","text":"Synthesize a spectrum, apply the LSF, and postprocess it, catching and potentially rethrowing errors. This is used by fit_spectrum.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit.scale-Tuple{Dict}","page":"Developer Documentation","title":"Korg.Fit.scale","text":"Rescale each parameter so that it lives on (-∞, ∞).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit.synthetic_spectrum-NTuple{5, Any}","page":"Developer Documentation","title":"Korg.Fit.synthetic_spectrum","text":"Synthesize a spectrum, returning the flux, with LSF applied, resampled, and rectified.  This is an internal function oned by fitting routines. See Korg.synthesize to synthesize spectra as a Korg user.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit.unscale-Tuple{Dict}","page":"Developer Documentation","title":"Korg.Fit.unscale","text":"Unscale each parameter so that it lives on the appropriate range instead of (-∞, ∞).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.Fit.validate_params-Tuple{AbstractDict, AbstractDict}","page":"Developer Documentation","title":"Korg.Fit.validate_params","text":"Validate fitting parameters, and insert default values when needed. Used by fit_spectrum.\n\nthese can be specified in either initialguesses or fixedparams, but if they are not, these values are inserted into fixed_params\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.CubicSplines.CubicSpline-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.CubicSplines.CubicSpline","text":"CubicSpline(xs, ys; extrapolate=false)\n\nConstruct a interpolant using xs and ys as the knot coordinates. Assumes xs is sorted. Apply this object as a function to interpolate at any x value in the domain. If extrapolate is false, x values outside [xs[1], xs[end]] throw errors, if extrapolate is true, the interpolant uses flat extrapolation, i.e. it returns the extreme value.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.CubicSplines.cumulative_integral!-Tuple{Any, Korg.CubicSplines.CubicSpline, Any, Any}","page":"Developer Documentation","title":"Korg.CubicSplines.cumulative_integral!","text":"cumulative_integral!(out, A, t1, t2)\n\nGiven a curve described by the spine, A, Calculates the integral from t1 to t for all t = t1, t2, and all spline knots in between.  So if t1 is A.t[1] and t2 is A.t[end], out should have the same length as A.t.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.H2plus_bf_and_ff","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.H2plus_bf_and_ff","text":"H2plus_bf_and_ff(ν, T, nH_I_div_partition, n_HII; kwargs...)\n\nCompute the combined H₂⁺ bound-free and free-free linear absorption coefficient α using the tables from Stancil 1994. Note that this refers to interactions between free-protons and neutral hydrogen, not electrons and doubly ionized H2, i.e. the b-f interaction is photodissociation, not photoionization.\n\nArguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnH_I: the total number density of H I divided by its partition function.\nnH_II: the number density of H II (not of H₂⁺).\n\nFor a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis computes the H₂⁺ number density from those of H I and H II, since ionized molecules are not included in the molecular equlibrium calculation.  Stancil provides approximate equilibrium constants, K, for the molecule, but the Barklem and Collet values used elsewhere by Korg may be more reliable.  Once ionized molecules are fully supported, those values should be used instead. While cross sections are tabulated down to only 3150 K, the cross sections could be linearly interpolated 1000 K or so lower, if reliable K values are availble.\n\nBecause n(H₂⁺) is computed on the fly, the \"cross-sections\" used (internally) by this function have units of cm^-5, since they must be multiplied by n(H I) and n(H II) to obtain absorption coefficients.\n\nStancil, Bates (1952), and Gray (2005) all use n(H I), but Kurucz (1970) notes in section 5.2 that the photodisociation of H₂⁺ produces a ground state H atom and that we should therefore use n(H I, n=1) instead. This difference causes a descrepancy of a fraction of a percent (at most) for T ≤ 1.2e4 K. Here we use n(H I).\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumAbsorption.H_I_bf-NTuple{6, Any}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.H_I_bf","text":"H_I_bf(νs, T, nH, nHe, ne, invU_H; n_max_MHD=6, use_hubeny_generalization=false, \n       taper=false, use_MHD_for_Lyman=false)\n\nThe bound-free linear absorption coefficient contributed by all energy states of a neutral Hydrogen atom. Even though the Mihalas-Hummer-Daeppen (MHD) occupation probability formalism is not used in Korg when computing the hydrogen partition function, it is used here. That means that series limit jumps (e.g. the Balmer jump), are \"rounded off\", as photons with less than the \"classical\" ionization energy can ionize if the upper level is dissolved into the continuum.\n\nRequired Arguments\n\nνs: sorted frequency vector in Hz\nT: temperature in K\nnH_I: the total number density of neutral Hydrogen (in cm⁻³)\nnHe_I: the total number density of neutral Helium (in cm⁻³)\nne: the number density of electrons (in cm⁻³)\ninvU_H: The inverse of the neutral hydrogen partition function (neglecting contributions from the MHD formalism)\n\nFor n=1 through n=n_max_MHD (default: 6), the cross-sections are computed using Nahar 2021. These are modified using the MHD formalism to account for level dissolution. For larger n, the cross-sections are calculated with a simple analytic formula (see simple_hydrogen_bf_cross_section).\n\nBecause MHD level dissolution applied to the the Lyman series limit leads to inflated cross-sections in the visible, we don't use MHD for bf absorption from n=1.  This can be overridden by setting use_MHD_for_Lyman=true, in which case you will also want to set taper=true, which the same tapering of the cross-section as HBOP to fix the problem.\n\nThe use_hubeny_generalization keyword argument enables the generalization of the MHD from Hubeny 1994. It is experimental and switched off by default.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.Heminus_ff","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.Heminus_ff","text":"Heminus_ff(ν, T, nHe_I_div_partition, ne; kwargs...)\n\nCompute the He⁻ free-free opacity κ.\n\nThe naming scheme for free-free absorption is counter-inutitive. This actually refers to the reaction:  photon + e⁻ + He I -> e⁻ + He I.\n\nArguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnHe_I_div_partition: the total number density of H I divided by its partition function.\nne: the number density of free electrons.\n\nFor a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis uses the tabulated values from John (1994).  The quantity K is the same used by Bell and Berrington (1987).  See Hminus_ff for an explanation.\n\nAccording to John (1994), improved calculations are unlikely to alter the tabulated data for λ > 1e4Å, \"by more than about 2%.\" The errors introduced by the approximations for 5.06e3 Å ≤ λ ≤ 1e4 Å \"are expected to be well below 10%.\"\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumAbsorption.Hminus_bf","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.Hminus_bf","text":"Hminus_bf(ν, T, nH_I_div_partition, ne; kwargs...)\n\nCompute the H⁻ bound-free linear absorption coefficient α, alpha_nu = sigma_bf(H^-) n(H) (1 - exp left( frac-hnuk Tright))\n\nArguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnH_I_div_partition: the total number density of H I divided by its partition function.\nne: the electron number density\n\nThis uses cross-sections from McLaughlin 2017. For a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis function assumes that n(H⁻) ≪ n(H I) + n(H II). The number density of n(H⁻) isn't precomputed as part of Korg's molecular equlibrium, it's computed here instead.\n\nnote: Note\nThe McLaughlin tabulated values (downloaded as a text file) contained a stray line out of monotonic order.  A version of the data file with the line deleted is saved at data/McLaughlin2017Hminusbf.dat for archival purposes.  (Korg doesn't read this file, it reads data/McLaughlin2017Hminusbf.h5.)\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumAbsorption.Hminus_ff","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.Hminus_ff","text":"Hminus_ff(ν, T, nH_I_div_partition, ne; kwargs...)\n\nCompute the H⁻ free-free linear absorption coefficient α\n\nThe naming scheme for free-free absorption is counter-inutitive. This actually refers to the reaction:  photon + e⁻ + H I -> e⁻ + H I.\n\nArguments\n\nν::AbstractVector{<:Real}: sorted frequency vector in Hz\nT: temperature in K\nnH_I_div_partition::Flt: the total number density of H I divided by its partition function.\nne: the number density of free electrons.\n\nFor a description of the kwargs, see Continuum Absorption Kwargs.\n\nNotes\n\nThis is based on Table 1, in Bell & Berrington (1987), which tabulates values for \"the H⁻ absorption coefficient\", K (including the correction for stimulated emission). This quantity is in units of cm^4/dyn, and must be multiplied by the electron partial pressure and the ground-state neutral hydrogen number density to obtain a linear absorption coefficent, α.\n\nThe stipulation that the hydrogen should be ground-state only is based on the beginning of Section 2 in Bell and Berrington (1987), or alternately, Section 5.3 from Kurucz (1970).  When Gray (2005) refers to this, it implicitly assumes that n(H I, n = 1) ≈ n(H I).  Note that\n\n n(H I, n = 1) = n(H I)*gₙ₌₁/U(T)*exp(-Eₙ₌₁/(k*T)) = n(H I) * 2/U(T)*exp(0) = n(H I) * 2/U(T).\n\nSince U(T) ≈ 2 up to fairly large temperatures, this is not unreasonable.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumAbsorption._load_gauntff_table","page":"Developer Documentation","title":"Korg.ContinuumAbsorption._load_gauntff_table","text":"_load_gauntff_table([fname])\n\nReturns a table of thermally-averaged free-free Gaunt factors, and the values of log₁₀(γ²) and log₁₀(u) associated with each point.\n\nThis loads the non-relativistic free-free data published by van Hoof et al. (2014).\n\nNote: This function code could trivially be adapted to load the relativistic free-free gaunt factors published by van Hoof et al (2015).\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumAbsorption._ndens_Hminus","page":"Developer Documentation","title":"Korg.ContinuumAbsorption._ndens_Hminus","text":"_ndens_Hminus(nH_I_div_partition, ne, T, ion_energy = _H⁻_ion_energy)\n\nCompute the number density of H⁻ (implements eqn 5.10 of Kurucz 1970). This is an application of the saha equation where the \"ground state\" is H⁻ and the \"first ionization state\" is H I. The partition function of H⁻ is 1 at all temperatures.\n\n\n\n\n\n","category":"function"},{"location":"devdocs/#Korg.ContinuumAbsorption.bounds_checked_absorption-Tuple{Any}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.bounds_checked_absorption","text":"bounds_checked_absorption(func; ν_bound, temp_bound)\n\nConstructs a wrapped function that implements bounds checking and extrapolation\n\nParameters\n\nfunc: a function that has a signature f(ν::Real, T::Real, args...)::Real, where ν is frequency (in Hz) and T is temperature (in K)\nν_bound::Interval: Interval of frequencies (in Hz) over which func is valid.\ntemp_bound::Interval: Interval of temperatures (in K) over which func is valid.\n\nThe resulting function will have this signature:\n\nwrapped_func(ν::AbstractVector{<:Real}, T::Real, args...; kwargs...)\n\nWrapped Function Parameters\n\nν::AbstractVector{<:Real}: sorted vector of frequencies (in Hz)\nT::Real: temperature (in K)\nargs...: function-specific arguments\n\nFor a description for the kwargs..., see Continuum Absorption Kwargs.    # if generating the inner function in this way involves too much overhead, we could:\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.electron_scattering-Tuple{F} where F<:Real","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.electron_scattering","text":"electron_scattering(nₑ)\n\nCompute the linear absorption coefficient, α, from scattering off of free electrons. This has no wavelength dependence. It assumes isotropic scattering.  (See, e.g. Gray p 160.)\n\nArguments\n\nnₑ::F: number density of free electrons (in cgs)\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.gaunt_ff_vanHoof-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.gaunt_ff_vanHoof","text":"gaunt_ff_vanHoof(log_u, log_γ2)\n\ncomputes the thermally averaged, non-relativistic free-free gaunt factor by interpolating the table provided by van Hoof et al. (2014).\n\nArguments\n\nlog_u: Equal to log₁₀(u) = log₁₀(hν/(kTₑ))\nlog_γ2: Equal to log₁₀(γ²) = log₁₀(RydbergZ²/(kTₑ))\n\nRydberg is the \"infinite mass unit of energy\" and Tₑ is the temperature of free electrons (for our purposes, we assume that free electrons are in thermal equilibrium with ions and neutral species).\n\nNotes\n\nvan Hoof et al. (2014) computed the associated data table with a non-relativistic approach, which is invalid at very high temperatures. They conclude (from comparisons with a different paper) that their \"results should be accurate up to electron temperatures of roughly 100 MK\". This is more than adequate for stellar atmospheres. In van Hoof et al. (2015), they find that relativistic effects introduce a ∼0.75% at 100MK, for Z = 1 (when Z > 1, the change is smaller).\n\nThis function currently uses linear interpolation. However, van Hoof et al. (2014) provides an implementation of a third-order Lagrange scheme, which \"reaches a relative precision better than 1.5e-4 everywhere.\" The C and Fortran implementations of this scheme can be found here, and are copyrighted by a BSD-style license.\n\nEarlier variants of this function used less-accurate data from section 5.1 of Kurucz (1970) that extended over a smaller interval of data. That table was originally derived from a figure in Karsas and Latter (1961) and it's now used for testing purposes.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.hydrogenic_ff_absorption-Tuple{Real, Real, Integer, Real, Real}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.hydrogenic_ff_absorption","text":"hydrogenic_ff_absorption(ν, T, Z, ni, ne)\n\ncomputes the free-free linear absorption coefficient for a hydrogenic species\n\nThe naming convention for free-free absorption is counter-intuitive. A free-free interaction is named as though the species interacting with the free electron had one more bound electron (in other words it's named as though the free-electron and ion were bound together). In practice, this means that ni should refer to:\n\nthe number density of H II if computing the H I free-free absorption\nthe number density of He III if computing the He II free-free absorption\nthe number density of Li IV if computing the Li III free-free absorption\n\nArguments\n\nZ::Integer: the charge of the ion. For example, this is 1 for ionized H.\nni: the number density of the ion species in cm⁻³.\nne: the number density of free electrons.\nν: frequency in Hz\nT: temperature in K\n\nNote\n\nThis approach was adopted from equation 5.8 from section 5.1 of Kurucz (1970). Comparison against equation 5.18b of Rybicki & Lightman (2004), reveals that the equation in Kurucz (1970) omits the dependence on ρ. According to Rybicki & Lightman (2004) the free-free absorption coefficient (corrected for stimulated emission) is:\n\n    α = coef * Z² * ne * ni * (1 - exp(-hplanck*ν/(kboltz*T))) * g_ff / (sqrt(T) * ν³)\n\nNote that the g_ff is the free-free gaunt factor and coef is ∼3.7e8 (a more exact coefficient can be computed from eqn 5.18a).\n\nWith this in mind, equation 5.8 of Kurucz (1970) should actually read\n\n    κ = ne * n(H II) * F_ν(T) * (1 - exp(-hplanck*ν/(kboltz*T))) / ρ\n\nwhere Fν(T) = coef * Z² * gff / (sqrt(T) * ν³).\n\nSee gaunt_ff_vanHoof for details about where our gaunt factor data comes from. For simplicity, we enforce temperature and ν bounds constraints that don't include all of the available gaunt factor data. In practice, this should never be a concern for stellar spectroscopy.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.metal_bf_absorption!-NTuple{4, Any}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.metal_bf_absorption!","text":"metal_bf_absorption!(α, νs, T, number_densities)\n\nAdds to α the contributions of bf metal opacities.  Uses precomputed tables from TOPBase for Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, S, Ar, and Ca. Uses tables from NORAD for Fe.  For these elements, tables have been precomputed for the neutral and singly ionized species assuming and LTE distribution of energy levels.  See Korg/data/metal_bf_cross-sections/ for the scripts which generate the tables.\n\nCross sections were computed for 100 K < T < 100,000 K and frequencies corresponding to 500 Å < λ < 30,000 Å.  Outside of either of those ranges, flat extrapolation is used (i.e. the extreme value is returned).\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.positive_ion_ff_absorption!-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}, Real, Dict, Real}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.positive_ion_ff_absorption!","text":"positive_ion_ff_absorption!(α_out::Vector{Real}, ν::Real, T::Real, number_densities::Dict, \n                            ne::Real, departure_coefficients=Peach1970.departure_coefficients)\n\nComputes the linear absorption coefficient (in cm⁻¹) for all free-free interactions involving positively charged atomic species. Uses the provided departure coefficients when they are available, and the uncorrected hydrogenic approximation when they are not.\n\nArguments\n\nν: frequency in Hz\nT: temperature in K\nnumber_densities is a Dict mapping each Species to its number density.\nne: the number density of free electrons.\ndeparture_coefficients (optional, defaults to ContinuumAbsorption.Peach1970.departure_coefficients: a dictionary mapping species to the departure coefficients for the ff process it participates in (e.g. species\"C II\" maps to the C III ff departure coefficients–see note below).  Departure coefficients should be callables taking temperature and (photon energy / RydbergH / Zeff^2).\n\nnote: Note\nA free-free interaction is named as though the species interacting with the free electron had one more bound electron (in other words it's named as though the free-electron and ion were bound together). To make matters more confusing, some sources present the free-free linear absorption coefficient's formula in terms of the number density of the species in the interaction's name (by including the Saha equation in the formula).To compute the absorption for a given free-free interaction, this function accesses elements from the dictionary arguments that are associated with the species that participates in the interaction. For example:Si I ff absorption: uses the number density of Si II (number_densities[species\"Si II\"]) and checks departure_coefficients[species\"Si II\"] for departure coefficients.\nSi II ff absorption: uses the number density of Si III (number_densities[species\"Si III\"]) and checks departure_coefficients[species\"Si III\"] for departure coefficients.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.rayleigh-Tuple{AbstractVector{<:Real}, Any, Any, Any}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.rayleigh","text":"rayleigh(λs, nH_I, nHe_II, nH2)\n\nAbsorption coefficient from Rayleigh scattering by neutral H, He, and H2.  Formulations for H and He are via Colgan+ 2016.  Formulation for H2 from Dalgarno and Williams 1962.\n\nThe Dalgarno and Williams H2 is applicable redward of 1300 Å.  Since Rayleigh scattering breaks down when the particle size to wavelength ratio gets large, we that all frequencies passed to this function be equivalent to 1300 Å or greater.\n\nThe formulations for H is adapted from Lee 2005, which states that it is applicable redward of Lyman alpha. See Colgan 2016 for details on He.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.simple_hydrogen_bf_cross_section-Tuple{Integer, Real}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.simple_hydrogen_bf_cross_section","text":"simple_hydrogen_bf_cross_section(n::Integer, ν::Real)\n\nCalculate the H I bf cross section in megabarns using a very simple approximation.  See, for example, Kurucz 1970 equation 5.5 (though see note below).  This implementation is used to extrapolate the cross-section past the ionization energy of an unperturbed hydrogen atom, as is required to take level dissolution into account with the MHD formalism.\n\nEquation 5.5 of Kurucz had a typo in it. In the numerator of the fraction that is multiplied by the entire polynomial, Z² should be Z⁴. This was discovered during comparisons with data from the Opacity Project, and can be confirmed by looking at eqn 5.6 of Kurucz (it uses Z⁴ instead of Z²) or by comparison against equation 10.54 of Rybicki & Lightman.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.total_continuum_absorption-Tuple{Any, Any, Any, Dict, Dict}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.total_continuum_absorption","text":"total_continuum_absorption(νs, T, nₑ, number_densities, partition_funcs; error_oobounds)\n\nThe total continuum linear absoprtion coefficient, α, at many frequencies, ν.\n\nArguments\n\nνs are frequencies in Hz\nT is temperature in K\nnₑ is the electron number density in cm^-3\nnumber_densities is a Dict mapping each Species to its number density\npartition_funcs is a Dict mapping each Species to its partition function (e.g. Korg.partition_funcs)\nerror_oobounds::Bool specifies the behavior of most continnum absorption sources when passed frequencies or temperature values that are out of bounds for their implementation. When false (the default), those absorption sources are ignored at those values. Otherwise, an error is thrown.\n\nnote: Note\nFor efficiency reasons, νs must be sorted. While this function technically supports any sorted AbstractVector, it is most effient when passed an  AbstractRange.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.ContinuumAbsorption.Stancil1994","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.Stancil1994","text":"This module contains transcriptions of the tables from Stancil 1994, who calculated ff and bf absorption coefficients for H₂⁺ and He₂⁺.\n\nIt also contains pre-constructed interpolation objects.\n\n\n\n\n\n","category":"module"},{"location":"devdocs/#Korg.ContinuumAbsorption.Peach1970.departure_coefficients-Tuple{}","page":"Developer Documentation","title":"Korg.ContinuumAbsorption.Peach1970.departure_coefficients","text":"Peach1970.departure_coefficients()\n\nThis module contains interpolators of the tabulated ff departure coeffients from Peach+ 1970, which we use to correct the hydrogenic ff absorption coefficient for H I ff, C I ff, Si I ff, and Mg I ff. It contains a dictionary (returned by departure_coefficients()), which maps Species to interpolator objects.  Crucially, the dictionary is indexed by the species which actually participates in the interaction, not the one after which the interaction is named.\n\nOutside the regime in which Peach 1970 provides data, the interpolators return 0, falling back to the hydreogenic approximation.\n\nThe species for which we use corrections are the same species which get corrected in MARCS/Turbospectrum (see Table 1 of Gustafsson+ 2008). The choices seem are largely motivated by which species have departure terms at normal stellar atmosphere conditions and which species are most abundant in the sun. For C II ff, we include only the contribution from the ¹S parent term, even though (in contrast to other speices) information is available for the ³Pᵒ term as well.\n\nThe free-free absorption coefficient (including stimulated emission) is given by:\n\nalpha_ m ff = alpha_ m hydrogenic ff(nu T n_i n_e Z) (1 + D(T sigma)),\n\nwhere\n\nalpha_ m hydrogenic ff(nu T n_i n_e Z) should include the correction for stimulated emission.\nn_i is the number density fo the ion species that participates in the interation, not the species the interaction is named after.\nn_e is the number density of free electrons.\nD(T sigma) is specified as the departure arg, and is expected to interpolate over the tabulated values specified in Table III of Peach (1970).\nσ denotes the energy of the photon in units of RydbergH*Zeff²\n\nIt might not be immediately obvious how the above equation relates to the equations presented in Peach (1970). Peach describes the calculation for k_ u^F, the free-free absorption coefficient (uncorrected for stimulated emission) per particle of the species that the interaction is named after. In other words, he computes:\n\nk_ u^F = alpha_ m ffn_i-1 left(1 - e^frac-hnuk Tright)^-1,\n\nwhere n_i-1 is the number density of the species that the interaction is named after. k_ u^F can directly be computed, under LTE, from just u, T, and n_i-1 (the Saha Equation relates alpha_ m ff's dependence on n_e and n_i to n_i-1 and T.  Gray (2005) follows a similar convention when describing free-free absorption.\n\nwarning: Warning\n\n\nThe tabulated data in this module was taken from Peach 1970 using OCR software, and may contain mis-read values, although they produce reasonable behavior and there are no obvious problems.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.calculate_rays-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.calculate_rays","text":"calculate_rays(μ_surface_grid, spatial_coord, spherical)\n\nArguments\n\nμ_surface_grid: the μ values at the surface of the star corresponding to the rays along which the optical depth and intensity will be calculated.\nspatial_coord: a physical distance coordinate.  This is radius for a spherical atmosphere, and height above the photosphere for a plane-parallel atmosphere.\n\nReturns\n\nA vector of pairs (s, ds/dz), where s is the distance along the ray and z is the model atmosphere spatial coordinate.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.compute_F_flux_only_expint-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.compute_F_flux_only_expint","text":"compute_F_flux_only_expint(τ, S)\n\nCompute the astrophysical flux, F, by linearly interpolating the source function, S across optical depths τ.  Handle the integral over μ analytically using E₂.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.compute_I_bezier!-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.compute_I_bezier!","text":"compute_I_bezier!(I, τ, S)\n\nGiven τ and S along a ray (at a particular wavelength), compute the intensity at the end of the ray (the surface of the star).  This uses the method from de la Cruz Rodríguez and Piskunov 2013.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.compute_I_linear!-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.compute_I_linear!","text":"compute_I_linear!(I, τ, S)\n\nCompute exactly the solution to the transfer integral obtained be linearly interpolating the source function, S across optical depths τ, without approximating the factor of exp(-τ).\n\nThis breaks the integral into the sum of integrals of the form int (mtau + b) exp(-tau) d\\tau$ , which is equal to $ -\\exp(-\\tau) (m*\\tau + b + m)$.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.compute_I_linear_flux_only-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.compute_I_linear_flux_only","text":"compute_I_linear_flux_only(τ, S)\n\nReturns the intensity at the end of the ray (the surface of the star) given τ and S along the ray. Uses the same numerical method as compute_I_linear!, but doesn't retain the intensity at each layer.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.compute_tau_bezier!-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.compute_tau_bezier!","text":"compute_tau_bezier(τ, s, α)\n\nCompute optical depth (write to τ) along a ray with coordinate s and absorption coefficient α.  This is the method proposed in de la Cruz Rodríguez and Piskunov 2013, but the\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.expint_transfer_integral_core-Tuple{Any, Any, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.expint_transfer_integral_core","text":"expint_transfer_integral_core(τ, m, b)\n\nThe exact solution to int (mtau + b) E_2(tau) d\\tau$. The exponential integral function, expint, captures the integral over the disk of the star to get the emergent astrophysical flux. You can verify it by substituting the variable of integration in the exponential integal, t, with mu=1/t.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.exponential_integral_2-Tuple{Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.exponential_integral_2","text":"exponential_integral_2(x)\n\nApproximate second order exponential integral, E_2(x).  This stitches together several series expansions to get an approximation which is accurate within 1% for all x\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.fritsch_butland_C-Tuple{Any, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.fritsch_butland_C","text":"fritsch_butland_C(x, y)\n\nGiven a set of x and y values, compute the bezier control points using the method of Fritch & Butland 1984, as suggested in de la Cruz Rodríguez and Piskunov 2013.\n\nUsed in compute_I_bezier!.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.generate_mu_grid-Tuple{Integer}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.generate_mu_grid","text":"generate_mu_grid(n_points)\ngenerate_mu_grid(μ_values)\n\nUsed by both radiative transfer schemes to compute quadrature over μ. Returns (μ_grid, μ_weights). If an integer is passed, generate a grid of Gauss-Legendre quadrature points of corresponding size. Otherwise, use the provided μ values.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.radiative_transfer-Tuple{Korg.PlanarAtmosphere, Any, Any, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.radiative_transfer","text":"radiative_transfer(atm, α, S, n_μ_points; kwargs...)\nradiative_transfer(α, S, spatial_coord, n_μ_points, spherical; kwargs...)\n\nArguments (note that some of these are only required for one method):\n\natm: the model atmosphere.\nα: a matrix (atmospheric layers × wavelengths) containing the absorption coefficient\nS: the source function as a matrix of the same shape. rescale the total absorption to match the model atmosphere. This value should be calculated by Korg.\nμ_points: the number of quadrature points to use when integrating over I_surface(μ) to obtain the astrophysical flux, or, alternatively, the specific μ values to use (in which case the integral is done with the trapezoid rule).\nspatial_coord: a physical distance coordinate (radius for a spherical atmosphere, height above the photosphere for a plane-parallel atmosphere).\nspherical: whether the atmosphere is spherical or plane-parallel.\n\nKeyword Arguments:\n\ninclude_inward_rays (default: false): if true, light propagating into the star (negative μs) is included.  If false, only those which are needed to seed the intensity at the bottom of the atmosphere are included.\nτ_scheme (default: \"anchored\"): how to compute the optical depth.  Options are \"linear\" and \"bezier\" (not recommended).\nI_scheme (default: \"linearfluxonly\"): how to compute the intensity.  Options are \"linear\", \"linearfluxonly\", and \"bezier\".  \"linearfluxonly\" is the fastest, but does not return the intensity values anywhere except at the top of the atmosphere.  \"linear\" performs an equivalent calculation, but stores the intensity at every layer.  \"bezier\" is not recommended.\n\n\n\n\n\n","category":"method"},{"location":"devdocs/#Korg.RadiativeTransfer.radiative_transfer_core-NTuple{15, Any}","page":"Developer Documentation","title":"Korg.RadiativeTransfer.radiative_transfer_core","text":"Compute the intensity along a single ray.\n\nn.b. this function has an additional Ischeme (\"linearfluxonlyexpint\") that radiative_transfer will automatically switch to when appropriate.\n\n\n\n\n\n","category":"method"},{"location":"API/","page":"Public Functions","title":"Public Functions","text":"This page documents the public, stable Korg API intended for users of the package. Starting with the version 1.0 release, the developers commit to maintaining forward compatability for all of these functions (until, at least, the next major release).","category":"page"},{"location":"API/","page":"Public Functions","title":"Public Functions","text":"If you are interested in contributing to Korg, we provide a more complete list of functions (that includes private functions) in the Developer documentation.","category":"page"},{"location":"API/#API","page":"Public Functions","title":"Top-level functions","text":"","category":"section"},{"location":"API/","page":"Public Functions","title":"Public Functions","text":"If you are trying to synthesize a spectrum with Korg, these are the functions you will call. These functions are exported, so if you do using Korg, you can call them unqualified (i.e. synthesize instead of Korg.synthesize).","category":"page"},{"location":"API/#Korg.synth","page":"Public Functions","title":"Korg.synth","text":"synth(kwargs...)\n\nThis function creates a synthetic spectrum. It's easier to use than synthesize, but it gives you less control. Unlike synthesize, it returns a tuple of (wavelengths, rectified_flux, cntm) (Wavelength in Å, rectified flux as a unitless number between 0 and 1, and continuum in erg/s/cm^5).  Korg.synth also provides shortcuts for some ways you might want to post-process the spectrum (applying a LSF, rotation, etc).\n\nKeyword arguments\n\nTeff: effective temperature in K (default: 5000)\nlogg: surface gravity in cgs units (default: 4.5)\nm_H: metallicity, [metals/H], (default: 0.0) (See format_A_X for precisely how this is interpreted.)\nalpha_H: alpha enhancement, [α/H], (default: m_H) (See format_A_X for precisely how this is interpreted.)\nAny atomic symbol (e.g. Fe or C) can be used to to specify a (solar relative, [X/H]) abundance. These override m_H and alpha_H. Specifying an individual abundance means that the true metallicity and alpha will not correspond precisely to the values of m_H and alpha_H. See format_A_X for details.\nlinelist: a linelist, (default: get_VALD_solar_linelist()). See also read_linelist.\nwavelengths: a tuple of the start and end wavelengths (default: (5000, 6000)), or a vector of (λstart, λstop) pairs. See Wavelengths for all the ways the wavelengths can be specified.\nrectify: whether to rectify (continuum normalize) the spectrum (default: true)\nR: resolution (default: Inf, no LSF applied). R can be a scalar, or a function from wavelength (in Å) to resolving power. See apply_LSF for details on how to do this manually.\nvsini: projected rotational velocity in km/s (default: 0). This calls apply_rotation under the hood.\nvmic: microturbulent velocity in km/s (default: 1.0).\nsynthesize_kwargs: additional keyword arguments pass to synthesize.\nformat_A_X_kwargs: additional keyword arguments pass to format_A_X.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.synthesize","page":"Public Functions","title":"Korg.synthesize","text":"synthesize(atm, linelist, A_X, λ_start, λ_stop; kwargs... )\nsynthesize(atm, linelist, A_X, wavelength_ranges; kwargs... )\n\nCompute a synthetic spectrum. Returns a SynthesisResult.\n\nArguments\n\natm: the model atmosphere (see interpolate_marcs and read_model_atmosphere)\nlinelist: A vector of Lines (see read_linelist, get_APOGEE_DR17_linelist, get_GES_linelist, get_GALAH_DR3_linelist, and get_VALD_solar_linelist).\nA_X: a vector containing the A(X) abundances (log(X/H) + 12) for elements from hydrogen to uranium.  format_A_X can be used to easily create this vector.\nThe wavelengths at which to synthesize the spectrum.  They can be specified either as a pair (λstart, λstop), or as a list of pairs [(λstart1, λstop1), (λstart2, λstop2), ...] (or as an valid arugments to the Wavelengths constructor).\n\nExample\n\nTo synthesize a spectrum between 5000 Å and 5100 Å, with all metal abundances set to 0.5 dex less than the solar value except carbon, which we set to [C/H]=-0.25:\n\natm = read_model_atmosphere(\"path/to/atmosphere.mod\")\nlinelist = read_linelist(\"path/to/linelist.vald\")\nA_X = format_A_X(-0.5, Dict(\"C\" => -0.25))\nresult = synthesize(atm, linelist, A_X, 5000, 5100)\n\nOptional arguments:\n\nvmic (default: 0) is the microturbulent velocity, xi, in km/s.  This can be either a scalar value or a vector of values, one for each atmospheric layer.\nline_buffer (default: 10): the farthest (in Å) any line can be from the provided wavelength range before it is discarded.  If the edge of your window is near a strong line, you may have to turn this up.\ncntm_step (default 1): the distance (in Å) between point at which the continuum opacity is calculated.\nhydrogen_lines (default: true): whether or not to include H lines in the synthesis.\nuse_MHD_for_hydrogen_lines (default: true): whether or not to use the MHD occupation probability formalism for hydrogen lines. (MHD is always used for hydrogen bound-free absorption.)\nhydrogen_line_window_size (default: 150): the maximum distance (in Å) from each hydrogen line center at which to calculate its contribution to the total absorption coefficient.\nmu_values (default: 20): the number of μ values at which to calculate the surface flux, or a vector of the specific values to use when doing transfer in spherical geometry. If mu_points is an integer, the values are chosen per Gauss-Legendre integration. If they are specified directly, the trapezoid rule is used for the astrophysical flux. The default values is sufficient for accuracy at the 10^-3 level. Note that if you are using the default radiative transfer scheme, with a plane-parallel model atmosphere, the integral over μ is exact, so this parameter has no effect. The points and weights are returned in the mu_grid field of the output.\nline_cutoff_threshold (default: 3e-4): the fraction of the continuum absorption coefficient at which line profiles are truncated.  This has major performance impacts, since line absorption calculations dominate more syntheses.  Turn it down for more precision at the expense of runtime. The default value should effect final spectra below the 10^-3 level.\nelectron_number_density_warn_threshold (default: Inf): if the relative difference between the calculated electron number density and the input electron number density is greater than this value, a warning is printed.  By default, this warning is suppress (threshold is Inf) because it is very easily raised in cases where it is of no observable consequence. See also electron_number_density_warn_min_value, below.\nelectron_number_density_warn_min_value (default: 1e-4): The minimum value of the ratio of the electron number density to the total number density at which a warning is printed.\nreturn_cntm (default: true): whether or not to return the continuum at each wavelength.  If this is false, solution.cntm will be nothing.\nionization_energies, a Dict mapping Species to their first three ionization energies, defaults to Korg.ionization_energies.\npartition_funcs, a Dict mapping Species to partition functions (in terms of ln(T)). Defaults to data from Barklem & Collet 2016, Korg.default_partition_funcs.\nequilibrium_constants, a Dict mapping Species representing diatomic molecules to the base-10 log of their molecular equilibrium constants in partial pressure form.  Defaults to data from Barklem and Collet 2016, Korg.default_log_equilibrium_constants.\nuse_chemical_equilibrium_from (default: nothing): Takes another solution returned by synthesize. When provided, the chemical equilibrium solution will be taken from this object, rather than being recomputed. This is physically self-consistent only when the abundances, A_X, and model atmosphere, atm, are unchanged.\nmolecular_cross_sections (default: []): A vector of precomputed molecular cross-sections. See MolecularCrossSection for how to generate these. If you are using the default radiative transfer scheme, your molecular cross-sections should cover 5000 Å only if your linelist does.\ntau_scheme (default: \"linear\"): how to compute the optical depth.  Options are \"linear\" and \"bezier\" (testing only–not recommended).\nI_scheme (default: \"linear_flux_only\"): how to compute the intensity.  Options are \"linear\", \"linear_flux_only\", and \"bezier\".  \"linear_flux_only\" is the fastest, but does not return the intensity values anywhere except at the top of the atmosphere.  \"linear\" performs an equivalent calculation, but stores the intensity at every layer. \"bezier\" is for testing and not recommended.\nverbose (default: false): Whether or not to print information about progress, etc.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.read_linelist","page":"Public Functions","title":"Korg.read_linelist","text":"read_linelist(filename; format=\"vald\", isotopic_abundances=Korg.isotopic_abundances)\n\nParse a linelist file, returning a vector of Lines.\n\nThe format keyword argument can be used to specify one of these linelist formats (default: \"vald\"):\n\n\"vald\" for a VALD linelist. These can be either \"short\" or \"long\" format, \"extract all\" or \"extract stellar\".  Air wavelengths will automatically be converted into vacuum wavelengths, and energy levels will be automatically converted from cm^-1 to eV.\n\"kurucz\" for an atomic or molecular Kurucz linelist (format=kurucz_vac if it uses vacuum wavelengths; be warned that Korg will not assume that wavelengths are vacuum below 2000 Å),\n\"moog\" for a MOOG linelist (doesn't support broadening parameters or dissociation energies, assumed to be in vacuum wavelengths).\n\"moog_air\" for a MOOG linelist in air wavelengths.\n\"turbospectrum\" for a Turbospectrum linelist in air wavelengths. Note that Korg doesn't make use of the (optional) orbital angular momentum quantum number, l, for the upper or lower levels, so it won't fall back on generic ABO recipes when the ABO parameters are not available. Korg's interpretation of the fdamp parameter is also slightly different from Turbospectrum's. See the documentation of the vdW parameter of Line for details.  Korg will error if encounters an Unsoeld fudge factor, which it does not support.\n\"turbospectrum_vac\" for a Turbospectrum linelist in vacuum wavelengths.\n\"korg\" for a Korg linelist (saved with hdf5). If the filename ends in .h5, this will be used by default.\n\nFor VALD and Turbospectrum linelists with isotope information available, Korg will scale log gf values by isotopic abundance (unless VALD has already pre-scaled them), using isotopic abundances from NIST ([Korg.isotopicabundances]). To use custom isotopic abundances, just pass `isotopicabundances` with the same structure: a dict mapping atomic number to a dict mapping from atomic weight to abundance.\n\nBe warned that for linelists which are pre-scaled for isotopic abundance, the estimation of radiative broadening from log(gf) is not accurate.\n\nSee also: load_ExoMol_linelist, save_linelist.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.load_ExoMol_linelist","page":"Public Functions","title":"Korg.load_ExoMol_linelist","text":"load_ExoMol_linelist(specs, states_file, transitions_file, upper_wavelength, lower_wavelength)\n\nLoad a linelist from ExoMol. Returns a vector of Lines, the same as read_linelist.\n\nArguments\n\nspec: the species, i.e. the molecule that the linelist is for\nstates_file: the path to the ExoMol states file\ntransitions_file: the path to the ExoMol, transitions file\nupper_wavelength: the upper limit of the wavelength range to load (Å)\nlower_wavelength: the lower limit of the wavelength range to load (Å)\n\nKeyword Arguments\n\nline_strength_cutoff: the cutoff for the line strength (default: -15) used to filter the linelist. See approximate_line_strength for more information.\nT_line_strength: the temperature (K) at which to evaluate the line strength (default: 3500.0)\n\nwarning: Warning\nThis functionality is in beta.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.read_model_atmosphere","page":"Public Functions","title":"Korg.read_model_atmosphere","text":"read_model_atmosphere(filename)\n\nParse the provided model atmosphere file in MARCS \".mod\" format.  Returns either a PlanarAtmosphere or a ShellAtmosphere.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.interpolate_marcs","page":"Public Functions","title":"Korg.interpolate_marcs","text":"interpolate_marcs(Teff, logg, A_X; kwargs...)\ninterpolate_marcs(Teff, logg, m_H=0, alpha_m=0, C_m=0; kwargs...)\n\nReturns a model atmosphere computed by interpolating models from MARCS ((Gustafsson+ 2008)[https://ui.adsabs.harvard.edu/abs/2008A&A...486..951G/abstract]). Along with Teff and logg, the atmosphere is specified by m_H, alpha_m, and C_m, which can be automatically determined from an A_X abundance vector (the recommended method, see format_A_X). Note that the MARCS atmosphere models were constructed with the Grevesse+ 2007 solar abundances (Korg.grevesse_2007_solar_abundances). This is handled automatically when A_X is provided.\n\ninterpolate_marcs uses three different interpolation schemes for different stellar parameter regimes. In the standard case the model atmosphere grid is the one generated for SDSS, transformed and linearly interpolated. For cool dwarfs (Teff ≤ 4000 K, logg ≥ 3.5), the grid is resampled onto unchanging tau_5000 values and interpolated with a cubic spline. For low-metallicity models (-5 ≤ m_H < -2.5), a grid of standard composition (i.e. fixed alpha and C) atmospheres is used.  (The microturbulence is 1km/s for dwarfs and 2km/s for giants and the mass for spherical models is 1 solar mass.) The interpolation method is the same as in the standard case. See Wheeler+ 2024 for more details and a discussion of errors introduced by model atmosphere interpolation. (Note that the cubic scheme for cool dwarfs is referred to as not-yet-implemented in the paper but is now available.)\n\nkeyword arguments\n\nspherical: whether or not to return a ShellAtmosphere (as opposed to a PlanarAtmosphere).  By default true when logg < 3.5.\nsolar_abundances: (default: grevesse_2007_solar_abundances) The solar abundances to use when A_X is provided instead of M_H, alpha_M, and C_M. The default is chosen to match that of the atmosphere grid, and if you change it you are likely trying to do something else.\nclamp_abundances: (default: false) allowed only when specifying A_X. Whether or not to clamp the abundance parameters to be within range to avoid throwing an out of bounds error.\nperturb_at_grid_values (default: true): whether or not to add or a subtract a very small number to each parameter which is exactly at a grid value. This prevents null derivatives, which can cause problems for minimizers.\nresampled_cubic_for_cool_dwarfs (default: true): whether or not to used specialized method for cool dwarfs.\narchives: A tuple containing the atmosphere grids to use.  For testing purposes.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.format_A_X","page":"Public Functions","title":"Korg.format_A_X","text":"format_A_X(default_metals_H, default_alpha_H, abundances; kwargs... )\n\nReturns a 92 element vector containing abundances in A(X) (log_10(XH) + 12) format for elements from hydrogen to uranium.\n\nArguments\n\nYou can specify abundance with these positional arguments.  All are optional, but if default_alpha_H is provided, default_metals_H must be as well.\n\ndefault_metals_H (default: 0), i.e. [metals/H] is the log_10 solar-relative abundance of elements heavier than He. It is overridden by default_alpha and abundances on a per-element basis.\ndefault_alpha_H (default: same as default_metals_H), i.e. [alpha/H] is the log_10 solar-relative abundance of the alpha elements (See alpha_elements, below). It is overridden by abundances on a per-element basis.\nabundances is a Dict mapping atomic numbers or symbols to [X/H] abundances.  (Set solar_relative=false to use A(X) abundances instead.) These override default_metals_H. This is the only way to specify an abundance of He that is non-solar.\n\nKeyword arguments\n\nsolar_relative (default: true): When true, interpret abundances as being in [X/H] (log_10 solar-relative) format.  When false, interpret them as A(X) abundances, i.e. A(x) = log_10(n_Xn_mathrmH) + 12, where n_X is the number density of X. Note that abundances not specified default to the solar value still depend on the solar value, as they are set according to default_metals_H and default_alpha_H.\nsolar_abundances (default: Korg.asplund_2020_solar_abundances) is the set of solar abundances to use, as a vector indexed by atomic number. Korg.asplund_2009_solar_abundances and Korg.grevesse_2007_solar_abundances are also provided for convenience.\nalpha_elements (default: Korg.default_alpha_elements): vector of atomic numbers of the alpha elements. (Useful since conventions vary.)\n\n\n\n\n\n","category":"function"},{"location":"API/#Built-in-linelists","page":"Public Functions","title":"Built-in linelists","text":"","category":"section"},{"location":"API/#Korg.get_APOGEE_DR17_linelist","page":"Public Functions","title":"Korg.get_APOGEE_DR17_linelist","text":"get_APOGEE_DR17_linelist(; include_water=true)\n\nThe APOGEE DR 17 linelist.  It ranges from roughly 15,000 Å to 17,000 Å.  It is nearly the same at the DR 16 linelist described in Smith+ 2021.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.get_GALAH_DR3_linelist","page":"Public Functions","title":"Korg.get_GALAH_DR3_linelist","text":"get_GALAH_DR3_linelist()\n\nThe GALAH DR 3 linelist (also used for DR 4). It ranges from roughly 4,675 Å to 7,930 Å. This linelist is based on, but distinct from Heiter 2021. See Buder et al. 2021 for details.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.get_GES_linelist","page":"Public Functions","title":"Korg.get_GES_linelist","text":"get_GES_linelist()\n\nThe Gaia-ESO survey linelist from Heiter et al. 2021.  This linelist contains > 15 million lines, which means that it can take a while to synthesize spectra.  If you don't need molecular lines, you can set include_molecules=false to speed things up.\n\nKeyword Arguments\n\ninclude_molecules (default: true): whether to include molecular lines.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.get_VALD_solar_linelist","page":"Public Functions","title":"Korg.get_VALD_solar_linelist","text":"get_VALD_solar_linelist()\n\nGet a VALD \"extract stellar\" linelist produced at solar parameters, with the \"threshold\" value set to 0.01.  It was downloaded on 2021-05-20. It is intended to be used for quick tests only.\n\nIf you use this in a paper, please cite VALD appropriately.\n\n\n\n\n\n","category":"function"},{"location":"API/#Fitting","page":"Public Functions","title":"Fitting","text":"","category":"section"},{"location":"API/#Korg.Fit.fit_spectrum","page":"Public Functions","title":"Korg.Fit.fit_spectrum","text":"fit_spectrum(obs_wls, obs_flux, obs_err, linelist, initial_guesses, fixed_params; kwargs...)\n\nFind the parameters and abundances that best match a rectified observed spectrum.\n\nArguments:\n\nobs_wls: the wavelengths of the observed spectrum in Å.  These must be vacuum wavelengths.\nobs_flux: the rectified flux of the observed spectrum\nobs_err: uncertainty in flux\nlinelist: a linelist to use for the synthesis\ninitial_guesses: a NamedTuple specifying initial guesses for the parameters to be fit.  See \"Specifying parameters\" below.\nfixed_params: a NamedTuple specifying parameters to be held fixed. See \"Specifying parameters\" below.\n\ninitial_guesses and fixed_params can also be specified as Dicts instead of NamedTuples, which is more convenient when calling Korg from python.\n\nSpecifying parameters\n\nParameters are specified as named tuples or dictionaries. Named tuples look like this: (Teff=5000, logg=4.5, m_H=0.0).  Single-element named tuples require a semicolon: (; Teff=5000).\n\nRequired parameters\n\nTeff and logg must be specified in either initial_guesses or fixed_params.\n\nOptional Parameters\n\nThese can be specified in either initial_guesses or fixed_params, but if they are not default values are used.\n\nm_H: the metallicity of the star, in dex. Default: 0.0\nalpha_H: the alpha enhancement of the star, in dex. Default: m_H.  Note that, because of the parameter range supported by Korg.interpolate_marcs, only values within ±1 of m_H are supported.\nvmic: the microturbulence velocity, in km/s. Default: 1.0\nvsini: the projected rotational velocity of the star, in km/s. Default: 0.0. See Korg.apply_rotation for details.\nepsilon: the linear limb-darkening coefficient. Default: 0.6. Used for applying rotational broadening only.  See Korg.apply_rotation for details.\nIndividual elements, e.g. Na, specify the solar-relative ([X/H]) abundance of that element.\n\nKeyword arguments\n\nR, the resolution of the observed spectrum. This is required.  It can be specified as a function of wavelength, in which case it will be evaluated at the observed wavelengths.\nwindows is a vector of wavelength pairs, each of which specifies a wavelength \"window\" to synthesize and contribute to the total χ². If not specified, the entire spectrum is used. Overlapping windows are automatically merged.\nadjust_continuum (default: false) if true, adjust the continuum with the best-fit linear correction within each window, minimizing the chi-squared between data and model at every step of the optimization.\nwl_buffer is the number of Å to add to each side of the synthesis range for each window.\ntime_limit is the maximum number of seconds to spend in the optimizer. (default: 10_000). The optimizer will only checks against the time limit after each step, so the actual wall time may exceed this limit.\nprecision specifies the tolerance for the solver to accept a solution. The solver operates on transformed parameters, so precision doesn't translate straightforwardly to Teff, logg, etc, but the default value, 1e-4, provides a theoretical worst-case tolerance of about 0.15 K in Teff, 0.0002 in logg, 0.0001 in m_H, and 0.0004 in detailed abundances. In practice the precision achieved by the optimizer is about 10x bigger than this.\npostprocess can be used to arbitrarilly transform the synthesized (and LSF-convolved) spectrum before calculating the chi2.  It should take the form postprocess(flux, data, err) and write its changes in-place to the flux array.\nLSF_matrix: this can be provedided along with synthesis_wls in place of specifying R if you have a precomputed custom LSF matrix.\nsynthesis_wls: see LSF_matrix above. This can be a Korg.Wavelengths object or any arguments that can be passed to its constructor, e.g. a range or vector of ranges. Wavelengths are in Å.\nAny additional keyword arguments will be passed to Korg.synthesize when synthesizing the spectra for the fit.\n\nReturns\n\nA NamedTuple with the following fields:\n\nbest_fit_params: the best-fit parameters\nbest_fit_flux: the best-fit flux, with LSF applied, resampled, and rectified.\nobs_wl_mask: a bitmask for obs_wls which selects the wavelengths used in the fit (i.e. those in the windows)\nsolver_result: the result object from Optim.jl\ntrace: a vector of NamedTuples, each of which contains the parameters at each step of the optimization. This is empty for single parameter fits, because the underlying solver doesn't supply it.\ncovariance: a pair (params, Σ) where params is vector of parameter name (providing an order), and Σ is an estimate of the covariance matrix of the parameters.  It is the approximate inverse hessian of the log likelihood at the best-fit parameter calculated by the BGFS algorithm, and should be interpreted with caution.\n\ntip: Tip\nThis function takes a long time to compile the first time it is called. Compilation performance is significantly better on Julia 1.10+ than previous versions, so if you are using an older version of Julia, you may want to upgrade.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.Fit.ews_to_abundances","page":"Public Functions","title":"Korg.Fit.ews_to_abundances","text":"ews_to_abundances(atm, linelist, A_X, measured_EWs; kwargs...)\news_to_abundances(params, linelist, measured_EWs; kwargs...)\n\nCompute per-line abundances on the linear part of the curve of growth given a model atmosphere and a list of lines with equivalent widths.\n\nArguments:\n\natm: the model atmosphere (see Korg.read_model_atmosphere and Korg.interpolate_marcs).\nlinelist: A vector of Korg.Lines (see Korg.read_linelist).  The lines must be sorted by wavelength.\nA_X: a vector containing the A(X) abundances (log(nX/nH) + 12) for elements from hydrogen to uranium (see Korg.format_A_X). All syntheses are done with these abundances, so if the resulting abundances deviate significantly from these, you may wish to iterate.\nmeasured_EWs: a vector of equivalent widths (in mÅ)\n\nAlternatively, you can pass a vector of parameters like the one returned by ews_to_stellar_parameters instead of a model atmosphere and abundances vector. These should be in the order [Teff, logg, vmic, m_H].\n\nReturns\n\nA vector of abundances (A(X) = log10(n_X/n_H) + 12 format) for each line inlinelist, and a vector of ∂A/∂log(EW) for each line.\n\nOptional arguments:\n\nwl_step (default: 0.01) is the resolution in Å at which to synthesize the spectrum around each line.\new_window_size (default: 2): the farthest (in Å) to consider equivalent width contributions for each line.  It's very important that this is large enough to include each line entirely.\nblend_warn_threshold (default: 0.01) is the minimum absorption between two lines allowed before triggering a warning that they may be blended.\nfinite_difference_delta_A (default: 0.01): the step size in A(X) to use for the finite difference calculation of the curve of growth slope.\nsolar_abundances (default: Korg.default_solar_abundances): the solar abundances to use for the calculation of A(X). Only used if ews_to_abundances is called with a vector of parameters instead of a model atmosphere and abundances vector.\n\nAll other keyword arguments are passed to Korg.synthesize when synthesizing each line.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.Fit.ews_to_stellar_parameters","page":"Public Functions","title":"Korg.Fit.ews_to_stellar_parameters","text":"ews_to_stellar_parameters(linelist, measured_EWs; kwargs...)\n\nFind stellar parameters from equivalent widths the \"old fashioned\" way.  This function finds the values of T_mathrmeff, log g, v_mic, and [m/H] which satisfy the following conditions (using a Newton-Raphson solver):\n\nThe slope of the abundances of neutral lines with respect to lower excitation potential is zero.\nThe difference between the mean abundances of neutral and ionized lines is zero.\nThe slope of the abundances of neutral lines with respect to reduced equivalent width is zero.\nThe difference between the mean abundances of all lines and the model-atmosphere input [m/H] is zero. Here the \"slope\" refers to the slope of a linear fit to the abundances of the lines in question.\n\nArguments:\n\nlinelist: A vector of Korg.Line objects (see Korg.read_linelist).  The lines must be sorted by wavelength.\nmeasured_EWs: a vector of equivalent widths (in mÅ).\n\nReturns:\n\nA pair, (params, uncertainties), containing:\n\nthe best-fit parameters: [Teff, logg, vmic, [m/H]] as a vector (with vmic in km/s)\nthe uncertainties in the parameters, propagated from the uncertainties in the equivalent widths, which estimated from the line-to-line scatter and assumed to be uncorrelated. This is not a particularly rigorous error estimate, but it is a good sanity check.\n\ninfo: Info\nFor now, this function is limited to the parameters supported by the SDSS MARCS grid, i.e. down to [m/H] = -2.5 at the lowest metallicity grid point.\n\nKeyword arguments:\n\nabundance_adjustments (default: zeros(length(measured_EWs))) is a vector of abundances adjustments to be applied to the lines. This is useful when doing a differential analysis.\nTeff0 (default: 5000.0) is the starting guess for Teff\nlogg0 (default: 3.5) is the starting guess for logg\nvmic0 (default: 1.0) is the starting guess for vmic. Note that this must be nonzero in order to avoid null derivatives. Very small values are fine.\nm_H0 (default: 0.0) is the starting guess for [m/H]\ntolerances (default: [1e-3, 1e-3, 1e-4, 1e-3]) is the tolerance for the residuals each equation listed above. The solver stops when all residuals are less than the corresponding tolerance.\nmax_step_sizes (default: [1000.0, 1.0, 0.3, 0.5]) is the maximum step size to take in each parameter direction.  This is used to prevent the solver from taking too large of a step and missing the solution.  Be particularly cautious with the vmic (third) parameter, as the unadjusted step size is often too large.\nparameter_ranges (default: [(2800.0, 8000.0), (-0.5, 5.5), (1e-3, 10.0), (-2.5, 1.0)]) is the allowed range for each parameter. This is used to prevent the solver from wandering into unphysical parameter space, or outside the range of the SDSS MARCS grid supported by Korg.interpolate_marcs. The default ranges for T_mathrmeff, log g, and [m/H] are the widest supported by the MARCS grid. The minimum value for vmic is set to 1e-3 km/s to avoid null derivatives in the optimization.\nfix_params (default: [false, false, false, false]) is a vector of booleans indicating which parameters should be held fixed during the optimization. The order is [Teff, logg, vmic, [m/H]].\nsolar_abundances (default: Korg.default_solar_abundances) the solar abundances to assume\nverbose (default: false) is a boolean indicating whether to print verbose output during the optimization. Works, by default, by adding a callback that prints the current parameters, residuals, and abundances. The callback can be explicitly set with the callback keyword.\ncallback: is a function which is called at each step of the optimization. It is passed three arguments:\nthe current values of the parameters [Teff, logg, vmic, [m/H]]\nthe residuals of each equation being solved\nthe abundances of each line computed with the current parameters You can pass a callback function, to e.g. make a plot of the residuals at each step.\nmax_iterations (default: 30) is the maximum number of iterations to allow before stopping the optimization.\n\n\n\n\n\n","category":"function"},{"location":"API/#Secondary-functions","page":"Public Functions","title":"Secondary functions","text":"","category":"section"},{"location":"API/","page":"Public Functions","title":"Public Functions","text":"You don't need use these to synthesize spectra, but they might be relevant depending on what you are doing.","category":"page"},{"location":"API/#Postprocessing","page":"Public Functions","title":"Postprocessing","text":"","category":"section"},{"location":"API/","page":"Public Functions","title":"Public Functions","text":"These are used to transform observational or synthetic spectra.","category":"page"},{"location":"API/#Korg.apply_LSF","page":"Public Functions","title":"Korg.apply_LSF","text":"apply_LSF(flux, wls, R; window_size=4)\n\nApplies a gaussian line spread function the the spectrum with flux vector flux and wavelengths wls in any format accepted by synthesize, e.g. as a pair (λstart, λstop)) with constant spectral resolution (, R = lambdaDeltalambda, where Deltalambda is the LSF FWHM.  The window_size argument specifies how far out to extend the convolution kernel in standard deviations.\n\nFor the best match to data, your wavelength range should extend a couple Deltalambda outside the region you are going to compare.\n\nIf you are convolving many spectra defined on the same wavelenths to observational resolution, you will get much better performance using compute_LSF_matrix.\n\nKeyword Arguments\n\nwindow_size (default: 4): how far out to extend the convolution kernel in units of the LSF width (σ, not HWHM)\nrenormalize_edge (default: true): whether or not to renormalize the LSF at the edge of the wl range.  This doen't matter as long as synth_wls extends to large and small enough wavelengths.\n\nwarning: Warning\nThis is a naive, slow implementation.  Do not use it when performance matters.\napply_LSF will have weird behavior if your wavelength grid is not locally linearly-spaced. It is intended to be run on a fine wavelength grid, then downsampled to the observational (or otherwise desired) grid.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.compute_LSF_matrix","page":"Public Functions","title":"Korg.compute_LSF_matrix","text":"compute_LSF_matrix(synth_wls, obs_wls, R; kwargs...)\n\nConstruct a sparse matrix, which when multiplied with a flux vector defined over wavelenths synth_wls, applies a gaussian line spead function (LSF) and resamples to the wavelenths obswls.\n\nArguments\n\nsynth_wls: the synthesis wavelengths in any form recognized by synthesize, e.g. a pair containing a lower and upper bound in Å, a vector of pairs, or a vector of Julia range objects.\nobs_wls: the wavelengths of the observed spectrum\nR: the resolving power, R = lambdaDeltalambda\n\nKeyword Arguments\n\nwindow_size (default: 4): how far out to extend the convolution kernel in units of the LSF width (σ, not HWHM)\nverbose (default: true): whether or not to emit warnings and information to stdout/stderr.\nstep_tolerance: the maximum difference between adjacent wavelengths in synth_wls for them to be considered linearly spaced.  This is only used if synth_wls is a vector of wavelengths rather than a range or vector or ranges.\n\nFor the best match to data, your wavelength range should extend a couple Deltalambda outside the region you are going to compare.\n\nKorg.apply_LSF can apply an LSF to a single flux vector efficiently. This function is relatively slow, but one the LSF matrix is constructed, convolving spectra to observational resolution via matrix multiplication is fast.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.air_to_vacuum","page":"Public Functions","title":"Korg.air_to_vacuum","text":"air_to_vacuum(λ; cgs=λ<1)\n\nConvert λ from an air to vacuum.  λ is assumed to be in Å if it is ⩾ 1, in cm otherwise.  Formula from Birch and Downs (1994) via the VALD website.\n\nSee also: vacuum_to_air.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.vacuum_to_air","page":"Public Functions","title":"Korg.vacuum_to_air","text":"vacuum_to_air(λ; cgs=λ<1)\n\nconvert λ from a vacuum to air.  λ is assumed to be in Å if it is ⩾ 1, in cm otherwise.  Formula from Birch and Downs (1994) via the VALD website.\n\nSee also: air_to_vacuum.\n\n\n\n\n\n","category":"function"},{"location":"API/#Misc","page":"Public Functions","title":"Misc","text":"","category":"section"},{"location":"API/#Korg.blackbody","page":"Public Functions","title":"Korg.blackbody","text":"blackbody(T, λ)\n\nThe value of the Planck blackbody function for temperature T at wavelength λ [cm].\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.prune_linelist","page":"Public Functions","title":"Korg.prune_linelist","text":"prune_linelist(atm, linelist, A_X, wls...; threshold=1.0, sort=true, synthesis_kwargs...)\n\nReturn the vector containing the strongest lines in  linelist, (optionally) sorted by approximate equivalent width.\n\nArguments\n\natm: the atmosphere model\nlinelist: the linelist (a vector of Line objects)\nA_X: the abundance of each element (see format_A_X)\nwls...: the wavelength ranges to synthesize over.  These are specified the same way as the wls for synthesize.\n\nKeyword Arguments\n\nthreshold=0.1: The threshold ratio in the line center absorption to the continuum absorption computed at the photosphere for a line to be included in the returned list. 0.1 is a reasonable default for getting a sense of what might be measurable in a high-res, high-quality spectrum, but it should not be used to create a linelist for synthesis.\nsort_by_EW=true: If true, the returned linelist will be sorted by approximate reduced equivalent width.  If false, the linelist will be in wavelength order. Leaving the list in wavelength order is much faster, but sorting by strength is useful for visualizing the strongest lines.\nverbose=true: If true, a progress bar will be displayed while measuring the EWs. All other kwargs are passed to internal calls to synthesize.\nmax_distance=0.0, how far from wls lines can be (in Å) before they are excluded from the returned list.\n\ncaution: Caution\nWhile this function can be used to prune a linelist for synthesis, the default behavior too aggressive for this purpose.  Set a much lower threshold (e.g. threshold=1e-4) and use sort_by_EW=false if you are pruning the linelist to speedup synthesis.  Note that Korg will dynamically choose which lines to include even if you use a large linelist (see the line_cutoff_threshold keyword argument to synthesize).\n\nSee also merge_close_lines if you are using this for plotting.\n\n\n\n\n\n","category":"function"},{"location":"API/#Korg.merge_close_lines","page":"Public Functions","title":"Korg.merge_close_lines","text":"merge_close_lines(linelist; merge_distance=0.2)\n\nProduce a list of the species and wavelengths of the lines in linelist, merging lines of the same species that are within merge_distance (default: 0.2 Å).  This is useful for labeling lines in a plot after running prune_linelist.\n\nArguments\n\nlinelist: the linelist (a vector of Line objects)\n\nKeyword Arguments\n\nmerge_distance=0.2: The maximum distance in Å between lines of the same species to be merged into a single entry\n\nReturns\n\nA vector of tuples (wl, wl_low, wl_high, species) where wl is gf-weighted wavelength of each set of merged lines (Å), wl_low and wl_high are their highest and lowest wavelength, and species is a string (not a Korg.Species) identifying the species of the line. These will be in wavelength order.\n\n\n\n\n\n","category":"function"}]
}
